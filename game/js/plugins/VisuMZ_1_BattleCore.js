//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.54;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.54] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type Number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type Number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type Number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type Number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type Number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x47679c=_0x2ca8;(function(_0x582bdd,_0x5d19c9){const _0x4d8d69=_0x2ca8,_0x491fa9=_0x582bdd();while(!![]){try{const _0x583f9a=parseInt(_0x4d8d69(0x1f6))/0x1+parseInt(_0x4d8d69(0x414))/0x2*(-parseInt(_0x4d8d69(0x6e7))/0x3)+-parseInt(_0x4d8d69(0x6a4))/0x4*(parseInt(_0x4d8d69(0x309))/0x5)+parseInt(_0x4d8d69(0x6e0))/0x6*(-parseInt(_0x4d8d69(0x413))/0x7)+-parseInt(_0x4d8d69(0x38d))/0x8*(parseInt(_0x4d8d69(0x658))/0x9)+-parseInt(_0x4d8d69(0x617))/0xa+parseInt(_0x4d8d69(0x28b))/0xb;if(_0x583f9a===_0x5d19c9)break;else _0x491fa9['push'](_0x491fa9['shift']());}catch(_0x52dec9){_0x491fa9['push'](_0x491fa9['shift']());}}}(_0x1493,0x80f19));var label='BattleCore',tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x52501f){const _0x32d396=_0x2ca8;return _0x52501f[_0x32d396(0x8f9)]&&_0x52501f[_0x32d396(0x4b7)][_0x32d396(0x3f6)]('['+label+']');})[0x0];VisuMZ[label][_0x47679c(0x1ea)]=VisuMZ[label][_0x47679c(0x1ea)]||{},VisuMZ[_0x47679c(0x91f)]=function(_0x1161f3,_0xa1a768){const _0x58408a=_0x47679c;for(const _0x59a1eb in _0xa1a768){if(_0x59a1eb[_0x58408a(0x503)](/(.*):(.*)/i)){const _0x32fe7f=String(RegExp['$1']),_0x356d25=String(RegExp['$2'])[_0x58408a(0x1d3)]()['trim']();let _0x2c892a,_0x97d873,_0x17c416;switch(_0x356d25){case _0x58408a(0x6f3):_0x2c892a=_0xa1a768[_0x59a1eb]!==''?Number(_0xa1a768[_0x59a1eb]):0x0;break;case'ARRAYNUM':_0x97d873=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):[],_0x2c892a=_0x97d873['map'](_0x3e3145=>Number(_0x3e3145));break;case _0x58408a(0x294):_0x2c892a=_0xa1a768[_0x59a1eb]!==''?eval(_0xa1a768[_0x59a1eb]):null;break;case _0x58408a(0x5a1):_0x97d873=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):[],_0x2c892a=_0x97d873[_0x58408a(0x261)](_0x205734=>eval(_0x205734));break;case _0x58408a(0x565):_0x2c892a=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):'';break;case _0x58408a(0x8c6):_0x97d873=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):[],_0x2c892a=_0x97d873['map'](_0x33784e=>JSON['parse'](_0x33784e));break;case _0x58408a(0x67c):_0x2c892a=_0xa1a768[_0x59a1eb]!==''?new Function(JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb])):new Function(_0x58408a(0x612));break;case'ARRAYFUNC':_0x97d873=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):[],_0x2c892a=_0x97d873[_0x58408a(0x261)](_0x20cd0d=>new Function(JSON[_0x58408a(0x37a)](_0x20cd0d)));break;case _0x58408a(0x8df):_0x2c892a=_0xa1a768[_0x59a1eb]!==''?String(_0xa1a768[_0x59a1eb]):'';break;case _0x58408a(0x62d):_0x97d873=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):[],_0x2c892a=_0x97d873[_0x58408a(0x261)](_0x20718c=>String(_0x20718c));break;case _0x58408a(0x5f8):_0x17c416=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):{},_0x1161f3[_0x32fe7f]={},VisuMZ['ConvertParams'](_0x1161f3[_0x32fe7f],_0x17c416);continue;case _0x58408a(0x4c4):_0x97d873=_0xa1a768[_0x59a1eb]!==''?JSON[_0x58408a(0x37a)](_0xa1a768[_0x59a1eb]):[],_0x2c892a=_0x97d873[_0x58408a(0x261)](_0x33d1aa=>VisuMZ[_0x58408a(0x91f)]({},JSON[_0x58408a(0x37a)](_0x33d1aa)));break;default:continue;}_0x1161f3[_0x32fe7f]=_0x2c892a;}}return _0x1161f3;},(_0x137805=>{const _0x568d78=_0x47679c,_0x1bbae3=_0x137805['name'];for(const _0xd93d38 of dependencies){if(!Imported[_0xd93d38]){alert('%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.'[_0x568d78(0x151)](_0x1bbae3,_0xd93d38)),SceneManager['exit']();break;}}const _0x14028e=_0x137805['description'];if(_0x14028e[_0x568d78(0x503)](/\[Version[ ](.*?)\]/i)){const _0x280d73=Number(RegExp['$1']);_0x280d73!==VisuMZ[label][_0x568d78(0x244)]&&(alert(_0x568d78(0x1db)[_0x568d78(0x151)](_0x1bbae3,_0x280d73)),SceneManager[_0x568d78(0x35e)]());}if(_0x14028e[_0x568d78(0x503)](/\[Tier[ ](\d+)\]/i)){const _0x166fc5=Number(RegExp['$1']);_0x166fc5<tier?(alert(_0x568d78(0x4ab)[_0x568d78(0x151)](_0x1bbae3,_0x166fc5,tier)),SceneManager['exit']()):tier=Math[_0x568d78(0x766)](_0x166fc5,tier);}VisuMZ[_0x568d78(0x91f)](VisuMZ[label][_0x568d78(0x1ea)],_0x137805[_0x568d78(0x157)]);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x10e6d3){const _0xaa49bd=_0x47679c;let _0x29fed6=[];for(const _0x2ce9a5 of _0x10e6d3){_0x29fed6=_0x29fed6['concat'](VisuMZ[_0xaa49bd(0x57b)](_0x2ce9a5));}return _0x29fed6[_0xaa49bd(0x36c)](_0x400f5b=>_0x400f5b);},VisuMZ[_0x47679c(0x57b)]=function(_0x42563e){const _0xc56300=_0x47679c,_0x5bb05c=BattleManager[_0xc56300(0x85a)]()[_0xc56300(0x36c)](_0x22e707=>_0x22e707&&_0x22e707['isAppeared']()),_0x1d2fd7=BattleManager[_0xc56300(0x8f5)],_0x45fa7e=BattleManager['_target'],_0x1bfa90=BattleManager[_0xc56300(0x5d7)]?BattleManager[_0xc56300(0x5d7)][_0xc56300(0x36d)](0x0):_0x5bb05c;_0x42563e=_0x42563e[_0xc56300(0x6d4)]()[_0xc56300(0x616)]();if(_0x42563e==='user')return[_0x1d2fd7];else{if(_0x42563e===_0xc56300(0x2db))return[_0x45fa7e];else{if(_0x42563e==='prev\x20target'){if(_0x45fa7e){const _0x3a491e=_0x1bfa90[_0xc56300(0x2b9)](_0x45fa7e);return _0x3a491e>=0x0?[_0x1bfa90[_0x3a491e-0x1]||_0x45fa7e]:[_0x45fa7e];}}else{if(_0x42563e===_0xc56300(0x4ea)){if(_0x45fa7e){const _0x3efa07=_0x1bfa90[_0xc56300(0x2b9)](_0x45fa7e);return _0x3efa07>=0x0?[_0x1bfa90[_0x3efa07+0x1]||_0x45fa7e]:[_0x45fa7e];}}else{if(_0x42563e===_0xc56300(0x91d))return _0x1bfa90;else{if(_0x42563e===_0xc56300(0x159))return[_0x1d2fd7]['concat'](_0x1bfa90);else{if(_0x42563e==='not\x20focus')return _0x5bb05c[_0xc56300(0x36c)](_0x6af29b=>_0x6af29b!==_0x1d2fd7&&!_0x1bfa90[_0xc56300(0x3f6)](_0x6af29b)&&_0x6af29b[_0xc56300(0x787)]());}}}}}}if(_0x1d2fd7){if(_0x42563e==='alive\x20friends')return _0x1d2fd7[_0xc56300(0x36f)]()[_0xc56300(0x8ef)]();else{if(_0x42563e===_0xc56300(0x4bd))return _0x1d2fd7[_0xc56300(0x36f)]()[_0xc56300(0x8ef)]()[_0xc56300(0x36c)](_0x50561f=>_0x50561f!==_0x1d2fd7);else{if(_0x42563e===_0xc56300(0x53d))return _0x1d2fd7[_0xc56300(0x36f)]()[_0xc56300(0x8ef)]()[_0xc56300(0x36c)](_0x3313e5=>_0x3313e5!==_0x45fa7e);else{if(_0x42563e===_0xc56300(0x520))return _0x1d2fd7[_0xc56300(0x36f)]()[_0xc56300(0x8c1)]();else{if(_0x42563e[_0xc56300(0x503)](/FRIEND INDEX (\d+)/i)){const _0x4361d3=Number(RegExp['$1']);return[_0x1d2fd7[_0xc56300(0x36f)]()[_0xc56300(0x3fb)]()[_0x4361d3]];}}}}}if(_0x42563e==='alive\x20opponents')return _0x1d2fd7[_0xc56300(0x1f5)]()[_0xc56300(0x8ef)]();else{if(_0x42563e===_0xc56300(0xfd))return _0x1d2fd7[_0xc56300(0x1f5)]()[_0xc56300(0x8ef)]()[_0xc56300(0x36c)](_0x3847e0=>_0x3847e0!==_0x45fa7e);else{if(_0x42563e===_0xc56300(0x6fd))return _0x1d2fd7[_0xc56300(0x1f5)]()[_0xc56300(0x8c1)]();else{if(_0x42563e['match'](/OPPONENT INDEX (\d+)/i)){const _0x2a8480=Number(RegExp['$1']);return[_0x1d2fd7[_0xc56300(0x1f5)]()[_0xc56300(0x3fb)]()[_0x2a8480]];}}}}}if(_0x42563e===_0xc56300(0x54b))return $gameParty['aliveMembers']();else{if(_0x42563e===_0xc56300(0x6bb))return $gameParty[_0xc56300(0x8ef)]()['filter'](_0x303d82=>_0x303d82!==_0x1d2fd7);else{if(_0x42563e===_0xc56300(0x195))return $gameParty[_0xc56300(0x8ef)]()['filter'](_0x41bf89=>_0x41bf89!==_0x45fa7e);else{if(_0x42563e===_0xc56300(0x574))return $gameParty[_0xc56300(0x8c1)]();else{if(_0x42563e[_0xc56300(0x503)](/ACTOR INDEX (\d+)/i)){const _0x2afc04=Number(RegExp['$1']);return[$gameParty[_0xc56300(0x3fb)]()[_0x2afc04]];}else{if(_0x42563e['match'](/ACTOR ID (\d+)/i)){const _0x2a0fa7=Number(RegExp['$1']);return[$gameActors[_0xc56300(0x84d)](_0x2a0fa7)];}}}}}}if(_0x42563e===_0xc56300(0x372))return $gameTroop[_0xc56300(0x8ef)]();else{if(_0x42563e===_0xc56300(0x8d1))return $gameTroop[_0xc56300(0x8ef)]()[_0xc56300(0x36c)](_0x10c5f3=>_0x10c5f3!==_0x1d2fd7);else{if(_0x42563e==='alive\x20enemies\x20not\x20target')return $gameTroop[_0xc56300(0x8ef)]()['filter'](_0x47f5d3=>_0x47f5d3!==_0x45fa7e);else{if(_0x42563e===_0xc56300(0x676))return $gameTroop['deadMembers']();else{if(_0x42563e[_0xc56300(0x503)](/ENEMY INDEX (\d+)/i)){const _0x3674de=Number(RegExp['$1']);return[$gameTroop['members']()[_0x3674de]];}else{if(_0x42563e[_0xc56300(0x503)](/ENEMY ID (\d+)/i)){const _0x175259=Number(RegExp['$1']);return $gameTroop[_0xc56300(0x8ef)]()[_0xc56300(0x36c)](_0x58d947=>_0x58d947[_0xc56300(0x70a)]()===_0x175259);}}}}}}if(_0x42563e===_0xc56300(0x2f0))return _0x5bb05c[_0xc56300(0x36c)](_0x1dd15e=>_0x1dd15e[_0xc56300(0x8e8)]());else{if(_0x42563e===_0xc56300(0x1af))return _0x5bb05c[_0xc56300(0x36c)](_0x4455da=>_0x4455da[_0xc56300(0x8e8)]()&&_0x4455da!==_0x1d2fd7);else{if(_0x42563e===_0xc56300(0x5ff))return _0x5bb05c[_0xc56300(0x36c)](_0x1e64fc=>_0x1e64fc[_0xc56300(0x8e8)]()&&_0x1e64fc!==_0x45fa7e);else{if(_0x42563e===_0xc56300(0x231))return _0x5bb05c[_0xc56300(0x36c)](_0x4c3d90=>_0x4c3d90[_0xc56300(0x40e)]());}}}return[];},PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x24b),_0x305884=>{const _0x38b341=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x38b341(0x91f)](_0x305884,_0x305884);const _0x45e138=$gameTemp[_0x38b341(0x47a)](),_0x56e9e5=BattleManager[_0x38b341(0x4c7)],_0x45cc35=BattleManager[_0x38b341(0x8f5)],_0x59954c=BattleManager[_0x38b341(0x5d7)]?BattleManager[_0x38b341(0x5d7)][_0x38b341(0x36d)](0x0):[],_0x354802=BattleManager[_0x38b341(0x269)];if(!_0x45e138||!_0x56e9e5||!_0x45cc35)return;if(!_0x56e9e5[_0x38b341(0x88b)]())return;if(_0x305884[_0x38b341(0x4c5)])_0x354802['displayAction'](_0x45cc35,_0x56e9e5['item']());_0x305884[_0x38b341(0x3b7)]&&_0x354802[_0x38b341(0x6b4)]('applyImmortal',_0x45cc35,_0x59954c,!![]);if(_0x305884[_0x38b341(0x109)])_0x354802[_0x38b341(0x6b4)]('performActionStart',_0x45cc35,_0x56e9e5);if(_0x305884[_0x38b341(0x362)])_0x354802[_0x38b341(0x6b4)](_0x38b341(0x4cc));if(_0x305884[_0x38b341(0x202)])_0x354802[_0x38b341(0x6b4)](_0x38b341(0x32d),_0x45cc35,_0x56e9e5);if(_0x305884[_0x38b341(0x40d)])_0x354802[_0x38b341(0x6b4)](_0x38b341(0x3bf));_0x45e138['setWaitMode']('battlelog');}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x49a),_0x28b0d0=>{const _0x46b0c8=_0x47679c;if(!SceneManager[_0x46b0c8(0x75d)]())return;VisuMZ[_0x46b0c8(0x91f)](_0x28b0d0,_0x28b0d0);const _0x310934=$gameTemp[_0x46b0c8(0x47a)](),_0x5d3c65=BattleManager[_0x46b0c8(0x4c7)],_0x360f48=BattleManager[_0x46b0c8(0x8f5)],_0x47f43f=BattleManager[_0x46b0c8(0x5d7)]?BattleManager[_0x46b0c8(0x5d7)][_0x46b0c8(0x36d)](0x0):[],_0x31fc15=BattleManager[_0x46b0c8(0x269)],_0x4198f3=_0x28b0d0[_0x46b0c8(0x916)]??![];if(!_0x310934||!_0x5d3c65||!_0x360f48)return;if(!_0x5d3c65[_0x46b0c8(0x88b)]())return;let _0x524daa=_0x4198f3?_0x31fc15['getDualWieldTimes'](_0x360f48):0x1;for(let _0x23b4db=0x0;_0x23b4db<_0x524daa;_0x23b4db++){_0x4198f3&&_0x360f48[_0x46b0c8(0xf2)]()&&_0x31fc15[_0x46b0c8(0x6b4)](_0x46b0c8(0x680),_0x360f48,_0x23b4db);if(_0x28b0d0[_0x46b0c8(0x2ec)])_0x31fc15['push'](_0x46b0c8(0x5d5),_0x360f48,_0x5d3c65);if(_0x28b0d0[_0x46b0c8(0x4a0)]>0x0)_0x31fc15[_0x46b0c8(0x6b4)](_0x46b0c8(0x473),_0x28b0d0[_0x46b0c8(0x4a0)]);if(_0x28b0d0[_0x46b0c8(0x5e1)])_0x31fc15[_0x46b0c8(0x6b4)](_0x46b0c8(0x61d),_0x360f48,_0x47f43f,_0x5d3c65[_0x46b0c8(0x88b)]()[_0x46b0c8(0x62c)]);if(_0x28b0d0['WaitForAnimation'])_0x31fc15[_0x46b0c8(0x6b4)](_0x46b0c8(0x3bf));for(const _0x26a1b6 of _0x47f43f){if(!_0x26a1b6)continue;if(_0x28b0d0[_0x46b0c8(0x2e0)])_0x31fc15[_0x46b0c8(0x6b4)](_0x46b0c8(0x5cd),_0x360f48,_0x26a1b6);}}_0x4198f3&&_0x360f48[_0x46b0c8(0xf2)]()&&_0x31fc15['push'](_0x46b0c8(0x8ae),_0x360f48);if(_0x28b0d0[_0x46b0c8(0x3b7)])_0x31fc15[_0x46b0c8(0x6b4)](_0x46b0c8(0x374),_0x360f48,_0x47f43f,![]);_0x310934['setWaitMode'](_0x46b0c8(0x4a9));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x1e0),_0x52d031=>{const _0x114537=_0x47679c;if(!SceneManager[_0x114537(0x75d)]())return;VisuMZ[_0x114537(0x91f)](_0x52d031,_0x52d031);const _0x5caed7=$gameTemp[_0x114537(0x47a)](),_0x4e860e=BattleManager['_action'],_0x30fd76=BattleManager[_0x114537(0x8f5)],_0x593291=BattleManager['_allTargets']?BattleManager[_0x114537(0x5d7)][_0x114537(0x36d)](0x0):[],_0x381f4a=BattleManager[_0x114537(0x269)],_0x33fa1b=_0x52d031[_0x114537(0x916)]??![];if(!_0x5caed7||!_0x4e860e||!_0x30fd76)return;if(!_0x4e860e[_0x114537(0x88b)]())return;let _0x44779a=_0x33fa1b?_0x381f4a[_0x114537(0x5ea)](_0x30fd76):0x1;for(let _0x583329=0x0;_0x583329<_0x44779a;_0x583329++){for(const _0x2d4bf4 of _0x593291){if(!_0x2d4bf4)continue;_0x33fa1b&&_0x30fd76[_0x114537(0xf2)]()&&_0x381f4a[_0x114537(0x6b4)](_0x114537(0x680),_0x30fd76,_0x583329);if(_0x52d031[_0x114537(0x2ec)])_0x381f4a[_0x114537(0x6b4)](_0x114537(0x5d5),_0x30fd76,_0x4e860e);if(_0x52d031[_0x114537(0x3d7)]>0x0)_0x381f4a['push']('waitCount',_0x52d031['WaitCount1']);if(_0x52d031[_0x114537(0x5e1)])_0x381f4a[_0x114537(0x6b4)](_0x114537(0x61d),_0x30fd76,[_0x2d4bf4],_0x4e860e['item']()['animationId']);if(_0x52d031[_0x114537(0x542)]>0x0)_0x381f4a['push'](_0x114537(0x473),_0x52d031['WaitCount2']);if(_0x52d031[_0x114537(0x2e0)])_0x381f4a['push'](_0x114537(0x5cd),_0x30fd76,_0x2d4bf4);}}_0x33fa1b&&_0x30fd76[_0x114537(0xf2)]()&&_0x381f4a[_0x114537(0x6b4)](_0x114537(0x8ae),_0x30fd76);if(_0x52d031[_0x114537(0x3b7)])_0x381f4a[_0x114537(0x6b4)](_0x114537(0x374),_0x30fd76,_0x593291,![]);_0x5caed7[_0x114537(0x851)]('battlelog');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x31a),_0x5702e0=>{const _0xa5869e=_0x47679c;if(!SceneManager[_0xa5869e(0x75d)]())return;VisuMZ['ConvertParams'](_0x5702e0,_0x5702e0);const _0x5244c7=$gameTemp[_0xa5869e(0x47a)](),_0x46b170=BattleManager[_0xa5869e(0x4c7)],_0x47365d=BattleManager[_0xa5869e(0x8f5)],_0x4e9327=BattleManager[_0xa5869e(0x5d7)]?BattleManager[_0xa5869e(0x5d7)][_0xa5869e(0x36d)](0x0):[],_0x2ea66f=BattleManager[_0xa5869e(0x269)];if(!_0x5244c7||!_0x46b170||!_0x47365d)return;if(!_0x46b170['item']())return;if(_0x5702e0['ApplyImmortal'])_0x2ea66f[_0xa5869e(0x6b4)](_0xa5869e(0x374),_0x47365d,_0x4e9327,![]);if(_0x5702e0[_0xa5869e(0x7c3)])_0x2ea66f[_0xa5869e(0x6b4)](_0xa5869e(0x70e));if(_0x5702e0[_0xa5869e(0x388)])_0x2ea66f[_0xa5869e(0x6b4)](_0xa5869e(0x72c));if(_0x5702e0[_0xa5869e(0x210)])_0x2ea66f[_0xa5869e(0x6b4)]('clear');if(_0x5702e0[_0xa5869e(0x31b)])_0x2ea66f[_0xa5869e(0x6b4)](_0xa5869e(0x832),_0x47365d);if(_0x5702e0['WaitForMovement'])_0x2ea66f[_0xa5869e(0x6b4)](_0xa5869e(0x4cc));_0x5244c7[_0xa5869e(0x851)](_0xa5869e(0x4a9));}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_ChangeAngle',_0x3e2955=>{const _0x375794=_0x47679c;if(!SceneManager[_0x375794(0x75d)]())return;if(!Imported[_0x375794(0x94c)])return;VisuMZ[_0x375794(0x91f)](_0x3e2955,_0x3e2955);const _0x1fea54=$gameTemp['getLastPluginCommandInterpreter'](),_0x5c5ff1=_0x3e2955['WaitForAngle'];if(!_0x1fea54)return;$gameScreen[_0x375794(0xfb)](_0x3e2955[_0x375794(0x814)],_0x3e2955[_0x375794(0x94f)],_0x3e2955[_0x375794(0x3f5)]);if(_0x5c5ff1)_0x1fea54[_0x375794(0x851)]('battleAngle');}),PluginManager['registerCommand'](pluginData['name'],_0x47679c(0x82a),_0x489227=>{const _0x29f2a8=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x29f2a8(0x94c)])return;VisuMZ[_0x29f2a8(0x91f)](_0x489227,_0x489227);const _0x355b3f=$gameTemp[_0x29f2a8(0x47a)](),_0x515b4b=_0x489227[_0x29f2a8(0x1f1)];if(!_0x355b3f)return;$gameScreen[_0x29f2a8(0xfb)](0x0,_0x489227[_0x29f2a8(0x94f)],_0x489227[_0x29f2a8(0x3f5)]);if(_0x515b4b)_0x355b3f[_0x29f2a8(0x851)](_0x29f2a8(0xeb));}),PluginManager['registerCommand'](pluginData['name'],_0x47679c(0x652),_0x2382e1=>{const _0x45cc0c=_0x47679c;if(!SceneManager[_0x45cc0c(0x75d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x57dd5a=$gameTemp[_0x45cc0c(0x47a)]();if(!_0x57dd5a)return;_0x57dd5a['setWaitMode'](_0x45cc0c(0xeb));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x69d),_0x28e556=>{const _0x4298e5=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4298e5(0x91f)](_0x28e556,_0x28e556);const _0x530cc7=$gameTemp[_0x4298e5(0x47a)](),_0x50cf23=BattleManager['_action'],_0x26d4b2=BattleManager['_subject'],_0x380059=VisuMZ[_0x4298e5(0x889)](_0x28e556[_0x4298e5(0x714)]),_0x3f6819=_0x28e556['Mirror'],_0x20d86d=BattleManager[_0x4298e5(0x269)];if(!_0x530cc7||!_0x50cf23||!_0x26d4b2)return;if(!_0x50cf23[_0x4298e5(0x88b)]())return;let _0x32f03e=_0x50cf23['item']()[_0x4298e5(0x62c)];if(_0x32f03e<0x0)_0x32f03e=_0x26d4b2['attackAnimationId1']();$gameTemp[_0x4298e5(0x6ec)](_0x380059,_0x32f03e,_0x3f6819),_0x28e556['WaitForAnimation']&&_0x530cc7['setWaitMode'](_0x4298e5(0x31d));}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x573),_0x29b4a6=>{const _0x25e52c=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x29b4a6,_0x29b4a6);const _0x43f35d=$gameTemp[_0x25e52c(0x47a)](),_0x36beb1=BattleManager[_0x25e52c(0x8f5)],_0x496398=VisuMZ[_0x25e52c(0x889)](_0x29b4a6[_0x25e52c(0x714)]),_0x476f98=_0x29b4a6['Mirror'],_0x15f22e=BattleManager['_logWindow'];if(!_0x43f35d||!_0x36beb1)return;const _0x57b662=_0x36beb1[_0x25e52c(0x13d)]();$gameTemp['requestAnimation'](_0x496398,_0x57b662,_0x476f98),_0x29b4a6[_0x25e52c(0x40d)]&&_0x43f35d['setWaitMode'](_0x25e52c(0x31d));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x29a),_0x487dbf=>{const _0x4aa311=_0x47679c;if(!SceneManager[_0x4aa311(0x75d)]())return;VisuMZ[_0x4aa311(0x91f)](_0x487dbf,_0x487dbf);const _0x1d6618=_0x4a7fbc[_0x4aa311(0x80d)](_0x487dbf[_0x4aa311(0x366)]);if(_0x1d6618<=0x0)return;const _0x281b5d=$gameTemp['getLastPluginCommandInterpreter'](),_0x4a7fbc=BattleManager['_subject'],_0x3a7626=VisuMZ[_0x4aa311(0x889)](_0x487dbf['Targets']),_0x2c91e2=_0x487dbf['Mirror'],_0x51d25f=BattleManager[_0x4aa311(0x269)];if(!_0x281b5d||!_0x4a7fbc)return;$gameTemp[_0x4aa311(0x6ec)](_0x3a7626,_0x1d6618,_0x2c91e2),_0x487dbf[_0x4aa311(0x40d)]&&_0x281b5d['setWaitMode'](_0x4aa311(0x31d));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x434),_0xf0605c=>{const _0x5ac9d3=_0x47679c;if(!SceneManager[_0x5ac9d3(0x75d)]())return;VisuMZ['ConvertParams'](_0xf0605c,_0xf0605c);const _0x455eb7=$gameTemp[_0x5ac9d3(0x47a)](),_0x1ed868=BattleManager[_0x5ac9d3(0x4c7)],_0x4c2cc2=_0xf0605c[_0x5ac9d3(0x7b7)],_0x1493cd=VisuMZ[_0x5ac9d3(0x889)](_0xf0605c[_0x5ac9d3(0x714)]);if(!_0x455eb7||!_0x1ed868)return;if(!_0x1ed868[_0x5ac9d3(0x88b)]())return;for(const _0xf3fb09 of _0x1493cd){if(!_0xf3fb09)continue;_0xf3fb09[_0x5ac9d3(0x32d)](_0x1ed868,_0x4c2cc2);}if(_0xf0605c[_0x5ac9d3(0x40d)])_0x455eb7[_0x5ac9d3(0x851)](_0x5ac9d3(0x31d));}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Animation_ChangeBattlePortrait',_0x4086ea=>{const _0x5ec938=_0x47679c;VisuMZ['ConvertParams'](_0x4086ea,_0x4086ea);const _0x1bc218=$gameTemp['getLastPluginCommandInterpreter'](),_0x996b05=VisuMZ[_0x5ec938(0x889)](_0x4086ea[_0x5ec938(0x714)]),_0x4a7bd9=_0x4086ea[_0x5ec938(0x543)];if(!_0x4a7bd9)return;for(const _0x3e8cd8 of _0x996b05){if(!_0x3e8cd8)continue;if(!_0x3e8cd8[_0x5ec938(0xf2)]())continue;_0x3e8cd8[_0x5ec938(0x1c4)](_0x4a7bd9);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x6be),_0x2d993c=>{const _0x29bf67=_0x47679c;if(!SceneManager[_0x29bf67(0x56c)])return;if(!SceneManager[_0x29bf67(0x56c)]['_spriteset'])return;if(!Imported[_0x29bf67(0x4a7)])return;VisuMZ[_0x29bf67(0x91f)](_0x2d993c,_0x2d993c);const _0x4d555e=$gameTemp['getLastPluginCommandInterpreter'](),_0x4ee706=Math[_0x29bf67(0x23b)](_0x2d993c['pointX']),_0x25fd19=Math[_0x29bf67(0x23b)](_0x2d993c['pointY']);$gameTemp[_0x29bf67(0x255)](_0x4ee706,_0x25fd19,_0x2d993c[_0x29bf67(0x60c)],_0x2d993c[_0x29bf67(0x7b7)],_0x2d993c[_0x29bf67(0x62e)]),_0x2d993c[_0x29bf67(0x8e0)]&&_0x4d555e&&(SceneManager[_0x29bf67(0x56c)][_0x29bf67(0x610)]['updatePointAnimations'](),_0x4d555e['setWaitMode'](_0x29bf67(0x31d)));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x3c5),_0xbff581=>{const _0x105465=_0x47679c;if(!SceneManager[_0x105465(0x75d)]())return;VisuMZ[_0x105465(0x91f)](_0xbff581,_0xbff581);const _0x4f3a6d=$gameTemp[_0x105465(0x47a)](),_0x7e0282=VisuMZ[_0x105465(0x889)](_0xbff581[_0x105465(0x714)]),_0xcc34a4=_0xbff581[_0x105465(0x60c)],_0xe1227d=_0xbff581[_0x105465(0x7b7)];if(!_0x4f3a6d)return;$gameTemp[_0x105465(0x6ec)](_0x7e0282,_0xcc34a4,_0xe1227d);if(_0xbff581[_0x105465(0x40d)])_0x4f3a6d[_0x105465(0x851)](_0x105465(0x31d));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],'ActSeq_Animation_WaitForAnimation',_0x46ca28=>{const _0xd3479d=_0x47679c;if(!SceneManager[_0xd3479d(0x75d)]())return;const _0x46fd53=$gameTemp[_0xd3479d(0x47a)]();if(!_0x46fd53)return;_0x46fd53[_0xd3479d(0x851)](_0xd3479d(0x31d));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x554),_0x47d238=>{const _0x146707=_0x47679c;if(!SceneManager[_0x146707(0x75d)]())return;VisuMZ[_0x146707(0x91f)](_0x47d238,_0x47d238);const _0x4d5d1a=BattleManager[_0x146707(0x269)],_0x312737=_0x47d238[_0x146707(0x763)]&&Imported[_0x146707(0x538)];_0x4d5d1a[_0x146707(0xe0)](_0x47d238[_0x146707(0x8a2)]),_0x312737&&Imported[_0x146707(0x538)]&&$gameSystem[_0x146707(0x73f)](_0x47d238[_0x146707(0x8a2)]||'',_0x47d238[_0x146707(0x234)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_BattleLog_Clear',_0x200d3c=>{const _0x3548d6=_0x47679c;if(!SceneManager[_0x3548d6(0x75d)]())return;const _0x2f3238=BattleManager['_logWindow'];_0x2f3238[_0x3548d6(0x78c)]();}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x7fc),_0x34be52=>{const _0x18d90e=_0x47679c;if(!SceneManager[_0x18d90e(0x75d)]())return;const _0x20d872=$gameTemp[_0x18d90e(0x47a)](),_0x5e1ad0=BattleManager[_0x18d90e(0x4c7)],_0x181a95=BattleManager[_0x18d90e(0x8f5)],_0x52f670=BattleManager[_0x18d90e(0x269)];if(!_0x20d872||!_0x5e1ad0||!_0x181a95)return;if(!_0x5e1ad0[_0x18d90e(0x88b)]())return;_0x52f670[_0x18d90e(0x5bb)](_0x181a95,_0x5e1ad0[_0x18d90e(0x88b)]()),_0x20d872[_0x18d90e(0x851)]('battlelog');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x7f8),_0x2aa11a=>{const _0x72f6cb=_0x47679c;if(!SceneManager['isSceneBattle']())return;const _0x1635f0=BattleManager[_0x72f6cb(0x269)];_0x1635f0[_0x72f6cb(0x6ad)]();}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x8b3),_0x539ef8=>{const _0xf4099a=_0x47679c;if(!SceneManager['isSceneBattle']())return;const _0x46ecd1=BattleManager['_logWindow'];_0x46ecd1[_0xf4099a(0x10c)]();}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x108),_0x11f6f4=>{const _0x4078e7=_0x47679c;if(!SceneManager[_0x4078e7(0x75d)]())return;const _0x2c2624=BattleManager['_logWindow'];_0x2c2624['refresh']();}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x5b9),_0x14104a=>{const _0x5d95e0=_0x47679c;if(!SceneManager[_0x5d95e0(0x75d)]())return;VisuMZ[_0x5d95e0(0x91f)](_0x14104a,_0x14104a),SceneManager[_0x5d95e0(0x56c)][_0x5d95e0(0x44c)](_0x14104a[_0x5d95e0(0x68d)]);}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x946),_0x3e3387=>{const _0x543f61=_0x47679c;if(!SceneManager[_0x543f61(0x75d)]())return;const _0x397182=$gameTemp[_0x543f61(0x47a)]();_0x397182[_0x543f61(0x851)](_0x543f61(0x4a9));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x224),_0x3a4d8b=>{const _0x5740c8=_0x47679c;if(!SceneManager[_0x5740c8(0x75d)]())return;const _0x2a42c4=$gameTemp[_0x5740c8(0x47a)](),_0x3bafaf=BattleManager[_0x5740c8(0x269)];_0x3bafaf[_0x5740c8(0x70e)](),_0x2a42c4['setWaitMode'](_0x5740c8(0x4a9));}),PluginManager['registerCommand'](pluginData['name'],_0x47679c(0x82b),_0x2ef5b5=>{const _0x397b70=_0x47679c;if(!SceneManager[_0x397b70(0x75d)]())return;if(!Imported[_0x397b70(0x94c)])return;VisuMZ[_0x397b70(0x91f)](_0x2ef5b5,_0x2ef5b5);const _0x4aef74=$gameScreen[_0x397b70(0x4a3)]();_0x4aef74[_0x397b70(0x704)]=_0x2ef5b5[_0x397b70(0x7cb)];}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x71e),_0x13a010=>{const _0x5b55da=_0x47679c;if(!SceneManager[_0x5b55da(0x75d)]())return;if(!Imported[_0x5b55da(0x94c)])return;VisuMZ[_0x5b55da(0x91f)](_0x13a010,_0x13a010);const _0x102880=$gameTemp[_0x5b55da(0x47a)](),_0x5e81aa=_0x13a010[_0x5b55da(0x512)];$gameScreen[_0x5b55da(0x3a3)](_0x13a010[_0x5b55da(0x8ac)],_0x13a010[_0x5b55da(0x908)],_0x13a010[_0x5b55da(0x94f)],_0x13a010[_0x5b55da(0x3f5)]);if(_0x5e81aa)_0x102880[_0x5b55da(0x851)](_0x5b55da(0x333));}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x8ea),_0x31edd5=>{const _0x286ba8=_0x47679c;if(!SceneManager[_0x286ba8(0x75d)]())return;if(!Imported[_0x286ba8(0x94c)])return;VisuMZ[_0x286ba8(0x91f)](_0x31edd5,_0x31edd5);const _0x5eab35=$gameTemp['getLastPluginCommandInterpreter'](),_0x409c39=VisuMZ[_0x286ba8(0x889)](_0x31edd5[_0x286ba8(0x714)]),_0x2bfe1d=_0x31edd5['WaitForCamera'];$gameScreen[_0x286ba8(0x40b)](_0x409c39,_0x31edd5['Duration'],_0x31edd5[_0x286ba8(0x3f5)]);if(_0x2bfe1d)_0x5eab35[_0x286ba8(0x851)](_0x286ba8(0x333));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x52c),_0x57e2ee=>{const _0x2e3cd7=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2e3cd7(0x94c)])return;VisuMZ[_0x2e3cd7(0x91f)](_0x57e2ee,_0x57e2ee);const _0x222d1b=$gameTemp[_0x2e3cd7(0x47a)](),_0x1039e1=_0x57e2ee[_0x2e3cd7(0x512)];$gameScreen[_0x2e3cd7(0x30c)](_0x57e2ee[_0x2e3cd7(0x49c)],_0x57e2ee['OffsetY'],_0x57e2ee['Duration'],_0x57e2ee[_0x2e3cd7(0x3f5)]);if(_0x1039e1)_0x222d1b[_0x2e3cd7(0x851)](_0x2e3cd7(0x333));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x75c),_0x207964=>{const _0x2890e1=_0x47679c;if(!SceneManager[_0x2890e1(0x75d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2890e1(0x91f)](_0x207964,_0x207964);const _0x382116=$gameTemp[_0x2890e1(0x47a)](),_0x1936da=_0x207964[_0x2890e1(0x867)],_0x5459a8=_0x207964[_0x2890e1(0x807)],_0x3de07e=_0x207964[_0x2890e1(0x512)];if(_0x1936da){const _0x58b44a=Math['round'](Graphics[_0x2890e1(0x1ce)]/0x2),_0x5ed659=Math['round'](Graphics[_0x2890e1(0x170)]/0x2);$gameScreen[_0x2890e1(0x3a3)](_0x58b44a,_0x5ed659,_0x207964[_0x2890e1(0x94f)],_0x207964[_0x2890e1(0x3f5)]);}_0x5459a8&&$gameScreen[_0x2890e1(0x30c)](0x0,0x0,_0x207964[_0x2890e1(0x94f)],_0x207964[_0x2890e1(0x3f5)]);if(_0x3de07e)_0x382116[_0x2890e1(0x851)](_0x2890e1(0x333));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x90a),_0x46fabc=>{const _0x5a0f0b=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5a0f0b(0x94c)])return;const _0x101c92=$gameTemp[_0x5a0f0b(0x47a)]();if(!_0x101c92)return;_0x101c92['setWaitMode']('battleCamera');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_DB_DragonbonesMotionAni',_0x13d72b=>{const _0x47078c=_0x47679c;if(!SceneManager[_0x47078c(0x75d)]())return;if(!Imported[_0x47078c(0x3e4)])return;VisuMZ['ConvertParams'](_0x13d72b,_0x13d72b);const _0x31bbd5=VisuMZ[_0x47078c(0x889)](_0x13d72b[_0x47078c(0x714)]),_0xfe795f=_0x13d72b[_0x47078c(0x13f)]['toLowerCase']()[_0x47078c(0x616)]();for(const _0x167f7a of _0x31bbd5){if(!_0x167f7a)continue;_0x167f7a[_0x47078c(0x2c6)](_0xfe795f);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x8f4),_0x1ea6d4=>{const _0x46b8f3=_0x47679c;if(!SceneManager[_0x46b8f3(0x75d)]())return;if(!Imported[_0x46b8f3(0x3e4)])return;VisuMZ[_0x46b8f3(0x91f)](_0x1ea6d4,_0x1ea6d4);const _0x3a4af6=VisuMZ[_0x46b8f3(0x889)](_0x1ea6d4['Targets']),_0x4a04d7=_0x1ea6d4[_0x46b8f3(0x679)];for(const _0x41c354 of _0x3a4af6){if(!_0x41c354)continue;_0x41c354[_0x46b8f3(0x810)]()[_0x46b8f3(0x484)]=_0x4a04d7;}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x635),_0x4b9410=>{const _0x33780a=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x33780a(0x91f)](_0x4b9410,_0x4b9410);const _0x24afdb=BattleManager[_0x33780a(0x4c7)],_0x10e407=_0x4b9410[_0x33780a(0x6fb)];if(!_0x24afdb)return;_0x24afdb[_0x33780a(0x89d)]=_0x10e407;}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x453),_0x33e6d9=>{const _0x3f4eda=_0x47679c;if(!SceneManager[_0x3f4eda(0x75d)]())return;if(!Imported[_0x3f4eda(0x185)])return;const _0x146d92=BattleManager[_0x3f4eda(0x4c7)];if(!_0x146d92)return;_0x146d92[_0x3f4eda(0x33b)]();}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x5be),_0x4394bd=>{const _0x4c5d5a=_0x47679c;if(!SceneManager[_0x4c5d5a(0x75d)]())return;if(!Imported[_0x4c5d5a(0x185)])return;VisuMZ[_0x4c5d5a(0x91f)](_0x4394bd,_0x4394bd);const _0x5799ce=BattleManager['_action'],_0x532187=_0x4394bd['Elements'];if(!_0x5799ce)return;_0x5799ce[_0x4c5d5a(0x5c9)]=_0x532187;}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Element_NullElements',_0x4cf730=>{const _0x628432=_0x47679c;if(!SceneManager[_0x628432(0x75d)]())return;if(!Imported[_0x628432(0x185)])return;const _0x48c062=BattleManager['_action'];if(!_0x48c062)return;_0x48c062[_0x628432(0x33f)]=!![];}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Horror_Clear',_0xc0d5f6=>{const _0x1ffe2b=_0x47679c;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x1ffe2b(0x75d)]())return;VisuMZ[_0x1ffe2b(0x91f)](_0xc0d5f6,_0xc0d5f6);const _0x3907e3=VisuMZ['CreateActionSequenceTargets'](_0xc0d5f6[_0x1ffe2b(0x714)]);for(const _0x4f123d of _0x3907e3){if(!_0x4f123d)continue;_0x4f123d[_0x1ffe2b(0x33d)]('noise'),_0x4f123d[_0x1ffe2b(0x33d)](_0x1ffe2b(0x52f)),_0x4f123d[_0x1ffe2b(0x33d)]('tv'),_0x4f123d[_0x1ffe2b(0x133)]();}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x47679c(0x260),_0x24dfe3=>{const _0x22ef64=_0x47679c;if(!Imported[_0x22ef64(0x5b7)])return;if(!SceneManager[_0x22ef64(0x75d)]())return;VisuMZ['ConvertParams'](_0x24dfe3,_0x24dfe3);const _0x1455fe=VisuMZ[_0x22ef64(0x889)](_0x24dfe3[_0x22ef64(0x714)]),_0x519831=_0x22ef64(0x52f);_0x24dfe3['sliceMin']=Math[_0x22ef64(0x802)](_0x24dfe3[_0x22ef64(0x1ef)]/0x2),_0x24dfe3[_0x22ef64(0x65a)]=_0x24dfe3[_0x22ef64(0x1ef)],_0x24dfe3[_0x22ef64(0x480)]=!![];for(const _0x29cfd2 of _0x1455fe){if(!_0x29cfd2)continue;_0x29cfd2['setHorrorEffectSettings'](_0x519831,_0x24dfe3);}$gamePlayer['refresh']();}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Horror_GlitchRemove',_0x5a2ca4=>{const _0x1a2471=_0x47679c;if(!Imported[_0x1a2471(0x5b7)])return;if(!SceneManager[_0x1a2471(0x75d)]())return;VisuMZ[_0x1a2471(0x91f)](_0x5a2ca4,_0x5a2ca4);const _0x181453=VisuMZ[_0x1a2471(0x889)](_0x5a2ca4[_0x1a2471(0x714)]);for(const _0x269e2b of _0x181453){if(!_0x269e2b)continue;_0x269e2b[_0x1a2471(0x33d)](_0x1a2471(0x52f));}$gamePlayer[_0x1a2471(0x29b)]();}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Horror_NoiseCreate',_0x369235=>{const _0x5526f2=_0x47679c;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5526f2(0x91f)](_0x369235,_0x369235);const _0x22e49e=VisuMZ[_0x5526f2(0x889)](_0x369235[_0x5526f2(0x714)]),_0x47cdac=_0x5526f2(0x45c);for(const _0x1a1a84 of _0x22e49e){if(!_0x1a1a84)continue;_0x1a1a84[_0x5526f2(0x764)](_0x47cdac,_0x369235);}$gamePlayer[_0x5526f2(0x29b)]();}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x6a5),_0x20fe4d=>{const _0x17dc18=_0x47679c;if(!Imported[_0x17dc18(0x5b7)])return;if(!SceneManager[_0x17dc18(0x75d)]())return;VisuMZ[_0x17dc18(0x91f)](_0x20fe4d,_0x20fe4d);const _0xeda815=VisuMZ['CreateActionSequenceTargets'](_0x20fe4d['Targets']);for(const _0x189158 of _0xeda815){if(!_0x189158)continue;_0x189158[_0x17dc18(0x33d)](_0x17dc18(0x45c));}$gamePlayer[_0x17dc18(0x29b)]();}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Horror_TVCreate',_0x4a395a=>{const _0x42f5b5=_0x47679c;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4a395a,_0x4a395a);const _0x4abce5=VisuMZ[_0x42f5b5(0x889)](_0x4a395a['Targets']),_0x4427ce='tv';for(const _0x32b39a of _0x4abce5){if(!_0x32b39a)continue;_0x32b39a[_0x42f5b5(0x764)](_0x4427ce,_0x4a395a);}$gamePlayer[_0x42f5b5(0x29b)]();}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x120),_0x5571e2=>{const _0x5df23c=_0x47679c;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5df23c(0x91f)](_0x5571e2,_0x5571e2);const _0xa1c07f=VisuMZ[_0x5df23c(0x889)](_0x5571e2['Targets']);for(const _0x9e0327 of _0xa1c07f){if(!_0x9e0327)continue;_0x9e0327[_0x5df23c(0x33d)]('tv');}$gamePlayer[_0x5df23c(0x29b)]();}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Impact_ColorBreak',_0x5d59d3=>{const _0x8e3c22=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x3f293f=SceneManager['_scene']['_spriteset'];if(!_0x3f293f)return;VisuMZ[_0x8e3c22(0x91f)](_0x5d59d3,_0x5d59d3);const _0x2b4014=_0x5d59d3['Intensity']||0x1,_0x577047=_0x5d59d3['Duration']||0x1,_0x4e8df1=_0x5d59d3['EasingType']||_0x8e3c22(0x49d);_0x3f293f['setupRgbSplitImpactFilter'](_0x2b4014,_0x577047,_0x4e8df1);}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x2cf),_0x1fec28=>{const _0x5edc69=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x1e838f=SceneManager['_scene']['_spriteset'];if(!_0x1e838f)return;VisuMZ[_0x5edc69(0x91f)](_0x1fec28,_0x1fec28);const _0x510974=Number(_0x1fec28[_0x5edc69(0x814)])||0x0,_0x403055=Number(_0x1fec28[_0x5edc69(0x245)]),_0x1f53c9=_0x1fec28['Duration']||0x1,_0x32eec1=_0x1fec28['EasingType']||_0x5edc69(0x49d);_0x1e838f[_0x5edc69(0x220)](_0x510974,_0x403055,_0x1f53c9,_0x32eec1);}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x28a),_0x2f0622=>{const _0x493091=_0x47679c;if(!SceneManager[_0x493091(0x75d)]())return;if(!Imported[_0x493091(0x84b)])return;const _0x19d82f=SceneManager[_0x493091(0x56c)]['_spriteset'];if(!_0x19d82f)return;VisuMZ[_0x493091(0x91f)](_0x2f0622,_0x2f0622);const _0x2695eb=Number(_0x2f0622[_0x493091(0x814)])||0x0,_0x5eaaeb=Number(_0x2f0622['Rate']),_0x5bfb9f=_0x2f0622[_0x493091(0x94f)]||0x1,_0xf13ba0=_0x2f0622[_0x493091(0x3f5)]||_0x493091(0x49d),_0x4e8cd5=VisuMZ[_0x493091(0x889)](_0x2f0622[_0x493091(0x714)]);for(const _0x366562 of _0x4e8cd5){if(!_0x366562)continue;if(!_0x366562[_0x493091(0x828)]())continue;_0x366562[_0x493091(0x828)]()[_0x493091(0x220)](_0x2695eb,_0x5eaaeb,_0x5bfb9f,_0xf13ba0);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x66d),_0x786ade=>{const _0xc5d6b5=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0xc5d6b5(0x84b)])return;VisuMZ[_0xc5d6b5(0x91f)](_0x786ade,_0x786ade);const _0x449216={'delay':_0x786ade[_0xc5d6b5(0x164)],'duration':_0x786ade[_0xc5d6b5(0x435)],'hue':_0x786ade['hue'],'opacityStart':_0x786ade['opacityStart'],'tone':_0x786ade['tone'],'visible':!![]},_0x368f88=VisuMZ[_0xc5d6b5(0x889)](_0x786ade[_0xc5d6b5(0x714)]);for(const _0x2c9e4a of _0x368f88){if(!_0x2c9e4a)continue;_0x2c9e4a['setBattlerMotionTrailData'](_0x449216);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x719),_0x2929c7=>{const _0x4bd672=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4bd672(0x84b)])return;VisuMZ[_0x4bd672(0x91f)](_0x2929c7,_0x2929c7);const _0x18eae7=VisuMZ[_0x4bd672(0x889)](_0x2929c7[_0x4bd672(0x714)]);for(const _0x346677 of _0x18eae7){if(!_0x346677)continue;_0x346677['clearBattlerMotionTrailData']();}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x247),_0x5cb050=>{const _0x3844a2=_0x47679c;if(!Imported[_0x3844a2(0x84b)])return;const _0x5bfc56=SceneManager[_0x3844a2(0x56c)]['_spriteset'];if(!_0x5bfc56)return;VisuMZ[_0x3844a2(0x91f)](_0x5cb050,_0x5cb050);const _0xe473d7=_0x5cb050['X']||0x0,_0x5b51df=_0x5cb050['Y']||0x0,_0xcb0ac6=_0x5cb050[_0x3844a2(0x84c)]||0x0,_0x2988c6=_0x5cb050[_0x3844a2(0x799)]||0x0,_0x33121f=_0x5cb050[_0x3844a2(0x94f)]||0x1;_0x5bfc56['setupShockwaveImpactFilter'](_0xe473d7,_0x5b51df,_0xcb0ac6,_0x2988c6,_0x33121f);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x39f),_0x4be331=>{const _0x33f7c6=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2aff65=SceneManager['_scene'][_0x33f7c6(0x610)];if(!_0x2aff65)return;VisuMZ[_0x33f7c6(0x91f)](_0x4be331,_0x4be331);const _0x43467d=VisuMZ[_0x33f7c6(0x889)](_0x4be331[_0x33f7c6(0x714)]),_0x45e3a2=_0x4be331[_0x33f7c6(0x439)],_0x3b065c=_0x4be331[_0x33f7c6(0x49c)]||0x0,_0x4bfa68=_0x4be331[_0x33f7c6(0x428)]||0x0,_0x2df9d6=_0x4be331[_0x33f7c6(0x84c)]||0x0,_0x880021=_0x4be331[_0x33f7c6(0x799)]||0x0,_0x32e74a=_0x4be331[_0x33f7c6(0x94f)]||0x1;for(const _0x1e9615 of _0x43467d){if(!_0x1e9615)continue;if(!_0x1e9615[_0x33f7c6(0x828)]())continue;const _0x421bf0=_0x1e9615[_0x33f7c6(0x828)]();let _0xc161f9=_0x421bf0[_0x33f7c6(0x854)],_0x13c572=_0x421bf0[_0x33f7c6(0x4b2)];_0xc161f9+=(Graphics[_0x33f7c6(0x1ce)]-Graphics[_0x33f7c6(0x75b)])/0x2,_0x13c572+=(Graphics[_0x33f7c6(0x170)]-Graphics[_0x33f7c6(0x113)])/0x2;if(_0x45e3a2[_0x33f7c6(0x503)](/front/i))_0xc161f9+=(_0x1e9615[_0x33f7c6(0x415)]()?0x1:-0x1)*_0x421bf0[_0x33f7c6(0x4e3)]()/0x2;else _0x45e3a2[_0x33f7c6(0x503)](/back/i)&&(_0xc161f9+=(_0x1e9615[_0x33f7c6(0x415)]()?-0x1:0x1)*_0x421bf0[_0x33f7c6(0x4e3)]()/0x2);if(_0x45e3a2['match'](/head/i))_0x13c572-=_0x421bf0[_0x33f7c6(0x8f8)]();else _0x45e3a2[_0x33f7c6(0x503)](/center/i)&&(_0x13c572-=_0x421bf0[_0x33f7c6(0x8f8)]()/0x2);_0xc161f9+=_0x3b065c,_0x13c572+=_0x4bfa68,_0x2aff65['setupShockwaveImpactFilter'](_0xc161f9,_0x13c572,_0x2df9d6,_0x880021,_0x32e74a);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x4fd),_0x5c0431=>{const _0x282460=_0x47679c;if(!SceneManager[_0x282460(0x75d)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x38ac8d=SceneManager[_0x282460(0x56c)]['_spriteset'];if(!_0x38ac8d)return;VisuMZ['ConvertParams'](_0x5c0431,_0x5c0431);const _0x30b853=VisuMZ[_0x282460(0x889)](_0x5c0431['Targets']),_0x540994=_0x5c0431[_0x282460(0x439)],_0x28a0d9=_0x5c0431['OffsetX']||0x0,_0x1e6756=_0x5c0431['OffsetY']||0x0,_0x26b341=_0x5c0431[_0x282460(0x84c)]||0x0,_0x1d0cae=_0x5c0431[_0x282460(0x799)]||0x0,_0x5bab92=_0x5c0431['Duration']||0x1,_0x5503c9=Math[_0x282460(0x905)](..._0x30b853[_0x282460(0x261)](_0x490638=>_0x490638[_0x282460(0x828)]()['_baseX']-_0x490638[_0x282460(0x828)]()[_0x282460(0x4e3)]()/0x2)),_0x470cc7=Math[_0x282460(0x766)](..._0x30b853['map'](_0x3de79e=>_0x3de79e[_0x282460(0x828)]()[_0x282460(0x854)]+_0x3de79e[_0x282460(0x828)]()[_0x282460(0x4e3)]()/0x2)),_0x3d26cf=Math[_0x282460(0x905)](..._0x30b853[_0x282460(0x261)](_0x15671d=>_0x15671d['battler']()[_0x282460(0x4b2)]-_0x15671d[_0x282460(0x828)]()[_0x282460(0x8f8)]())),_0x224256=Math['max'](..._0x30b853[_0x282460(0x261)](_0x3467e6=>_0x3467e6[_0x282460(0x828)]()[_0x282460(0x4b2)])),_0x4f0dbb=_0x30b853[_0x282460(0x36c)](_0x150392=>_0x150392[_0x282460(0xf2)]())[_0x282460(0x42d)],_0x34e515=_0x30b853[_0x282460(0x36c)](_0x46b5a5=>_0x46b5a5[_0x282460(0x415)]())[_0x282460(0x42d)];let _0x59ab84=0x0,_0x376bdc=0x0;if(_0x540994['match'](/front/i))_0x59ab84=_0x4f0dbb>=_0x34e515?_0x5503c9:_0x470cc7;else{if(_0x540994['match'](/middle/i))_0x59ab84=(_0x5503c9+_0x470cc7)/0x2,melee=-0x1;else _0x540994[_0x282460(0x503)](/back/i)&&(_0x59ab84=_0x4f0dbb>=_0x34e515?_0x470cc7:_0x5503c9);}if(_0x540994[_0x282460(0x503)](/head/i))_0x376bdc=_0x3d26cf;else{if(_0x540994[_0x282460(0x503)](/center/i))_0x376bdc=(_0x3d26cf+_0x224256)/0x2;else _0x540994[_0x282460(0x503)](/base/i)&&(_0x376bdc=_0x224256);}_0x59ab84+=(Graphics['width']-Graphics['boxWidth'])/0x2,_0x376bdc+=(Graphics['height']-Graphics[_0x282460(0x113)])/0x2,_0x59ab84+=_0x28a0d9,_0x376bdc+=_0x1e6756,_0x38ac8d['setupShockwaveImpactFilter'](_0x59ab84,_0x376bdc,_0x26b341,_0x1d0cae,_0x5bab92);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x7de),_0x19b04c=>{const _0x126ad0=_0x47679c;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2fbc6b=SceneManager[_0x126ad0(0x56c)][_0x126ad0(0x610)];if(!_0x2fbc6b)return;VisuMZ[_0x126ad0(0x91f)](_0x19b04c,_0x19b04c);const _0x1bb0d1=_0x19b04c['X']||0x0,_0x1ddf1b=_0x19b04c['Y']||0x0,_0x27a25f=_0x19b04c[_0x126ad0(0x8aa)]||0x0,_0x532d6d=_0x19b04c['Radius']||0x0,_0x1f3be3=_0x19b04c[_0x126ad0(0x94f)]||0x1,_0x5f5b2b=_0x19b04c[_0x126ad0(0x3f5)]||'Linear';_0x2fbc6b['setupZoomBlurImpactFilter'](_0x27a25f,_0x1bb0d1,_0x1ddf1b,_0x532d6d,_0x1f3be3,_0x5f5b2b);}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x327),_0x227161=>{const _0x5d7350=_0x47679c;if(!Imported[_0x5d7350(0x84b)])return;const _0xa1a444=SceneManager[_0x5d7350(0x56c)]['_spriteset'];if(!_0xa1a444)return;VisuMZ[_0x5d7350(0x91f)](_0x227161,_0x227161);const _0x25d0eb=VisuMZ[_0x5d7350(0x889)](_0x227161[_0x5d7350(0x714)]),_0x526d85=_0x227161[_0x5d7350(0x439)],_0x1adbe8=_0x227161['OffsetX']||0x0,_0x5b1a77=_0x227161['OffsetY']||0x0,_0x38d058=_0x227161[_0x5d7350(0x8aa)]||0x0,_0x4e250f=_0x227161[_0x5d7350(0x611)]||0x0,_0x4a14ea=_0x227161[_0x5d7350(0x94f)]||0x1,_0x390617=_0x227161[_0x5d7350(0x3f5)]||'Linear',_0x583b2f=Math['min'](..._0x25d0eb[_0x5d7350(0x261)](_0x11e85e=>_0x11e85e[_0x5d7350(0x828)]()['_baseX']-_0x11e85e[_0x5d7350(0x828)]()[_0x5d7350(0x4e3)]()/0x2)),_0x369f96=Math[_0x5d7350(0x766)](..._0x25d0eb[_0x5d7350(0x261)](_0x162803=>_0x162803['battler']()[_0x5d7350(0x854)]+_0x162803['battler']()[_0x5d7350(0x4e3)]()/0x2)),_0x5caff7=Math[_0x5d7350(0x905)](..._0x25d0eb['map'](_0x2047d3=>_0x2047d3[_0x5d7350(0x828)]()[_0x5d7350(0x4b2)]-_0x2047d3[_0x5d7350(0x828)]()['mainSpriteHeight']())),_0xfadfc2=Math['max'](..._0x25d0eb[_0x5d7350(0x261)](_0x3b8939=>_0x3b8939[_0x5d7350(0x828)]()[_0x5d7350(0x4b2)])),_0x543c3e=_0x25d0eb['filter'](_0x347c37=>_0x347c37[_0x5d7350(0xf2)]())['length'],_0x2ce1da=_0x25d0eb[_0x5d7350(0x36c)](_0x34e9e1=>_0x34e9e1['isEnemy']())[_0x5d7350(0x42d)];let _0x2232ea=0x0,_0x1d000a=0x0;if(_0x526d85['match'](/front/i))_0x2232ea=_0x543c3e>=_0x2ce1da?_0x583b2f:_0x369f96;else{if(_0x526d85[_0x5d7350(0x503)](/middle/i))_0x2232ea=(_0x583b2f+_0x369f96)/0x2,melee=-0x1;else _0x526d85['match'](/back/i)&&(_0x2232ea=_0x543c3e>=_0x2ce1da?_0x369f96:_0x583b2f);}if(_0x526d85['match'](/head/i))_0x1d000a=_0x5caff7;else{if(_0x526d85[_0x5d7350(0x503)](/center/i))_0x1d000a=(_0x5caff7+_0xfadfc2)/0x2;else _0x526d85[_0x5d7350(0x503)](/base/i)&&(_0x1d000a=_0xfadfc2);}_0x2232ea+=(Graphics[_0x5d7350(0x1ce)]-Graphics[_0x5d7350(0x75b)])/0x2,_0x1d000a+=(Graphics[_0x5d7350(0x170)]-Graphics[_0x5d7350(0x113)])/0x2,_0x2232ea+=_0x1adbe8,_0x1d000a+=_0x5b1a77,_0xa1a444[_0x5d7350(0x93b)](_0x38d058,_0x2232ea,_0x1d000a,_0x4e250f,_0x4a14ea,_0x390617);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x842),_0x1b7144=>{const _0x176c4e=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x176c4e(0x91f)](_0x1b7144,_0x1b7144);const _0x431798=$gameTemp[_0x176c4e(0x47a)](),_0x2a3f8b=BattleManager['_action'],_0x4117ff=BattleManager[_0x176c4e(0x8f5)],_0x20a82d=BattleManager[_0x176c4e(0x269)];if(!_0x431798||!_0x2a3f8b||!_0x4117ff)return;if(!_0x2a3f8b[_0x176c4e(0x88b)]())return;const _0x13852c=VisuMZ[_0x176c4e(0x889)](_0x1b7144[_0x176c4e(0x714)]);for(const _0x51d018 of _0x13852c){if(!_0x51d018)continue;_0x20a82d[_0x176c4e(0x6b4)](_0x176c4e(0x5cd),_0x4117ff,_0x51d018);}_0x431798[_0x176c4e(0x851)](_0x176c4e(0x4a9));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x355),_0x447d93=>{const _0x2af24f=_0x47679c;if(!SceneManager[_0x2af24f(0x75d)]())return;VisuMZ['ConvertParams'](_0x447d93,_0x447d93);const _0x37e609=[_0x2af24f(0x2ce),_0x2af24f(0x691),_0x2af24f(0x21c),_0x2af24f(0x8c4),_0x2af24f(0x367),'MDF','AGI',_0x2af24f(0x132)],_0x55f227=_0x447d93[_0x2af24f(0x7d8)],_0x43e905=_0x447d93[_0x2af24f(0x455)],_0x4548e1=_0x447d93[_0x2af24f(0x52a)],_0x396f85=VisuMZ[_0x2af24f(0x889)](_0x447d93[_0x2af24f(0x714)]);for(const _0x291de3 of _0x396f85){if(!_0x291de3)continue;for(const _0x28cadf of _0x55f227){const _0x526a32=_0x37e609['indexOf'](_0x28cadf[_0x2af24f(0x1d3)]()[_0x2af24f(0x616)]());_0x526a32>=0x0&&_0x526a32<=0x7&&_0x291de3[_0x2af24f(0x5fb)](_0x526a32,_0x4548e1);}for(const _0xce37dd of _0x43e905){const _0x43d88f=_0x37e609[_0x2af24f(0x2b9)](_0xce37dd[_0x2af24f(0x1d3)]()[_0x2af24f(0x616)]());_0x43d88f>=0x0&&_0x43d88f<=0x7&&_0x291de3[_0x2af24f(0x1df)](_0x43d88f,_0x4548e1);}}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],'ActSeq_Mechanics_AddState',_0x1343f4=>{const _0x313e98=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x313e98(0x91f)](_0x1343f4,_0x1343f4);const _0x391cf4=_0x1343f4['States'],_0x58c473=VisuMZ['CreateActionSequenceTargets'](_0x1343f4[_0x313e98(0x714)]);for(const _0x2ec95f of _0x58c473){if(!_0x2ec95f)continue;for(const _0x29ba19 of _0x391cf4){_0x2ec95f[_0x313e98(0x443)](_0x29ba19);}}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x27e),_0x5487e7=>{const _0x32fff7=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x5487e7,_0x5487e7);const _0x500427=BattleManager[_0x32fff7(0x4c7)],_0x2469e0={'arPenRate':_0x5487e7[_0x32fff7(0x230)],'arPenFlat':_0x5487e7[_0x32fff7(0x55d)],'arRedRate':_0x5487e7[_0x32fff7(0x647)],'arRedFlat':_0x5487e7[_0x32fff7(0x2ae)]};_0x500427[_0x32fff7(0x34a)]=_0x2469e0;}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_AnalyzeWeakness',_0x3a1437=>{const _0xf3f7c=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ['ConvertParams'](_0x3a1437,_0x3a1437);const _0x4a5e0c=VisuMZ[_0xf3f7c(0x889)](_0x3a1437['Targets']),_0x1f7a69=_0x3a1437[_0xf3f7c(0x653)]||0x1;for(const _0x313551 of _0x4a5e0c){if(!_0x313551)continue;if(!_0x313551[_0xf3f7c(0x415)]())continue;_0x313551[_0xf3f7c(0x6fe)](_0x1f7a69);}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x203),_0x1bc633=>{const _0xcb4e82=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0xcb4e82(0x7c7)]())return;VisuMZ['ConvertParams'](_0x1bc633,_0x1bc633);const _0x3f6608=VisuMZ[_0xcb4e82(0x889)](_0x1bc633[_0xcb4e82(0x714)]),_0xcd0d0c=_0x1bc633[_0xcb4e82(0x3ed)],_0x12f589=_0x1bc633['ChargeRate'],_0x1a4963=_0x1bc633[_0xcb4e82(0x2fb)];for(const _0x46c901 of _0x3f6608){if(!_0x46c901)continue;if(_0x46c901[_0xcb4e82(0x40a)]())_0x46c901[_0xcb4e82(0x404)](_0xcd0d0c);else{if(_0x46c901[_0xcb4e82(0x5c6)]()){_0x46c901[_0xcb4e82(0x780)](_0x12f589);if(_0x1a4963)_0x46c901['atbInterrupt']();}}}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x8c2),_0x3bf6e3=>{const _0x1fc0ab=_0x47679c;if(!SceneManager[_0x1fc0ab(0x75d)]())return;if(!Imported[_0x1fc0ab(0x459)])return;VisuMZ[_0x1fc0ab(0x91f)](_0x3bf6e3,_0x3bf6e3);const _0x5b14c2=VisuMZ[_0x1fc0ab(0x889)](_0x3bf6e3['Targets']),_0x13319e=_0x3bf6e3['BoostPoints'];for(const _0x2efe07 of _0x5b14c2){if(!_0x2efe07)continue;_0x2efe07[_0x1fc0ab(0x3df)](_0x13319e);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_BoostPointsStoreData',_0x5c418d=>{const _0x1347e3=_0x47679c;if(!SceneManager[_0x1347e3(0x75d)]())return;if(!Imported[_0x1347e3(0x459)])return;if(!BattleManager[_0x1347e3(0x8f5)])return;VisuMZ[_0x1347e3(0x91f)](_0x5c418d,_0x5c418d);const _0x41faaa=_0x5c418d[_0x1347e3(0x461)];$gameVariables[_0x1347e3(0x1c9)](_0x41faaa,BattleManager[_0x1347e3(0x8f5)][_0x1347e3(0x569)]());}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x904),_0x5762b7=>{const _0x4d2980=_0x47679c;if(!SceneManager[_0x4d2980(0x75d)]())return;if(!Imported[_0x4d2980(0x594)])return;VisuMZ[_0x4d2980(0x91f)](_0x5762b7,_0x5762b7);const _0x4b9fca=VisuMZ['CreateActionSequenceTargets'](_0x5762b7[_0x4d2980(0x714)]),_0x29bff9=_0x5762b7[_0x4d2980(0x2d0)];for(const _0x525543 of _0x4b9fca){if(!_0x525543)continue;if(_0x525543['isBreakStunned']())continue;if(!_0x525543[_0x4d2980(0x139)]())continue;_0x525543['alterBreakShield'](_0x29bff9);}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x7db),_0x58b52a=>{const _0x4487d7=_0x47679c;if(!SceneManager[_0x4487d7(0x75d)]())return;if(!Imported[_0x4487d7(0x594)])return;VisuMZ[_0x4487d7(0x91f)](_0x58b52a,_0x58b52a);const _0x31f6bc=VisuMZ[_0x4487d7(0x889)](_0x58b52a[_0x4487d7(0x714)]);for(const _0x114eb8 of _0x31f6bc){if(!_0x114eb8)continue;if(_0x114eb8[_0x4487d7(0x6da)]())continue;if(!_0x114eb8['isAffectedByBreakShield']())continue;_0x114eb8['resetBreakShield']();}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_BtbGain',_0x150a90=>{const _0x1335c1=_0x47679c;if(!SceneManager[_0x1335c1(0x75d)]())return;if(!Imported['VisuMZ_2_BattleSystemBTB'])return;if(!BattleManager[_0x1335c1(0x4d6)]())return;VisuMZ[_0x1335c1(0x91f)](_0x150a90,_0x150a90);const _0x41a469=VisuMZ['CreateActionSequenceTargets'](_0x150a90[_0x1335c1(0x714)]),_0xdb8106=_0x150a90[_0x1335c1(0x7f6)];for(const _0x21b02c of _0x41a469){if(!_0x21b02c)continue;_0x21b02c['gainBravePoints'](_0xdb8106);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_Collapse',_0x2538e5=>{const _0x174736=_0x47679c;if(!SceneManager[_0x174736(0x75d)]())return;VisuMZ['ConvertParams'](_0x2538e5,_0x2538e5);const _0x5d5daf=$gameTemp['getLastPluginCommandInterpreter'](),_0x564947=BattleManager[_0x174736(0x4c7)],_0x2d58a6=BattleManager[_0x174736(0x8f5)];if(!_0x5d5daf||!_0x564947||!_0x2d58a6)return;if(!_0x564947['item']())return;const _0x2ae2d5=VisuMZ[_0x174736(0x889)](_0x2538e5['Targets']);for(const _0x3ec7c7 of _0x2ae2d5){if(!_0x3ec7c7)continue;_0x2538e5[_0x174736(0x880)]&&(_0x3ec7c7[_0x174736(0xe1)](),_0x3ec7c7[_0x174736(0x443)](_0x3ec7c7[_0x174736(0x201)]())),_0x3ec7c7['isDeathStateAffected']()&&_0x3ec7c7[_0x174736(0x5f0)]();}_0x5d5daf[_0x174736(0x851)](_0x174736(0x45f));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_CtbOrder',_0x507dcc=>{const _0x21528b=_0x47679c;if(!SceneManager[_0x21528b(0x75d)]())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager[_0x21528b(0x5af)]())return;VisuMZ[_0x21528b(0x91f)](_0x507dcc,_0x507dcc);const _0x4f18e2=VisuMZ[_0x21528b(0x889)](_0x507dcc[_0x21528b(0x714)]),_0x165c01=_0x507dcc[_0x21528b(0x29d)];for(const _0x304e32 of _0x4f18e2){if(!_0x304e32)continue;_0x304e32[_0x21528b(0x59e)](_0x165c01);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x44a),_0xc82a2e=>{const _0x59aaf6=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_2_BattleSystemCTB'])return;if(!BattleManager['isCTB']())return;VisuMZ[_0x59aaf6(0x91f)](_0xc82a2e,_0xc82a2e);const _0x57cfde=VisuMZ[_0x59aaf6(0x889)](_0xc82a2e['Targets']),_0x2502d7=_0xc82a2e['ChargeRate'],_0x4452ea=_0xc82a2e[_0x59aaf6(0x3ed)];for(const _0x48df38 of _0x57cfde){if(!_0x48df38)continue;if(_0x48df38[_0x59aaf6(0x1f0)]===_0x59aaf6(0x15c))_0x48df38[_0x59aaf6(0x34f)](_0x2502d7);else _0x48df38[_0x59aaf6(0x1f0)]===_0x59aaf6(0x5b5)&&_0x48df38['changeCtbCastTime'](_0x4452ea);}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_CustomDmgFormula',_0xc15309=>{const _0x52ee88=_0x47679c;if(!SceneManager[_0x52ee88(0x75d)]())return;VisuMZ[_0x52ee88(0x91f)](_0xc15309,_0xc15309);const _0xc7551e=BattleManager[_0x52ee88(0x4c7)];if(!_0xc7551e)return;let _0x394e8b=_0xc15309[_0x52ee88(0x778)];_0xc7551e[_0x52ee88(0x16a)](_0x394e8b);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_DamagePopup',_0x2e5136=>{const _0x3a6a9d=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3a6a9d(0x91f)](_0x2e5136,_0x2e5136);const _0x52247f=VisuMZ[_0x3a6a9d(0x889)](_0x2e5136[_0x3a6a9d(0x714)]);for(const _0x256bfc of _0x52247f){if(!_0x256bfc)continue;if(_0x256bfc[_0x3a6a9d(0x88a)]())_0x256bfc['startDamagePopup']();}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x437),_0x99a524=>{const _0x2f1373=_0x47679c;if(!SceneManager[_0x2f1373(0x75d)]())return;VisuMZ[_0x2f1373(0x91f)](_0x99a524,_0x99a524);const _0x44528f=$gameTemp[_0x2f1373(0x47a)](),_0x399c9a=BattleManager[_0x2f1373(0x8f5)],_0x30fb92=_0x99a524[_0x2f1373(0x5a8)];if(!_0x44528f)return;if(!_0x399c9a)return;_0x399c9a&&_0x399c9a[_0x2f1373(0x40e)]()&&_0x30fb92[_0x2f1373(0x1d3)]()[_0x2f1373(0x616)]()!=='UNTITLED'&&_0x44528f[_0x2f1373(0x6c2)]([_0x30fb92]);}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x673),_0x1fb1a1=>{const _0x2f5253=_0x47679c;if(!SceneManager[_0x2f5253(0x75d)]())return;VisuMZ['ConvertParams'](_0x1fb1a1,_0x1fb1a1);const _0x4d560f=VisuMZ[_0x2f5253(0x889)](_0x1fb1a1[_0x2f5253(0x714)]);for(const _0x35bc9d of _0x4d560f){if(!_0x35bc9d)continue;if(!_0x35bc9d[_0x2f5253(0x415)]())continue;_0x35bc9d[_0x2f5253(0x2a7)]();}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_EtbAction',_0x29d493=>{const _0x81c38d=_0x47679c;if(!SceneManager[_0x81c38d(0x75d)]())return;if(!Imported['VisuMZ_2_BattleSystemETB'])return;if(!BattleManager[_0x81c38d(0x66a)]())return;VisuMZ[_0x81c38d(0x91f)](_0x29d493,_0x29d493);const _0x22b978=_0x29d493['ActionCount'];BattleManager['_subject']&&BattleManager['_subject'][_0x81c38d(0x36f)]()[_0x81c38d(0x506)](_0x22b978);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x7c5),_0xf1fa02=>{const _0x5a0ee6=_0x47679c;if(!SceneManager[_0x5a0ee6(0x75d)]())return;if(!Imported[_0x5a0ee6(0x359)])return;if(!BattleManager[_0x5a0ee6(0x555)]())return;VisuMZ[_0x5a0ee6(0x91f)](_0xf1fa02,_0xf1fa02);const _0x332071=_0xf1fa02[_0x5a0ee6(0x856)];BattleManager['_subject']&&BattleManager[_0x5a0ee6(0x8f5)][_0x5a0ee6(0x36f)]()['gainCurrentActionsFTB'](_0x332071);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x535),_0x3ea846=>{const _0x516b74=_0x47679c;if(!SceneManager[_0x516b74(0x75d)]())return;VisuMZ[_0x516b74(0x91f)](_0x3ea846,_0x3ea846);const _0xd0bdbb=VisuMZ[_0x516b74(0x889)](_0x3ea846[_0x516b74(0x714)]),_0x2a3d6b=_0x3ea846['HP_Rate'],_0x133fdd=_0x3ea846[_0x516b74(0x24d)],_0x420b8b=_0x3ea846[_0x516b74(0x81f)],_0x495743=_0x3ea846[_0x516b74(0x741)],_0x75cdad=_0x3ea846['TP_Rate'],_0x340574=_0x3ea846[_0x516b74(0x752)],_0xe3366d=_0x3ea846[_0x516b74(0x8d6)];for(const _0x2fc893 of _0xd0bdbb){if(!_0x2fc893)continue;const _0x2c9661=_0x2fc893[_0x516b74(0x8e8)](),_0x1a9417=Math[_0x516b74(0x23b)](_0x2a3d6b*_0x2fc893[_0x516b74(0x45d)]+_0x133fdd),_0x2b5cfd=Math[_0x516b74(0x23b)](_0x420b8b*_0x2fc893[_0x516b74(0x18d)]+_0x495743),_0x287813=Math[_0x516b74(0x23b)](_0x75cdad*_0x2fc893[_0x516b74(0x3e7)]()+_0x340574);if(_0x1a9417!==0x0)_0x2fc893[_0x516b74(0x41e)](_0x1a9417);if(_0x2b5cfd!==0x0)_0x2fc893[_0x516b74(0x5ef)](_0x2b5cfd);if(_0x287813!==0x0)_0x2fc893[_0x516b74(0x22a)](_0x287813);if(_0xe3366d)_0x2fc893[_0x516b74(0xe7)]();_0x2c9661&&_0x2fc893[_0x516b74(0x40e)]()&&_0x2fc893['performCollapse']();}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x275),_0x1cdc64=>{const _0x223657=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x223657(0x91f)](_0x1cdc64,_0x1cdc64);const _0xfa2c4e=VisuMZ['CreateActionSequenceTargets'](_0x1cdc64[_0x223657(0x714)]);for(const _0x4a7c65 of _0xfa2c4e){if(!_0x4a7c65)continue;_0x4a7c65[_0x223657(0x38f)](_0x1cdc64[_0x223657(0x776)]);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x5b0),_0x30fa4a=>{const _0x37fba5=_0x47679c;if(!SceneManager[_0x37fba5(0x75d)]())return;VisuMZ[_0x37fba5(0x91f)](_0x30fa4a,_0x30fa4a);const _0x4e5864=BattleManager[_0x37fba5(0x4c7)],_0x17cdc3={'criticalHitRate':_0x30fa4a[_0x37fba5(0x86c)],'criticalHitFlat':_0x30fa4a[_0x37fba5(0x447)],'criticalDmgRate':_0x30fa4a['CriticalDmgRate'],'criticalDmgFlat':_0x30fa4a[_0x37fba5(0x2ac)],'damageRate':_0x30fa4a[_0x37fba5(0x2d1)],'damageFlat':_0x30fa4a[_0x37fba5(0x131)],'hitRate':_0x30fa4a[_0x37fba5(0x5da)],'hitFlat':_0x30fa4a[_0x37fba5(0x3a9)]};_0x4e5864['_multipliers']=_0x17cdc3;}),PluginManager['registerCommand'](pluginData['name'],_0x47679c(0x732),_0x190d98=>{const _0x1882a3=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1882a3(0x91f)](_0x190d98,_0x190d98);const _0x827c93=_0x190d98[_0x1882a3(0x718)];SceneManager[_0x1882a3(0x56c)][_0x1882a3(0x1c7)](_0x827c93);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x4e2),_0x1cf8e0=>{const _0x39c2ea=_0x47679c;if(!SceneManager[_0x39c2ea(0x75d)]())return;if(!Imported[_0x39c2ea(0x603)])return;if(!BattleManager[_0x39c2ea(0x357)]())return;VisuMZ[_0x39c2ea(0x91f)](_0x1cf8e0,_0x1cf8e0);const _0x2c64a5=VisuMZ[_0x39c2ea(0x889)](_0x1cf8e0['Targets']);for(const _0x157dd8 of _0x2c64a5){if(!_0x157dd8)continue;let _0x5873ed=_0x1cf8e0[_0x39c2ea(0x21d)],_0xbe6627=_0x1cf8e0[_0x39c2ea(0x7f7)],_0xccb065=_0x1cf8e0['FollowTurn'];BattleManager['_actionBattlers'][_0x39c2ea(0x3f6)](_0x157dd8)?_0x5873ed+=_0xccb065:_0xbe6627+=_0xccb065,BattleManager[_0x39c2ea(0x81c)](_0x157dd8,-_0x5873ed,![]),BattleManager[_0x39c2ea(0x81c)](_0x157dd8,-_0xbe6627,!![]);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],'ActSeq_Mechanics_PtbAlterCost',_0x1578ed=>{const _0x2f450e=_0x47679c;if(!SceneManager[_0x2f450e(0x75d)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x2f450e(0x638)]())return;VisuMZ[_0x2f450e(0x91f)](_0x1578ed,_0x1578ed);const _0x5a0038=BattleManager['_subject'][_0x2f450e(0x36f)](),_0x379194=_0x1578ed[_0x2f450e(0x42b)],_0x331a6c=_0x1578ed[_0x2f450e(0x618)]||_0x2f450e(0x257),_0x9b6f8e=_0x1578ed[_0x2f450e(0x208)]||_0x2f450e(0x257),_0x121a22=_0x1578ed[_0x2f450e(0x7b4)]||0x0,_0xe70921=_0x1578ed[_0x2f450e(0x3b3)]||0x0;(_0x5a0038[_0x2f450e(0x1eb)]()||_0x379194)&&(_0x379194&&(_0x5a0038[_0x2f450e(0x436)]=_0x5a0038['_ptbActionCost']||{},_0x5a0038[_0x2f450e(0x436)][_0x2f450e(0x21f)]=0x0),_0x5a0038['alterActionCostPTB'](_0x331a6c,_0x9b6f8e,_0x121a22,_0xe70921));}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x83d),_0x29d6ed=>{const _0x16a929=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x16a929(0x7a2)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x16a929(0x91f)](_0x29d6ed,_0x29d6ed);const _0x339a05=BattleManager[_0x16a929(0x8f5)][_0x16a929(0x36f)]();let _0x6c3139=Math['max'](_0x29d6ed[_0x16a929(0x58e)],0x0),_0x2c55c1=_0x339a05[_0x16a929(0x295)](),_0x283dc3=_0x339a05[_0x16a929(0x13e)]();while(_0x6c3139--){if(_0x2c55c1<=0x0&&_0x283dc3<=0x0)break;else _0x2c55c1>0x0?(_0x2c55c1--,_0x283dc3++):_0x283dc3--;}_0x339a05[_0x16a929(0x310)](_0x2c55c1),_0x339a05[_0x16a929(0x5b1)](_0x283dc3);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x502),_0x2cfbe6=>{const _0x27d85c=_0x47679c;if(!SceneManager[_0x27d85c(0x75d)]())return;if(!Imported[_0x27d85c(0x7a2)])return;if(!BattleManager[_0x27d85c(0x638)]())return;VisuMZ[_0x27d85c(0x91f)](_0x2cfbe6,_0x2cfbe6);const _0x3e21ea=BattleManager[_0x27d85c(0x8f5)][_0x27d85c(0x36f)]();let _0x17e87d=_0x2cfbe6[_0x27d85c(0x885)],_0x502457=_0x2cfbe6[_0x27d85c(0x20e)];_0x3e21ea[_0x27d85c(0x353)](_0x17e87d),_0x3e21ea[_0x27d85c(0x591)](_0x502457);}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],'ActSeq_Mechanics_RemoveBuffDebuff',_0xf4cf2f=>{const _0x251267=_0x47679c;if(!SceneManager[_0x251267(0x75d)]())return;VisuMZ[_0x251267(0x91f)](_0xf4cf2f,_0xf4cf2f);const _0x12f9d3=[_0x251267(0x2ce),_0x251267(0x691),_0x251267(0x21c),_0x251267(0x8c4),_0x251267(0x367),_0x251267(0x8dc),_0x251267(0x921),_0x251267(0x132)],_0x35196c=_0xf4cf2f[_0x251267(0x7d8)],_0x5dc211=_0xf4cf2f[_0x251267(0x455)],_0x364f32=VisuMZ[_0x251267(0x889)](_0xf4cf2f[_0x251267(0x714)]);for(const _0x232ffb of _0x364f32){if(!_0x232ffb)continue;for(const _0x5e9275 of _0x35196c){const _0x301b48=_0x12f9d3['indexOf'](_0x5e9275['toUpperCase']()['trim']());_0x301b48>=0x0&&_0x301b48<=0x7&&_0x232ffb[_0x251267(0x2ea)](_0x301b48)&&_0x232ffb[_0x251267(0x33e)](_0x301b48);}for(const _0x396084 of _0x5dc211){const _0x576865=_0x12f9d3['indexOf'](_0x396084['toUpperCase']()[_0x251267(0x616)]());_0x576865>=0x0&&_0x576865<=0x7&&_0x232ffb[_0x251267(0x21a)](_0x576865)&&_0x232ffb[_0x251267(0x33e)](_0x576865);}}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],'ActSeq_Mechanics_RemoveState',_0x5d3ef1=>{const _0x48bdb8=_0x47679c;if(!SceneManager[_0x48bdb8(0x75d)]())return;VisuMZ['ConvertParams'](_0x5d3ef1,_0x5d3ef1);const _0x2e62d5=_0x5d3ef1['States'],_0x4534b5=VisuMZ['CreateActionSequenceTargets'](_0x5d3ef1[_0x48bdb8(0x714)]);for(const _0x491083 of _0x4534b5){if(!_0x491083)continue;for(const _0x2f81cc of _0x2e62d5){_0x491083[_0x48bdb8(0x8c5)](_0x2f81cc);}}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_StbExploit',_0x40321a=>{const _0x5ae0ed=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5ae0ed(0x405)])return;if(!BattleManager[_0x5ae0ed(0x59a)]())return;VisuMZ['ConvertParams'](_0x40321a,_0x40321a);const _0x3ba032=_0x40321a[_0x5ae0ed(0x513)],_0x49a424=VisuMZ['CreateActionSequenceTargets'](_0x40321a['Targets']),_0x4ff0f4=_0x40321a[_0x5ae0ed(0x910)],_0x2c62f0=_0x40321a['Exploiter'],_0x25f503=_0x40321a['ForceExploiter'],_0x4510df=BattleManager[_0x5ae0ed(0x4c7)];if(_0x3ba032)for(const _0x2501af of _0x49a424){if(!_0x2501af)continue;if(_0x2501af===user)continue;if(_0x4ff0f4)_0x2501af[_0x5ae0ed(0x1e7)](![]);_0x2501af[_0x5ae0ed(0x577)](BattleManager['_subject'],_0x4510df);}if(_0x2c62f0&&BattleManager[_0x5ae0ed(0x8f5)]){if(_0x25f503)BattleManager[_0x5ae0ed(0x8f5)][_0x5ae0ed(0x1e7)](![]);const _0x2bc2a0=_0x49a424[0x0];BattleManager[_0x5ae0ed(0x8b4)](_0x2bc2a0,_0x4510df);}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_StbExtraAction',_0x52718f=>{const _0x7f612b=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x7f612b(0x405)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x7f612b(0x91f)](_0x52718f,_0x52718f);const _0x60aa58=_0x52718f['Actions'];BattleManager['_subject']&&BattleManager[_0x7f612b(0x8f5)]['stbGainInstant'](_0x60aa58);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x2dd),_0x31f9f0=>{const _0x1ddcea=_0x47679c;if(!SceneManager[_0x1ddcea(0x75d)]())return;if(!Imported[_0x1ddcea(0x405)])return;if(!BattleManager[_0x1ddcea(0x59a)]())return;VisuMZ[_0x1ddcea(0x91f)](_0x31f9f0,_0x31f9f0);let _0x108a24=_0x31f9f0['Actions'];if(BattleManager[_0x1ddcea(0x8f5)]){BattleManager[_0x1ddcea(0x8f5)][_0x1ddcea(0x341)]=BattleManager['_subject'][_0x1ddcea(0x341)]||[];while(_0x108a24--){if(BattleManager[_0x1ddcea(0x8f5)]['_actions']['length']<=0x0)break;BattleManager[_0x1ddcea(0x8f5)]['_actions'][_0x1ddcea(0x2a4)]();}}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x6b3),_0x34516f=>{const _0x46285e=_0x47679c;if(!SceneManager[_0x46285e(0x75d)]())return;if(!Imported[_0x46285e(0x47c)])return;VisuMZ['ConvertParams'](_0x34516f,_0x34516f);const _0x4f5e77=VisuMZ[_0x46285e(0x889)](_0x34516f[_0x46285e(0x714)]),_0x9e77f0=_0x34516f['WeaponTypeID'];for(const _0x1d504c of _0x4f5e77){if(!_0x1d504c)continue;if(!_0x1d504c[_0x46285e(0xf2)]())continue;_0x1d504c[_0x46285e(0x325)](_0x9e77f0);}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_TextPopup',_0x134fbf=>{const _0x593727=_0x47679c;if(!SceneManager[_0x593727(0x75d)]())return;VisuMZ[_0x593727(0x91f)](_0x134fbf,_0x134fbf);const _0x5f8833=VisuMZ[_0x593727(0x889)](_0x134fbf['Targets']),_0x230c2b=_0x134fbf['Text'],_0x4902c2={'textColor':ColorManager['getColor'](_0x134fbf['TextColor']),'flashColor':_0x134fbf[_0x593727(0x818)],'flashDuration':_0x134fbf[_0x593727(0x6c3)]};for(const _0x5816b4 of _0x5f8833){if(!_0x5816b4)continue;_0x5816b4['setupTextPopup'](_0x230c2b,_0x4902c2);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x4d5),_0x1255c7=>{const _0x4ebb5e=_0x47679c;if(!SceneManager[_0x4ebb5e(0x75d)]())return;VisuMZ[_0x4ebb5e(0x91f)](_0x1255c7,_0x1255c7);const _0xf0a3de=VisuMZ[_0x4ebb5e(0x889)](_0x1255c7[_0x4ebb5e(0x714)]);let _0x5e06b=$gameVariables[_0x4ebb5e(0x48e)](_0x1255c7[_0x4ebb5e(0x74b)]);Imported['VisuMZ_0_CoreEngine']&&_0x1255c7[_0x4ebb5e(0x60a)]&&(_0x5e06b=VisuMZ['GroupDigits'](_0x5e06b));const _0x57ff7f=String(_0x5e06b),_0x1776e0={'textColor':ColorManager[_0x4ebb5e(0x1dc)](_0x1255c7[_0x4ebb5e(0x522)]),'flashColor':_0x1255c7[_0x4ebb5e(0x818)],'flashDuration':_0x1255c7[_0x4ebb5e(0x6c3)]};for(const _0x3d1fb7 of _0xf0a3de){if(!_0x3d1fb7)continue;_0x3d1fb7[_0x4ebb5e(0x37f)](_0x57ff7f,_0x1776e0);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Mechanics_WaitForEffect',_0x4de785=>{const _0x49be6b=_0x47679c;if(!SceneManager[_0x49be6b(0x75d)]())return;const _0x31fb13=$gameTemp[_0x49be6b(0x47a)]();if(!_0x31fb13)return;_0x31fb13[_0x49be6b(0x851)](_0x49be6b(0x45f));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x886),_0xb72b69=>{const _0x211205=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0xb72b69,_0xb72b69);const _0x40b576=VisuMZ[_0x211205(0x889)](_0xb72b69[_0x211205(0x714)]);for(const _0x51ecb3 of _0x40b576){if(!_0x51ecb3)continue;_0x51ecb3[_0x211205(0x698)]();}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Motion_FreezeMotionFrame',_0x4130d5=>{const _0xdd182b=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x4130d5,_0x4130d5);const _0x59d560=VisuMZ[_0xdd182b(0x889)](_0x4130d5[_0xdd182b(0x714)]),_0x2f72df=_0x4130d5['MotionType'][_0xdd182b(0x6d4)]()[_0xdd182b(0x616)]();let _0x2053a0=_0x4130d5['ShowWeapon'];const _0x53b6d1=_0x4130d5[_0xdd182b(0x46f)];!['attack',_0xdd182b(0x7cd),_0xdd182b(0x3a8),_0xdd182b(0x5e9)]['includes'](_0x2f72df)&&(_0x2053a0=![]);for(const _0x382d57 of _0x59d560){if(!_0x382d57)continue;_0x382d57[_0xdd182b(0x44d)](_0x2f72df,_0x2053a0,_0x53b6d1);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x5a5),_0x192520=>{const _0x132ceb=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x132ceb(0x91f)](_0x192520,_0x192520);const _0x3fc088=VisuMZ[_0x132ceb(0x889)](_0x192520['Targets']),_0x450760=_0x192520[_0x132ceb(0x382)][_0x132ceb(0x6d4)]()['trim'](),_0xb2df7a=_0x192520['ShowWeapon'];for(const _0x398cb7 of _0x3fc088){if(!_0x398cb7)continue;if(_0x450760[_0x132ceb(0x503)](/ATTACK[ ](\d+)/i))_0x398cb7[_0x132ceb(0x7c1)](Number(RegExp['$1']));else _0x450760==='attack'?_0x398cb7[_0x132ceb(0x1b2)]():_0x398cb7[_0x132ceb(0x608)](_0x450760);if(!_0xb2df7a)_0x398cb7[_0x132ceb(0x145)](0x0);else{if(_0xb2df7a&&[_0x132ceb(0x7cd),'swing',_0x132ceb(0x91e)][_0x132ceb(0x3f6)](_0x450760)){}}}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x2e9),_0x58defe=>{const _0x402fca=_0x47679c;if(!SceneManager[_0x402fca(0x75d)]())return;VisuMZ[_0x402fca(0x91f)](_0x58defe,_0x58defe);const _0x24abc5=BattleManager['_action'];if(!_0x24abc5)return;if(!_0x24abc5[_0x402fca(0x88b)]())return;const _0x1755e6=VisuMZ[_0x402fca(0x889)](_0x58defe[_0x402fca(0x714)]);for(const _0x30a9de of _0x1755e6){if(!_0x30a9de)continue;_0x30a9de[_0x402fca(0x5d5)](_0x24abc5);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x91c),_0x59601c=>{const _0x528856=_0x47679c;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x528856(0x91f)](_0x59601c,_0x59601c);const _0x9047e6=VisuMZ[_0x528856(0x889)](_0x59601c['Targets']);for(const _0x182a64 of _0x9047e6){if(!_0x182a64)continue;if(!_0x182a64[_0x528856(0x828)]())continue;_0x182a64[_0x528856(0x828)]()[_0x528856(0x8af)]();}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x51d),_0x1c98ed=>{const _0x445c0b=_0x47679c;if(!SceneManager[_0x445c0b(0x75d)]())return;VisuMZ[_0x445c0b(0x91f)](_0x1c98ed,_0x1c98ed);const _0x3d6ee7=$gameTemp['getLastPluginCommandInterpreter'](),_0x1c3612=_0x1c98ed[_0x445c0b(0x84e)]*Sprite_Battler['_motionSpeed'];_0x3d6ee7[_0x445c0b(0x4f7)](_0x1c3612);}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x73b),_0x6fe7bf=>{const _0x2e2ddd=_0x47679c;if(!SceneManager[_0x2e2ddd(0x75d)]())return;VisuMZ[_0x2e2ddd(0x91f)](_0x6fe7bf,_0x6fe7bf);const _0x2b152a=$gameTemp[_0x2e2ddd(0x47a)](),_0xaf972b=BattleManager[_0x2e2ddd(0x4c7)];if(!_0x2b152a||!_0xaf972b)return;if(!_0xaf972b[_0x2e2ddd(0x88b)]())return;const _0x32aa29=VisuMZ[_0x2e2ddd(0x889)](_0x6fe7bf['Targets']);for(const _0x1a7d87 of _0x32aa29){if(!_0x1a7d87)continue;_0x1a7d87['performActionStart'](_0xaf972b);}if(_0x6fe7bf[_0x2e2ddd(0x362)])_0x2b152a[_0x2e2ddd(0x851)](_0x2e2ddd(0x63a));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x381),_0x2a9279=>{const _0x1117af=_0x47679c;if(!SceneManager[_0x1117af(0x75d)]())return;if(!$gameSystem[_0x1117af(0x30b)]())return;VisuMZ[_0x1117af(0x91f)](_0x2a9279,_0x2a9279);const _0xab6539=$gameTemp[_0x1117af(0x47a)](),_0xd9a912=VisuMZ[_0x1117af(0x889)](_0x2a9279[_0x1117af(0x714)]),_0x171bfa=_0x2a9279[_0x1117af(0x912)],_0x1de7c9=_0x2a9279[_0x1117af(0x7ee)],_0x43d89b=_0x2a9279['DistanceY'],_0x1fd42a=_0x2a9279[_0x1117af(0x94f)],_0x5224d8=_0x2a9279[_0x1117af(0x57f)],_0x288185=_0x2a9279[_0x1117af(0x3f5)],_0x21da7f=_0x2a9279['MotionType'],_0x1958c7=_0x2a9279[_0x1117af(0x362)];if(!_0xab6539)return;for(const _0x513449 of _0xd9a912){if(!_0x513449)continue;let _0x4c70be=_0x1de7c9,_0xfe7d90=_0x43d89b;if(_0x171bfa['match'](/horz/i))_0x4c70be*=_0x513449[_0x1117af(0xf2)]()?-0x1:0x1;if(_0x171bfa['match'](/vert/i))_0xfe7d90*=_0x513449[_0x1117af(0xf2)]()?-0x1:0x1;_0x513449[_0x1117af(0x57d)](_0x4c70be,_0xfe7d90,_0x1fd42a,_0x5224d8,_0x288185),_0x513449[_0x1117af(0x608)](_0x21da7f);}if(_0x1958c7)_0xab6539['setWaitMode'](_0x1117af(0x63a));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x103),_0x2e7ee4=>{const _0x282201=_0x47679c;if(!SceneManager[_0x282201(0x75d)]())return;if(!$gameSystem[_0x282201(0x30b)]())return;VisuMZ['ConvertParams'](_0x2e7ee4,_0x2e7ee4);const _0x430938=$gameTemp[_0x282201(0x47a)](),_0x4e2ae0=VisuMZ[_0x282201(0x889)](_0x2e7ee4[_0x282201(0x714)]),_0x4fcb8a=_0x2e7ee4[_0x282201(0x7d0)],_0x31e21a=_0x2e7ee4['OffsetAdjust'],_0x3eae9a=_0x2e7ee4[_0x282201(0x49c)],_0x325284=_0x2e7ee4[_0x282201(0x428)],_0x39a9d9=_0x2e7ee4[_0x282201(0x94f)],_0x1864ec=_0x2e7ee4[_0x282201(0x57f)],_0x16926c=_0x2e7ee4[_0x282201(0x3f5)],_0xd10ef8=_0x2e7ee4['MotionType'],_0x5e4e6f=_0x2e7ee4[_0x282201(0x362)];if(!_0x430938)return;for(const _0x59b61b of _0x4e2ae0){if(!_0x59b61b)continue;let _0x289d4=_0x59b61b[_0x282201(0x828)]()[_0x282201(0x854)],_0x316b84=_0x59b61b['battler']()[_0x282201(0x4b2)];if(_0x4fcb8a['match'](/home/i))_0x289d4=_0x59b61b[_0x282201(0x828)]()['_homeX'],_0x316b84=_0x59b61b[_0x282201(0x828)]()['_homeY'];else{if(_0x4fcb8a['match'](/center/i))_0x289d4=Graphics[_0x282201(0x75b)]/0x2,_0x316b84=Graphics['boxHeight']/0x2;else _0x4fcb8a[_0x282201(0x503)](/point (\d+), (\d+)/i)&&(_0x289d4=Number(RegExp['$1']),_0x316b84=Number(RegExp['$2']));}if(_0x31e21a[_0x282201(0x503)](/none/i))_0x289d4+=_0x3eae9a,_0x316b84+=_0x325284;else{if(_0x31e21a[_0x282201(0x503)](/horz/i)&&_0x31e21a['match'](/vert/i))_0x289d4+=_0x59b61b['isActor']()?-_0x3eae9a:_0x3eae9a,_0x316b84+=_0x59b61b['isActor']()?-_0x325284:_0x325284;else{if(_0x31e21a[_0x282201(0x503)](/horz/i))_0x289d4+=_0x59b61b[_0x282201(0xf2)]()?-_0x3eae9a:_0x3eae9a,_0x316b84+=_0x325284;else _0x31e21a[_0x282201(0x503)](/vert/i)&&(_0x289d4+=_0x3eae9a,_0x316b84+=_0x59b61b[_0x282201(0xf2)]()?-_0x325284:_0x325284);}}_0x59b61b['moveBattlerHomeToPoint'](_0x289d4,_0x316b84,_0x39a9d9,_0x1864ec,_0x16926c,-0x1),_0x59b61b[_0x282201(0x608)](_0xd10ef8);}if(_0x5e4e6f)_0x430938[_0x282201(0x851)](_0x282201(0x63a));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Movement_HomeMoveToTarget',_0x7ec449=>{const _0xf9b86d=_0x47679c;if(!SceneManager[_0xf9b86d(0x75d)]())return;if(!$gameSystem[_0xf9b86d(0x30b)]())return;VisuMZ[_0xf9b86d(0x91f)](_0x7ec449,_0x7ec449);const _0x1c826a=$gameTemp[_0xf9b86d(0x47a)](),_0x1cf7a4=VisuMZ[_0xf9b86d(0x889)](_0x7ec449[_0xf9b86d(0x90e)]),_0x245f46=VisuMZ[_0xf9b86d(0x889)](_0x7ec449[_0xf9b86d(0x23e)]),_0x5ec379=_0x7ec449[_0xf9b86d(0x439)];let _0x5a4dd2=_0x7ec449['MeleeDistance'];const _0x46e4c0=_0x7ec449[_0xf9b86d(0x754)],_0x54d092=_0x7ec449[_0xf9b86d(0x49c)],_0x356509=_0x7ec449[_0xf9b86d(0x428)],_0x366098=_0x7ec449['Duration'],_0x56617a=_0x7ec449[_0xf9b86d(0x57f)],_0x5c0e10=_0x7ec449[_0xf9b86d(0x3f5)],_0xee1ba7=_0x7ec449[_0xf9b86d(0x382)],_0x36c031=_0x7ec449['WaitForMovement'],_0x506f7c=Math[_0xf9b86d(0x905)](..._0x245f46[_0xf9b86d(0x261)](_0x37e674=>_0x37e674[_0xf9b86d(0x828)]()[_0xf9b86d(0x854)]-_0x37e674[_0xf9b86d(0x828)]()[_0xf9b86d(0x4e3)]()/0x2)),_0x734c34=Math[_0xf9b86d(0x766)](..._0x245f46[_0xf9b86d(0x261)](_0x2ed2e4=>_0x2ed2e4['battler']()[_0xf9b86d(0x854)]+_0x2ed2e4['battler']()['mainSpriteWidth']()/0x2)),_0x42e2f2=Math[_0xf9b86d(0x905)](..._0x245f46[_0xf9b86d(0x261)](_0x2147c8=>_0x2147c8['battler']()['_baseY']-_0x2147c8[_0xf9b86d(0x828)]()[_0xf9b86d(0x8f8)]())),_0x5a1b97=Math[_0xf9b86d(0x766)](..._0x245f46['map'](_0x45b350=>_0x45b350['battler']()[_0xf9b86d(0x4b2)])),_0xc7c7a4=_0x245f46[_0xf9b86d(0x36c)](_0x5e6da4=>_0x5e6da4[_0xf9b86d(0xf2)]())[_0xf9b86d(0x42d)],_0x2efd09=_0x245f46[_0xf9b86d(0x36c)](_0x253042=>_0x253042[_0xf9b86d(0x415)]())[_0xf9b86d(0x42d)];let _0x44f2c7=0x0,_0x116258=0x0;if(_0x5ec379[_0xf9b86d(0x503)](/front/i))_0x44f2c7=_0xc7c7a4>=_0x2efd09?_0x506f7c:_0x734c34;else{if(_0x5ec379['match'](/middle/i))_0x44f2c7=(_0x506f7c+_0x734c34)/0x2,_0x5a4dd2=-0x1;else _0x5ec379[_0xf9b86d(0x503)](/back/i)&&(_0x44f2c7=_0xc7c7a4>=_0x2efd09?_0x734c34:_0x506f7c);}if(_0x5ec379[_0xf9b86d(0x503)](/head/i))_0x116258=_0x42e2f2;else{if(_0x5ec379[_0xf9b86d(0x503)](/center/i))_0x116258=(_0x42e2f2+_0x5a1b97)/0x2;else _0x5ec379[_0xf9b86d(0x503)](/base/i)&&(_0x116258=_0x5a1b97);}if(!_0x1c826a)return;for(const _0x4c5917 of _0x1cf7a4){if(!_0x4c5917)continue;let _0x170ecc=_0x44f2c7,_0x1fa145=_0x116258;if(_0x46e4c0['match'](/none/i))_0x170ecc+=_0x54d092,_0x1fa145+=_0x356509;else{if(_0x46e4c0[_0xf9b86d(0x503)](/horz/i)&&_0x46e4c0[_0xf9b86d(0x503)](/vert/i))_0x170ecc+=_0x4c5917[_0xf9b86d(0xf2)]()?-_0x54d092:_0x54d092,_0x1fa145+=_0x4c5917[_0xf9b86d(0xf2)]()?-_0x356509:_0x356509;else{if(_0x46e4c0['match'](/horz/i))_0x170ecc+=_0x4c5917[_0xf9b86d(0xf2)]()?-_0x54d092:_0x54d092,_0x1fa145+=_0x356509;else _0x46e4c0[_0xf9b86d(0x503)](/vert/i)&&(_0x170ecc+=_0x54d092,_0x1fa145+=_0x4c5917[_0xf9b86d(0xf2)]()?-_0x356509:_0x356509);}}_0x4c5917[_0xf9b86d(0x46c)](_0x170ecc,_0x1fa145,_0x366098,_0x56617a,_0x5c0e10,_0x5a4dd2),_0x4c5917[_0xf9b86d(0x608)](_0xee1ba7);}if(_0x36c031)_0x1c826a['setWaitMode'](_0xf9b86d(0x63a));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x7d6),_0x13d6ec=>{const _0x34bc41=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x34bc41(0x30b)]())return;VisuMZ[_0x34bc41(0x91f)](_0x13d6ec,_0x13d6ec);const _0x125f71=VisuMZ['CreateActionSequenceTargets'](_0x13d6ec[_0x34bc41(0x714)]);let _0x4f7e16=_0x13d6ec[_0x34bc41(0x2ad)][_0x34bc41(0x503)](/back/i);for(const _0x5611fe of _0x125f71){if(!_0x5611fe)continue;if(_0x13d6ec['Direction']['match'](/rand/i))_0x4f7e16=Math[_0x34bc41(0x743)](0x2);_0x5611fe[_0x34bc41(0x697)](!!_0x4f7e16);}}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x504),_0x230b69=>{const _0x11eb9c=_0x47679c;if(!SceneManager[_0x11eb9c(0x75d)]())return;if(!$gameSystem[_0x11eb9c(0x30b)]())return;VisuMZ[_0x11eb9c(0x91f)](_0x230b69,_0x230b69);const _0x2e8a5d=VisuMZ[_0x11eb9c(0x889)](_0x230b69[_0x11eb9c(0x714)]);let _0x361156=_0x230b69[_0x11eb9c(0x246)];const _0x1e6130=_0x230b69[_0x11eb9c(0x91b)];for(const _0x9819e7 of _0x2e8a5d){if(!_0x9819e7)continue;let _0x1f33eb=_0x9819e7[_0x11eb9c(0x828)]()[_0x11eb9c(0x854)],_0x31c0dc=_0x9819e7[_0x11eb9c(0x828)]()[_0x11eb9c(0x4b2)];if(_0x361156[_0x11eb9c(0x503)](/home/i))_0x1f33eb=_0x9819e7[_0x11eb9c(0x828)]()[_0x11eb9c(0x76a)],_0x31c0dc=_0x9819e7[_0x11eb9c(0x828)]()['_homeY'];else{if(_0x361156[_0x11eb9c(0x503)](/center/i))_0x1f33eb=Graphics[_0x11eb9c(0x75b)]/0x2,_0x31c0dc=Graphics[_0x11eb9c(0x113)]/0x2;else _0x361156[_0x11eb9c(0x503)](/point (\d+), (\d+)/i)&&(_0x1f33eb=Number(RegExp['$1']),_0x31c0dc=Number(RegExp['$2']));}_0x9819e7[_0x11eb9c(0x128)](Math[_0x11eb9c(0x23b)](_0x1f33eb),Math['round'](_0x31c0dc),!!_0x1e6130);}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x687),_0x3a36e8=>{const _0x559acd=_0x47679c;if(!SceneManager[_0x559acd(0x75d)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x559acd(0x91f)](_0x3a36e8,_0x3a36e8);const _0xc6da14=VisuMZ['CreateActionSequenceTargets'](_0x3a36e8[_0x559acd(0x90e)]),_0xc6a50b=VisuMZ['CreateActionSequenceTargets'](_0x3a36e8[_0x559acd(0x23e)]),_0x26bc52=_0xc6a50b[_0x559acd(0x261)](_0x32669f=>_0x32669f&&_0x32669f['battler']()?_0x32669f[_0x559acd(0x828)]()[_0x559acd(0x854)]:0x0)/(_0xc6a50b[_0x559acd(0x42d)]||0x1),_0xbb094c=_0xc6a50b[_0x559acd(0x261)](_0x38ca55=>_0x38ca55&&_0x38ca55[_0x559acd(0x828)]()?_0x38ca55[_0x559acd(0x828)]()[_0x559acd(0x4b2)]:0x0)/(_0xc6a50b[_0x559acd(0x42d)]||0x1),_0x11e9ea=_0x3a36e8[_0x559acd(0x91b)];for(const _0x29cda1 of _0xc6da14){if(!_0x29cda1)continue;_0x29cda1[_0x559acd(0x128)](Math[_0x559acd(0x23b)](_0x26bc52),Math[_0x559acd(0x23b)](_0xbb094c),!!_0x11e9ea);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x4b8),_0xbffc77=>{const _0x434059=_0x47679c;if(!SceneManager[_0x434059(0x75d)]())return;VisuMZ['ConvertParams'](_0xbffc77,_0xbffc77);const _0x5611e4=$gameTemp['getLastPluginCommandInterpreter'](),_0x282260=VisuMZ[_0x434059(0x889)](_0xbffc77['Targets']),_0x591d6=_0xbffc77['Height'],_0x54de05=_0xbffc77[_0x434059(0x94f)],_0x3db67b=_0xbffc77[_0x434059(0x3f5)],_0x5a7d5f=_0xbffc77['WaitForFloat'];if(!_0x5611e4)return;for(const _0xf9b03c of _0x282260){if(!_0xf9b03c)continue;_0xf9b03c['floatBattler'](_0x591d6,_0x54de05,_0x3db67b);}if(_0x5a7d5f)_0x5611e4['setWaitMode'](_0x434059(0x8f1));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x54d),_0x555340=>{const _0x477217=_0x47679c;if(!SceneManager[_0x477217(0x75d)]())return;VisuMZ[_0x477217(0x91f)](_0x555340,_0x555340);const _0x2cdd93=$gameTemp[_0x477217(0x47a)]();if(!_0x2cdd93)return;const _0x479fb9=VisuMZ[_0x477217(0x889)](_0x555340['Targets']);for(const _0x3897d3 of _0x479fb9){if(!_0x3897d3)continue;_0x3897d3[_0x477217(0x4ed)]();}BattleManager[_0x477217(0x8f5)]&&BattleManager[_0x477217(0x8f5)][_0x477217(0x832)]();if(_0x555340[_0x477217(0x362)])_0x2cdd93[_0x477217(0x851)](_0x477217(0x63a));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x5e6),_0x2b5d03=>{const _0x2955f0=_0x47679c;if(!SceneManager[_0x2955f0(0x75d)]())return;VisuMZ[_0x2955f0(0x91f)](_0x2b5d03,_0x2b5d03);const _0x1a732b=$gameTemp[_0x2955f0(0x47a)](),_0x2b0a0a=VisuMZ[_0x2955f0(0x889)](_0x2b5d03[_0x2955f0(0x714)]),_0x1790b4=_0x2b5d03[_0x2955f0(0x920)],_0x4d2edb=_0x2b5d03['Duration'],_0x2aff48=_0x2b5d03['WaitForJump'];if(!_0x1a732b)return;for(const _0x2a19de of _0x2b0a0a){if(!_0x2a19de)continue;_0x2a19de[_0x2955f0(0x1a7)](_0x1790b4,_0x4d2edb);}if(_0x2aff48)_0x1a732b[_0x2955f0(0x851)](_0x2955f0(0x578));}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Movement_MoveBy',_0x336535=>{const _0x2ee1a0=_0x47679c;if(!SceneManager[_0x2ee1a0(0x75d)]())return;if(!$gameSystem[_0x2ee1a0(0x30b)]())return;VisuMZ[_0x2ee1a0(0x91f)](_0x336535,_0x336535);const _0x323204=$gameTemp[_0x2ee1a0(0x47a)](),_0x4a9c11=VisuMZ[_0x2ee1a0(0x889)](_0x336535[_0x2ee1a0(0x714)]),_0x23b5b6=_0x336535[_0x2ee1a0(0x912)],_0xf2e124=_0x336535['DistanceX'],_0x4a4ffc=_0x336535['DistanceY'],_0x2c148e=_0x336535[_0x2ee1a0(0x94f)],_0x1d3a75=_0x336535['FaceDirection'],_0x362f52=_0x336535[_0x2ee1a0(0x3f5)],_0x29cbd8=_0x336535[_0x2ee1a0(0x382)],_0x3b156f=_0x336535[_0x2ee1a0(0x362)];if(!_0x323204)return;for(const _0x1641d6 of _0x4a9c11){if(!_0x1641d6)continue;let _0x3ff86a=_0xf2e124,_0x2bf14c=_0x4a4ffc;if(_0x23b5b6['match'](/horz/i))_0x3ff86a*=_0x1641d6[_0x2ee1a0(0xf2)]()?-0x1:0x1;if(_0x23b5b6['match'](/vert/i))_0x2bf14c*=_0x1641d6[_0x2ee1a0(0xf2)]()?-0x1:0x1;_0x1641d6['moveBattlerDistance'](_0x3ff86a,_0x2bf14c,_0x2c148e,_0x1d3a75,_0x362f52),_0x1641d6[_0x2ee1a0(0x608)](_0x29cbd8);}if(_0x3b156f)_0x323204['setWaitMode']('battleMove');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],'ActSeq_Movement_MoveToPoint',_0x263969=>{const _0x34459a=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x34459a(0x30b)]())return;VisuMZ['ConvertParams'](_0x263969,_0x263969);const _0x3a796c=$gameTemp['getLastPluginCommandInterpreter'](),_0x145896=VisuMZ[_0x34459a(0x889)](_0x263969[_0x34459a(0x714)]),_0x59b5c9=_0x263969[_0x34459a(0x7d0)],_0x3d8460=_0x263969[_0x34459a(0x754)],_0x4e243a=_0x263969[_0x34459a(0x49c)],_0x25aed2=_0x263969[_0x34459a(0x428)],_0x11acd7=_0x263969['Duration'],_0x23b353=_0x263969[_0x34459a(0x57f)],_0x1e365b=_0x263969[_0x34459a(0x3f5)],_0x10560=_0x263969['MotionType'],_0x594f20=_0x263969[_0x34459a(0x362)];if(!_0x3a796c)return;for(const _0x29bc65 of _0x145896){if(!_0x29bc65)continue;let _0x1910f2=_0x29bc65['battler']()['_baseX'],_0x3d67ab=_0x29bc65[_0x34459a(0x828)]()[_0x34459a(0x4b2)];if(_0x59b5c9[_0x34459a(0x503)](/home/i))_0x1910f2=_0x29bc65[_0x34459a(0x828)]()[_0x34459a(0x76a)],_0x3d67ab=_0x29bc65[_0x34459a(0x828)]()[_0x34459a(0x843)];else{if(_0x59b5c9[_0x34459a(0x503)](/center/i))_0x1910f2=Graphics[_0x34459a(0x75b)]/0x2,_0x3d67ab=Graphics[_0x34459a(0x113)]/0x2;else _0x59b5c9[_0x34459a(0x503)](/point (\d+), (\d+)/i)&&(_0x1910f2=Number(RegExp['$1']),_0x3d67ab=Number(RegExp['$2']));}if(_0x3d8460[_0x34459a(0x503)](/none/i))_0x1910f2+=_0x4e243a,_0x3d67ab+=_0x25aed2;else{if(_0x3d8460['match'](/horz/i)&&_0x3d8460['match'](/vert/i))_0x1910f2+=_0x29bc65['isActor']()?-_0x4e243a:_0x4e243a,_0x3d67ab+=_0x29bc65['isActor']()?-_0x25aed2:_0x25aed2;else{if(_0x3d8460[_0x34459a(0x503)](/horz/i))_0x1910f2+=_0x29bc65[_0x34459a(0xf2)]()?-_0x4e243a:_0x4e243a,_0x3d67ab+=_0x25aed2;else _0x3d8460[_0x34459a(0x503)](/vert/i)&&(_0x1910f2+=_0x4e243a,_0x3d67ab+=_0x29bc65[_0x34459a(0xf2)]()?-_0x25aed2:_0x25aed2);}}_0x29bc65[_0x34459a(0x2a8)](_0x1910f2,_0x3d67ab,_0x11acd7,_0x23b353,_0x1e365b,-0x1),_0x29bc65[_0x34459a(0x608)](_0x10560);}if(_0x594f20)_0x3a796c['setWaitMode'](_0x34459a(0x63a));}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Movement_MoveToTarget',_0x1ddae2=>{const _0x1573da=_0x47679c;if(!SceneManager[_0x1573da(0x75d)]())return;if(!$gameSystem[_0x1573da(0x30b)]())return;VisuMZ[_0x1573da(0x91f)](_0x1ddae2,_0x1ddae2);const _0x4079af=$gameTemp[_0x1573da(0x47a)](),_0x3f7cd2=VisuMZ[_0x1573da(0x889)](_0x1ddae2['Targets1']),_0x2a5297=VisuMZ[_0x1573da(0x889)](_0x1ddae2[_0x1573da(0x23e)]),_0x566f02=_0x1ddae2[_0x1573da(0x439)];let _0x18a5e3=_0x1ddae2[_0x1573da(0x7ba)];const _0x16f2fc=_0x1ddae2[_0x1573da(0x754)],_0x31383e=_0x1ddae2[_0x1573da(0x49c)],_0xfeef77=_0x1ddae2[_0x1573da(0x428)],_0x330381=_0x1ddae2[_0x1573da(0x94f)],_0x5ed64c=_0x1ddae2[_0x1573da(0x57f)],_0x545a64=_0x1ddae2[_0x1573da(0x3f5)],_0x184981=_0x1ddae2['MotionType'],_0x466fef=_0x1ddae2[_0x1573da(0x362)],_0x42d9b1=Math['min'](..._0x2a5297[_0x1573da(0x261)](_0x4b38fe=>_0x4b38fe['battler']()[_0x1573da(0x854)]-_0x4b38fe[_0x1573da(0x828)]()[_0x1573da(0x4e3)]()/0x2)),_0x588d87=Math[_0x1573da(0x766)](..._0x2a5297[_0x1573da(0x261)](_0x42545a=>_0x42545a[_0x1573da(0x828)]()[_0x1573da(0x854)]+_0x42545a[_0x1573da(0x828)]()[_0x1573da(0x4e3)]()/0x2)),_0x1a02e4=Math['min'](..._0x2a5297[_0x1573da(0x261)](_0x2981f8=>_0x2981f8[_0x1573da(0x828)]()[_0x1573da(0x4b2)]-_0x2981f8[_0x1573da(0x828)]()[_0x1573da(0x8f8)]())),_0x473fe9=Math[_0x1573da(0x766)](..._0x2a5297[_0x1573da(0x261)](_0x37e749=>_0x37e749['battler']()[_0x1573da(0x4b2)])),_0x55c5e4=_0x2a5297[_0x1573da(0x36c)](_0x376598=>_0x376598[_0x1573da(0xf2)]())['length'],_0x143b27=_0x2a5297[_0x1573da(0x36c)](_0x45bd9b=>_0x45bd9b[_0x1573da(0x415)]())[_0x1573da(0x42d)];let _0x130cc3=0x0,_0x38e6c0=0x0;if(_0x566f02[_0x1573da(0x503)](/front/i))_0x130cc3=_0x55c5e4>=_0x143b27?_0x42d9b1:_0x588d87;else{if(_0x566f02[_0x1573da(0x503)](/middle/i))_0x130cc3=(_0x42d9b1+_0x588d87)/0x2,_0x18a5e3=-0x1;else _0x566f02[_0x1573da(0x503)](/back/i)&&(_0x130cc3=_0x55c5e4>=_0x143b27?_0x588d87:_0x42d9b1);}if(_0x566f02[_0x1573da(0x503)](/head/i))_0x38e6c0=_0x1a02e4;else{if(_0x566f02['match'](/center/i))_0x38e6c0=(_0x1a02e4+_0x473fe9)/0x2;else _0x566f02['match'](/base/i)&&(_0x38e6c0=_0x473fe9);}if(!_0x4079af)return;for(const _0x3fc6fe of _0x3f7cd2){if(!_0x3fc6fe)continue;let _0x40d714=_0x130cc3,_0x39b03e=_0x38e6c0;if(_0x16f2fc['match'](/none/i))_0x40d714+=_0x31383e,_0x39b03e+=_0xfeef77;else{if(_0x16f2fc[_0x1573da(0x503)](/horz/i)&&_0x16f2fc[_0x1573da(0x503)](/vert/i))_0x40d714+=_0x3fc6fe[_0x1573da(0xf2)]()?-_0x31383e:_0x31383e,_0x39b03e+=_0x3fc6fe['isActor']()?-_0xfeef77:_0xfeef77;else{if(_0x16f2fc[_0x1573da(0x503)](/horz/i))_0x40d714+=_0x3fc6fe[_0x1573da(0xf2)]()?-_0x31383e:_0x31383e,_0x39b03e+=_0xfeef77;else _0x16f2fc[_0x1573da(0x503)](/vert/i)&&(_0x40d714+=_0x31383e,_0x39b03e+=_0x3fc6fe[_0x1573da(0xf2)]()?-_0xfeef77:_0xfeef77);}}_0x3fc6fe[_0x1573da(0x2a8)](_0x40d714,_0x39b03e,_0x330381,_0x5ed64c,_0x545a64,_0x18a5e3),_0x3fc6fe[_0x1573da(0x608)](_0x184981);}if(_0x466fef)_0x4079af[_0x1573da(0x851)](_0x1573da(0x63a));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x4c3),_0x408929=>{const _0x5e8cf3=_0x47679c;if(!SceneManager[_0x5e8cf3(0x75d)]())return;VisuMZ[_0x5e8cf3(0x91f)](_0x408929,_0x408929);const _0x78f9cb=$gameTemp[_0x5e8cf3(0x47a)](),_0x27bc21=VisuMZ[_0x5e8cf3(0x889)](_0x408929[_0x5e8cf3(0x714)]),_0x36e441=_0x408929[_0x5e8cf3(0x130)],_0x10aa52=_0x408929['Duration'],_0x163fda=_0x408929[_0x5e8cf3(0x3f5)],_0x334d7e=_0x408929[_0x5e8cf3(0x297)];if(!_0x78f9cb)return;for(const _0x604d97 of _0x27bc21){if(!_0x604d97)continue;_0x604d97[_0x5e8cf3(0x211)](_0x36e441,_0x10aa52,_0x163fda);}if(_0x334d7e)_0x78f9cb['setWaitMode'](_0x5e8cf3(0x311));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x1ec),_0x2c1f19=>{const _0x40e146=_0x47679c;if(!SceneManager[_0x40e146(0x75d)]())return;VisuMZ[_0x40e146(0x91f)](_0x2c1f19,_0x2c1f19);const _0x3b1fac=$gameTemp[_0x40e146(0x47a)](),_0x4f0227=VisuMZ['CreateActionSequenceTargets'](_0x2c1f19[_0x40e146(0x714)]),_0x59dd63=_0x2c1f19['ScaleX'],_0xcaf8c9=_0x2c1f19[_0x40e146(0x384)],_0x1ed18e=_0x2c1f19[_0x40e146(0x94f)],_0x45ddb5=_0x2c1f19[_0x40e146(0x3f5)],_0x4867cc=_0x2c1f19[_0x40e146(0x3dd)];if(!_0x3b1fac)return;for(const _0x29afac of _0x4f0227){if(!_0x29afac)continue;_0x29afac[_0x40e146(0x4bf)](_0x59dd63,_0xcaf8c9,_0x1ed18e,_0x45ddb5);}if(_0x4867cc)_0x3b1fac[_0x40e146(0x851)](_0x40e146(0x94d));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x584),_0x34cea4=>{const _0x1611d8=_0x47679c;if(!SceneManager[_0x1611d8(0x75d)]())return;VisuMZ[_0x1611d8(0x91f)](_0x34cea4,_0x34cea4);const _0x4fcbc1=$gameTemp['getLastPluginCommandInterpreter'](),_0xa5034d=VisuMZ[_0x1611d8(0x889)](_0x34cea4[_0x1611d8(0x714)]),_0xe27742=_0x34cea4['SkewX'],_0x8aaa53=_0x34cea4[_0x1611d8(0x829)],_0xe54771=_0x34cea4[_0x1611d8(0x94f)],_0x17fb53=_0x34cea4[_0x1611d8(0x3f5)],_0x3de83f=_0x34cea4['WaitForSkew'];if(!_0x4fcbc1)return;for(const _0x1a3283 of _0xa5034d){if(!_0x1a3283)continue;_0x1a3283[_0x1611d8(0x5b2)](_0xe27742,_0x8aaa53,_0xe54771,_0x17fb53);}if(_0x3de83f)_0x4fcbc1[_0x1611d8(0x851)](_0x1611d8(0x94a));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x4b9),_0x5a4d7f=>{const _0x760007=_0x47679c;if(!SceneManager[_0x760007(0x75d)]())return;VisuMZ[_0x760007(0x91f)](_0x5a4d7f,_0x5a4d7f);const _0x2b8198=$gameTemp[_0x760007(0x47a)](),_0xea536b=VisuMZ[_0x760007(0x889)](_0x5a4d7f['Targets']),_0x529016=_0x5a4d7f['Angle'],_0x292295=_0x5a4d7f[_0x760007(0x94f)],_0x411167=_0x5a4d7f[_0x760007(0x3f5)],_0x57ec2e=_0x5a4d7f[_0x760007(0x4c2)],_0x53b2b6=_0x5a4d7f['WaitForSpin'];if(!_0x2b8198)return;for(const _0x97589 of _0xea536b){if(!_0x97589)continue;_0x97589['spinBattler'](_0x529016,_0x292295,_0x411167,_0x57ec2e);}if(_0x53b2b6)_0x2b8198[_0x760007(0x851)](_0x760007(0x7f0));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x458),_0x10fad7=>{const _0x43a1e4=_0x47679c;if(!SceneManager[_0x43a1e4(0x75d)]())return;const _0x1f597c=$gameTemp[_0x43a1e4(0x47a)]();if(!_0x1f597c)return;_0x1f597c[_0x43a1e4(0x851)](_0x43a1e4(0x8f1));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x6a1),_0x332783=>{const _0x309673=_0x47679c;if(!SceneManager[_0x309673(0x75d)]())return;const _0x25754a=$gameTemp[_0x309673(0x47a)]();if(!_0x25754a)return;_0x25754a[_0x309673(0x851)](_0x309673(0x578));}),PluginManager['registerCommand'](pluginData['name'],_0x47679c(0x408),_0x2e30e4=>{const _0x456145=_0x47679c;if(!SceneManager['isSceneBattle']())return;const _0x242f70=$gameTemp[_0x456145(0x47a)]();if(!_0x242f70)return;_0x242f70[_0x456145(0x851)](_0x456145(0x63a));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x3d9),_0x4405b4=>{const _0x4137bd=_0x47679c;if(!SceneManager[_0x4137bd(0x75d)]())return;const _0x564231=$gameTemp[_0x4137bd(0x47a)]();if(!_0x564231)return;_0x564231[_0x4137bd(0x851)]('battleOpacity');}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x3f1),_0x17d3b7=>{const _0x42a016=_0x47679c;if(!SceneManager[_0x42a016(0x75d)]())return;const _0x445352=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x445352)return;_0x445352['setWaitMode']('battleGrow');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x24c),_0x30c0aa=>{const _0x302e5c=_0x47679c;if(!SceneManager['isSceneBattle']())return;const _0x1d0442=$gameTemp[_0x302e5c(0x47a)]();if(!_0x1d0442)return;_0x1d0442[_0x302e5c(0x851)](_0x302e5c(0x94a));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x94b),_0x5be749=>{const _0x3ee99e=_0x47679c;if(!SceneManager[_0x3ee99e(0x75d)]())return;const _0x2ba3d2=$gameTemp[_0x3ee99e(0x47a)]();if(!_0x2ba3d2)return;_0x2ba3d2[_0x3ee99e(0x851)]('battleSpin');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x304),_0x57dc82=>{const _0x7a300=_0x47679c;if(!SceneManager[_0x7a300(0x75d)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x7a300(0x91f)](_0x57dc82,_0x57dc82);const _0x37ef50=$gameTemp[_0x7a300(0x47a)](),_0x341d6e=_0x57dc82[_0x7a300(0x705)];if(!_0x37ef50)return;const _0x33ba8a=BattleManager[_0x7a300(0x610)];if(!_0x33ba8a)return;_0x33ba8a[_0x7a300(0x143)](_0x57dc82);if(_0x341d6e)_0x37ef50[_0x7a300(0x851)]('battleProjectiles');}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],_0x47679c(0x528),_0x1ad994=>{const _0x4fca5a=_0x47679c;if(!SceneManager[_0x4fca5a(0x75d)]())return;if(!Imported[_0x4fca5a(0x3f7)])return;VisuMZ[_0x4fca5a(0x91f)](_0x1ad994,_0x1ad994);const _0x5164bb=$gameTemp['getLastPluginCommandInterpreter'](),_0x2c55c3=_0x1ad994[_0x4fca5a(0x705)];if(!_0x5164bb)return;const _0x4ec7ac=BattleManager[_0x4fca5a(0x610)];if(!_0x4ec7ac)return;_0x4ec7ac['createActionSequenceProjectile'](_0x1ad994);if(_0x2c55c3)_0x5164bb['setWaitMode']('battleProjectiles');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x816),_0x140c7a=>{const _0x5e20f7=_0x47679c;if(!SceneManager[_0x5e20f7(0x75d)]())return;if(!Imported[_0x5e20f7(0x3f7)])return;VisuMZ[_0x5e20f7(0x91f)](_0x140c7a,_0x140c7a);const _0x125368=$gameTemp[_0x5e20f7(0x47a)](),_0x56769b=_0x140c7a[_0x5e20f7(0x705)];if(!_0x125368)return;const _0x1b5309=BattleManager[_0x5e20f7(0x610)];if(!_0x1b5309)return;_0x1b5309[_0x5e20f7(0x143)](_0x140c7a);if(_0x56769b)_0x125368[_0x5e20f7(0x851)](_0x5e20f7(0x918));}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],'ActSeq_ChangeSkew',_0x447287=>{const _0x3096c0=_0x47679c;if(!SceneManager[_0x3096c0(0x75d)]())return;if(!Imported[_0x3096c0(0x94c)])return;VisuMZ[_0x3096c0(0x91f)](_0x447287,_0x447287);const _0x52f58b=$gameTemp['getLastPluginCommandInterpreter'](),_0x138802=_0x447287[_0x3096c0(0x63b)];if(!_0x52f58b)return;$gameScreen['setBattleSkew'](_0x447287[_0x3096c0(0x604)],_0x447287[_0x3096c0(0x829)],_0x447287[_0x3096c0(0x94f)],_0x447287[_0x3096c0(0x3f5)]);if(_0x138802)_0x52f58b[_0x3096c0(0x851)]('battleSkew');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x340),_0x28f07b=>{const _0x5122f6=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x5122f6(0x94c)])return;VisuMZ['ConvertParams'](_0x28f07b,_0x28f07b);const _0x364359=$gameTemp[_0x5122f6(0x47a)](),_0x4a2f5d=_0x28f07b[_0x5122f6(0x63b)];if(!_0x364359)return;$gameScreen[_0x5122f6(0x35d)](0x0,0x0,_0x28f07b[_0x5122f6(0x94f)],_0x28f07b[_0x5122f6(0x3f5)]);if(_0x4a2f5d)_0x364359[_0x5122f6(0x851)]('battleSkew');}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x363),_0x33ff80=>{const _0x4cb4ee=_0x47679c;if(!SceneManager[_0x4cb4ee(0x75d)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x59554b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x59554b)return;_0x59554b[_0x4cb4ee(0x851)]('battleSkew');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x31c),_0x2abdad=>{const _0x5cae27=_0x47679c;if(!SceneManager[_0x5cae27(0x75d)]())return;VisuMZ[_0x5cae27(0x91f)](_0x2abdad,_0x2abdad);const _0x94f1c0=$gameTemp[_0x5cae27(0x47a)](),_0x4229e1=_0x2abdad['Index'],_0x1b917f=_0x2abdad['JumpToLabel'];if(!_0x94f1c0)return;BattleManager[_0x5cae27(0x713)]=_0x4229e1,BattleManager[_0x5cae27(0x1a4)]=BattleManager[_0x5cae27(0x5d7)]?BattleManager[_0x5cae27(0x5d7)][BattleManager['_targetIndex']]||null:null,BattleManager[_0x5cae27(0x1a4)]&&_0x1b917f['toUpperCase']()['trim']()!==_0x5cae27(0x20b)&&_0x94f1c0['command119']([_0x1b917f]);}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0xdf),_0x3dca9a=>{const _0x3c99cd=_0x47679c;if(!SceneManager[_0x3c99cd(0x75d)]())return;VisuMZ[_0x3c99cd(0x91f)](_0x3dca9a,_0x3dca9a);const _0x46d43b=$gameTemp[_0x3c99cd(0x47a)](),_0x1d4533=_0x3dca9a[_0x3c99cd(0x5a8)];if(!_0x46d43b)return;BattleManager['_targetIndex']++,BattleManager[_0x3c99cd(0x1a4)]=BattleManager[_0x3c99cd(0x5d7)][BattleManager['_targetIndex']]||null,BattleManager[_0x3c99cd(0x1a4)]&&_0x1d4533[_0x3c99cd(0x1d3)]()['trim']()!=='UNTITLED'&&_0x46d43b[_0x3c99cd(0x6c2)]([_0x1d4533]);}),PluginManager['registerCommand'](pluginData[_0x47679c(0x620)],'ActSeq_Target_PrevTarget',_0x173278=>{const _0x27710e=_0x47679c;if(!SceneManager[_0x27710e(0x75d)]())return;VisuMZ[_0x27710e(0x91f)](_0x173278,_0x173278);const _0x236441=$gameTemp['getLastPluginCommandInterpreter'](),_0x71b4f9=_0x173278[_0x27710e(0x5a8)];if(!_0x236441)return;BattleManager['_targetIndex']--,BattleManager[_0x27710e(0x1a4)]=BattleManager[_0x27710e(0x5d7)][BattleManager[_0x27710e(0x713)]]||null,BattleManager['_target']&&_0x71b4f9[_0x27710e(0x1d3)]()['trim']()!==_0x27710e(0x20b)&&_0x236441[_0x27710e(0x6c2)]([_0x71b4f9]);}),PluginManager['registerCommand'](pluginData['name'],_0x47679c(0x6d6),_0x5e6151=>{const _0x177183=_0x47679c;if(!SceneManager[_0x177183(0x75d)]())return;VisuMZ[_0x177183(0x91f)](_0x5e6151,_0x5e6151);const _0xad8cc2=$gameTemp['getLastPluginCommandInterpreter'](),_0x3250ad=_0x5e6151[_0x177183(0x2d3)],_0x397300=_0x5e6151['JumpToLabel'];if(!_0xad8cc2)return;const _0x1b35f9=BattleManager[_0x177183(0x713)];for(;;){BattleManager['_targetIndex']=Math[_0x177183(0x743)](BattleManager[_0x177183(0x5d7)]['length']);if(!_0x3250ad)break;if(BattleManager['_targetIndex']!==_0x1b35f9)break;if(BattleManager['_allTargets'][_0x177183(0x42d)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager[_0x177183(0x1a4)]=BattleManager[_0x177183(0x5d7)][BattleManager[_0x177183(0x713)]]||null,BattleManager[_0x177183(0x1a4)]&&_0x397300[_0x177183(0x1d3)]()['trim']()!==_0x177183(0x20b)&&_0xad8cc2['command119']([_0x397300]);}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x475),_0x37a8cc=>{const _0x38b8f9=_0x47679c;if(!SceneManager[_0x38b8f9(0x75d)]())return;VisuMZ[_0x38b8f9(0x91f)](_0x37a8cc,_0x37a8cc);const _0x27e09e=VisuMZ[_0x38b8f9(0x889)](_0x37a8cc[_0x38b8f9(0x714)]);for(const _0x56a1a2 of _0x27e09e){if(!_0x56a1a2)continue;if(!_0x56a1a2[_0x38b8f9(0xf2)]())continue;_0x56a1a2['clearActiveWeaponSlot']();}}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],_0x47679c(0x8a0),_0x1c1587=>{const _0x5c846c=_0x47679c;if(!SceneManager[_0x5c846c(0x75d)]())return;VisuMZ[_0x5c846c(0x91f)](_0x1c1587,_0x1c1587);const _0x1123c9=$gameTemp[_0x5c846c(0x47a)]();let _0x34a3a8=![];const _0x497fd8=_0x1c1587[_0x5c846c(0x5a8)],_0x3c5c45=VisuMZ[_0x5c846c(0x889)](_0x1c1587[_0x5c846c(0x714)]);for(const _0x3be14a of _0x3c5c45){if(!_0x3be14a)continue;if(!_0x3be14a[_0x5c846c(0xf2)]())continue;_0x3be14a[_0x5c846c(0x3ec)](),_0x3be14a[_0x5c846c(0x6a8)]()[_0x5c846c(0x42d)]>0x0?_0x34a3a8=!![]:_0x3be14a[_0x5c846c(0x6f1)]();}_0x34a3a8&&_0x497fd8[_0x5c846c(0x1d3)]()[_0x5c846c(0x616)]()!=='UNTITLED'&&_0x1123c9[_0x5c846c(0x6c2)]([_0x497fd8]);}),PluginManager[_0x47679c(0x7f1)](pluginData['name'],'ActSeq_Weapon_SetActiveWeapon',_0x4f70f4=>{const _0x3a0da1=_0x47679c;if(!SceneManager[_0x3a0da1(0x75d)]())return;VisuMZ['ConvertParams'](_0x4f70f4,_0x4f70f4);let _0x3bd6f1=_0x4f70f4[_0x3a0da1(0x3d3)];_0x3bd6f1--,_0x3bd6f1=Math[_0x3a0da1(0x766)](_0x3bd6f1,0x0);const _0x5be592=VisuMZ['CreateActionSequenceTargets'](_0x4f70f4[_0x3a0da1(0x714)]);for(const _0x3e8e20 of _0x5be592){if(!_0x3e8e20)continue;if(!_0x3e8e20[_0x3a0da1(0xf2)]())continue;_0x3e8e20[_0x3a0da1(0x7ec)](_0x3bd6f1);}}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x349),_0x4a8499=>{const _0x57e76a=_0x47679c;if(!SceneManager[_0x57e76a(0x75d)]())return;if(!Imported[_0x57e76a(0x94c)])return;VisuMZ[_0x57e76a(0x91f)](_0x4a8499,_0x4a8499);const _0x1b9cc1=$gameTemp[_0x57e76a(0x47a)](),_0x1fa47b=_0x4a8499[_0x57e76a(0x8d7)];if(!_0x1b9cc1)return;$gameScreen[_0x57e76a(0x646)](_0x4a8499[_0x57e76a(0x19d)],_0x4a8499[_0x57e76a(0x94f)],_0x4a8499[_0x57e76a(0x3f5)]);if(_0x1fa47b)_0x1b9cc1[_0x57e76a(0x851)](_0x57e76a(0x82f));}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x1ed),_0xaea133=>{const _0x15151a=_0x47679c;if(!SceneManager[_0x15151a(0x75d)]())return;if(!Imported[_0x15151a(0x94c)])return;VisuMZ['ConvertParams'](_0xaea133,_0xaea133);const _0x105840=$gameTemp[_0x15151a(0x47a)](),_0x5a8871=_0xaea133[_0x15151a(0x8d7)];if(!_0x105840)return;$gameScreen[_0x15151a(0x646)](0x1,_0xaea133[_0x15151a(0x94f)],_0xaea133[_0x15151a(0x3f5)]);if(_0x5a8871)_0x105840['setWaitMode']('battleZoom');}),PluginManager[_0x47679c(0x7f1)](pluginData[_0x47679c(0x620)],_0x47679c(0x7ae),_0x277246=>{const _0xc2683e=_0x47679c;if(!SceneManager[_0xc2683e(0x75d)]())return;if(!Imported[_0xc2683e(0x94c)])return;const _0x5f5876=$gameTemp[_0xc2683e(0x47a)]();if(!_0x5f5876)return;_0x5f5876[_0xc2683e(0x851)](_0xc2683e(0x82f));}),VisuMZ[_0x47679c(0x2b8)]['Scene_Boot_onDatabaseLoaded']=Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x665)],Scene_Boot[_0x47679c(0x63e)]['onDatabaseLoaded']=function(){const _0x7a68c8=_0x47679c;this[_0x7a68c8(0x708)](),this['process_VisuMZ_BattleCore_PluginParams'](),this[_0x7a68c8(0x8a9)](),this[_0x7a68c8(0x931)](),VisuMZ['BattleCore'][_0x7a68c8(0x141)][_0x7a68c8(0x22f)](this),this['process_VisuMZ_BattleCore_Notetags'](),this[_0x7a68c8(0x4e9)](),this['process_VisuMZ_BattleCore_PreBattleCommonEvent'](),this[_0x7a68c8(0xe8)]();},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x2ed)]=function(){const _0x4470d1=_0x47679c;if(VisuMZ[_0x4470d1(0x544)])return;this[_0x4470d1(0x5f9)](),this[_0x4470d1(0x4f1)](),this[_0x4470d1(0x8d9)]();},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x708)]=function(){const _0x4ee9c1=_0x47679c,_0x5a35ed=$dataSystem[_0x4ee9c1(0x5c0)][_0x4ee9c1(0x42d)];for(let _0x12436f=0x0;_0x12436f<_0x5a35ed;_0x12436f++){const _0x4a1064=$dataSystem['attackMotions'][_0x12436f];if(_0x4a1064)continue;$dataSystem[_0x4ee9c1(0x791)][_0x12436f]=JsonEx[_0x4ee9c1(0x7f5)]($dataSystem[_0x4ee9c1(0x791)][0x0]);}},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x8a8)]=function(){const _0x121033=_0x47679c,_0x128a08=VisuMZ[_0x121033(0x2b8)][_0x121033(0x1ea)];_0x128a08[_0x121033(0x2c7)]['PopupPosition']===undefined&&(_0x128a08[_0x121033(0x2c7)][_0x121033(0x88d)]=_0x121033(0x1fe)),_0x128a08[_0x121033(0x559)][_0x121033(0x138)]===undefined&&(_0x128a08[_0x121033(0x559)][_0x121033(0x138)]=![]),_0x128a08[_0x121033(0x7d1)][_0x121033(0x138)]===undefined&&(_0x128a08['Enemy'][_0x121033(0x138)]=!![]),_0x128a08[_0x121033(0x559)]['PrioritySortActive']===undefined&&(_0x128a08[_0x121033(0x559)]['PrioritySortActive']=![]),_0x128a08[_0x121033(0x559)][_0x121033(0x6c1)]===undefined&&(_0x128a08[_0x121033(0x559)]['PrioritySortActors']=!![]);},VisuMZ[_0x47679c(0xf3)]={},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x8a9)]=function(){const _0x2693a7=_0x47679c;for(const _0x528ae1 of VisuMZ[_0x2693a7(0x2b8)][_0x2693a7(0x1ea)][_0x2693a7(0x2c7)][_0x2693a7(0x898)]){if(!_0x528ae1)continue;const _0x410995=_0x528ae1[_0x2693a7(0x5e4)][_0x2693a7(0x1d3)]()[_0x2693a7(0x616)]();VisuMZ[_0x2693a7(0xf3)][_0x410995]=_0x528ae1;}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x53c)]={},Scene_Boot[_0x47679c(0x63e)]['process_VisuMZ_BattleCore_CreateRegExp']=function(){const _0xd0702f=_0x47679c,_0x315001=VisuMZ['BattleCore'][_0xd0702f(0x53c)],_0x4447af=_0xd0702f(0x5fc),_0x4851e9=[[_0xd0702f(0x769),_0xd0702f(0x1e5)],[_0xd0702f(0x911),_0xd0702f(0x6ee)]],_0x5e2412=[[_0xd0702f(0x5ad),_0xd0702f(0x175)],[_0xd0702f(0x3af),'JS\x20%1DAMAGE\x20%2']],_0x3ef5b2=[['',''],['AsUser',_0xd0702f(0x433)],[_0xd0702f(0x5fa),_0xd0702f(0x199)]];for(const _0x2958de of _0x5e2412){for(const _0xd5aa55 of _0x3ef5b2){for(const _0x340a90 of _0x4851e9){const _0x1951b2=_0x2958de[0x0][_0xd0702f(0x151)](_0x340a90[0x0],_0xd5aa55[0x0]),_0x300c15=_0x2958de[0x1][_0xd0702f(0x151)](_0x340a90[0x1],_0xd5aa55[0x1])[_0xd0702f(0x616)](),_0x4e36d5=new RegExp(_0x4447af[_0xd0702f(0x151)](_0x300c15),'i');_0x315001[_0x1951b2]=_0x4e36d5;}}}const _0x1dd42b=[[_0xd0702f(0x6b0),_0xd0702f(0x4ba)],[_0xd0702f(0xdd),_0xd0702f(0x1c3)]];for(const _0x347d56 of _0x1dd42b){for(const _0x69c029 of _0x4851e9){const _0x2efa4e=_0x347d56[0x0][_0xd0702f(0x151)](_0x69c029[0x0]),_0x1d3741=_0x347d56[0x1]['format'](_0x69c029[0x1]),_0x3e15f2=new RegExp(_0x4447af[_0xd0702f(0x151)](_0x1d3741),'i');_0x315001[_0x2efa4e]=_0x3e15f2;}}const _0x410d6f=[[_0xd0702f(0x508),_0xd0702f(0x121)],['%1EndBattleJS',_0xd0702f(0x65e)],[_0xd0702f(0x58c),_0xd0702f(0x2cb)],[_0xd0702f(0x59f),_0xd0702f(0x331)],['EscapeSuccessJS',_0xd0702f(0x700)],[_0xd0702f(0x2ab),_0xd0702f(0x872)],['%1StartTurnJS',_0xd0702f(0x77a)],[_0xd0702f(0x79e),'JS\x20%1END\x20TURN'],[_0xd0702f(0x624),'JS\x20%1REGENERATE']];for(const _0x1071f6 of _0x410d6f){for(const _0x3eae66 of _0x4851e9){const _0x264665=_0x1071f6[0x0][_0xd0702f(0x151)](_0x3eae66[0x0]),_0x169be9=_0x1071f6[0x1][_0xd0702f(0x151)](_0x3eae66[0x1]),_0x16a80b=new RegExp(_0x4447af['format'](_0x169be9),'i');_0x315001[_0x264665]=_0x16a80b;}}},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x5f9)]=function(){const _0x520006=_0x47679c,_0x550b1c=$dataSkills[_0x520006(0x4f9)]($dataItems);for(const _0x1c9ebc of _0x550b1c){if(!_0x1c9ebc)continue;VisuMZ['BattleCore'][_0x520006(0x7dc)](_0x1c9ebc);}},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x4f1)]=function(){const _0x1855c0=_0x47679c,_0x3d152b=$dataActors[_0x1855c0(0x4f9)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x181374 of _0x3d152b){if(!_0x181374)continue;VisuMZ[_0x1855c0(0x2b8)]['Parse_Notetags_TraitObjects'](_0x181374);}},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x4e9)]=function(){const _0x8b5355=_0x47679c,_0x110d85=VisuMZ[_0x8b5355(0x2b8)][_0x8b5355(0x1ea)]['Mechanics'][_0x8b5355(0x4fa)],_0x4d8814=[];for(const _0x46b603 of _0x110d85){const _0x51d61b=$dataTroops[_0x46b603];if(_0x51d61b)_0x4d8814[_0x8b5355(0x6b4)](JsonEx[_0x8b5355(0x7f5)](_0x51d61b));}for(const _0x142346 of $dataTroops){if(!_0x142346)continue;for(const _0x5f3cde of _0x4d8814){if(_0x5f3cde['id']===_0x142346['id'])continue;_0x142346[_0x8b5355(0x6d7)]=_0x142346[_0x8b5355(0x6d7)][_0x8b5355(0x4f9)](_0x5f3cde['pages']);}}},Scene_Boot['prototype'][_0x47679c(0x75f)]=function(){const _0x337387=_0x47679c,_0x10f690=VisuMZ[_0x337387(0x2b8)]['Settings'][_0x337387(0x302)];if(_0x10f690[_0x337387(0x939)]>0x0&&$dataCommonEvents[_0x10f690[_0x337387(0x939)]]){const _0x3c8b16=$dataCommonEvents[_0x10f690[_0x337387(0x939)]],_0x1c1ad0=_0x3c8b16[_0x337387(0x926)]['length']-0x2,_0x4267e3=_0x3c8b16[_0x337387(0x926)][_0x1c1ad0];if(_0x4267e3&&_0x4267e3[_0x337387(0x107)]!==0xe6){const _0x7c1479={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5f014b=_0x3c8b16[_0x337387(0x926)][_0x337387(0x3f4)]();_0x3c8b16[_0x337387(0x926)]['unshift'](_0x7c1479),_0x3c8b16[_0x337387(0x926)][_0x337387(0x20c)](_0x5f014b);}}},Scene_Boot['prototype'][_0x47679c(0xe8)]=function(){const _0x453b5a=_0x47679c;VisuMZ[_0x453b5a(0x2b8)]['CreateCommonEventKeys'](),VisuMZ[_0x453b5a(0x2b8)]['BindCommonEventKeysForGroup']($dataSkills),VisuMZ['BattleCore'][_0x453b5a(0x6a9)]($dataItems);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x136)]=function(){const _0x2ee364=_0x47679c;VisuMZ[_0x2ee364(0x2b8)][_0x2ee364(0x30f)]={};for(const _0x30aa45 of $dataCommonEvents){if(!_0x30aa45)continue;if(_0x30aa45[_0x2ee364(0x620)][_0x2ee364(0x503)](/\[(.*)\]/i)){let _0x28ede7=String(RegExp['$1'])['replace'](/,/g,'')[_0x2ee364(0x1d3)]()[_0x2ee364(0x616)]();VisuMZ['BattleCore'][_0x2ee364(0x30f)][_0x28ede7]=_0x30aa45['id'];}}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6a9)]=function(_0x3c9695){const _0x550d03=_0x47679c;for(const _0x818a17 of _0x3c9695){if(!_0x818a17)continue;VisuMZ[_0x550d03(0x2b8)][_0x550d03(0x893)](_0x818a17);}},VisuMZ[_0x47679c(0x2b8)]['BindCommonEventKeysForObj']=function(_0x4d3778){const _0x2895e6=_0x47679c;if(!_0x4d3778)return;if(!_0x4d3778[_0x2895e6(0x156)])return;VisuMZ[_0x2895e6(0x2b8)]['_commonEventKey']=VisuMZ['BattleCore'][_0x2895e6(0x30f)]||{};const _0x155e22=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x910047=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x431b24=[];const _0x401346=_0x4d3778['note']['match'](_0x155e22);if(_0x401346){for(const _0x202fc8 of _0x401346){_0x202fc8[_0x2895e6(0x503)](_0x155e22);const _0xa3abb8=String(RegExp['$1'])[_0x2895e6(0x41c)](',')['map'](_0x7ad7c2=>String(_0x7ad7c2)[_0x2895e6(0x1d3)]()[_0x2895e6(0x616)]());_0x431b24=_0x431b24['concat'](_0xa3abb8);}!_0x4d3778[_0x2895e6(0x4d1)][_0x2895e6(0x503)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4d3778['note']+=_0x2895e6(0x774));;}if(_0x4d3778[_0x2895e6(0x4d1)][_0x2895e6(0x503)](_0x910047)){const _0x47bf8d=String(RegExp['$1'])[_0x2895e6(0x41c)](/[\r\n]+/)[_0x2895e6(0x261)](_0x5625c1=>String(_0x5625c1)[_0x2895e6(0x1d3)]()[_0x2895e6(0x616)]());_0x431b24=_0x431b24['concat'](_0x47bf8d);!_0x4d3778[_0x2895e6(0x4d1)][_0x2895e6(0x503)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4d3778[_0x2895e6(0x4d1)]+=_0x2895e6(0x774));;}for(const _0x5bf88a of _0x431b24){if(VisuMZ[_0x2895e6(0x2b8)][_0x2895e6(0x30f)][_0x5bf88a]){const _0x27cb32=VisuMZ[_0x2895e6(0x2b8)][_0x2895e6(0x30f)][_0x5bf88a],_0x2fba68={'code':0x2c,'dataId':_0x27cb32,'value1':0x1,'value2':0x0};_0x4d3778[_0x2895e6(0x156)][_0x2895e6(0x6b4)](_0x2fba68);}}},Scene_Boot[_0x47679c(0x63e)][_0x47679c(0x8d9)]=function(){const _0x3b75c6=_0x47679c,_0x5e04fe=$dataSkills[_0x3b75c6(0x4f9)]($dataItems);for(const _0xa1919d of _0x5e04fe){if(!_0xa1919d)continue;VisuMZ[_0x3b75c6(0x2b8)]['Parse_Notetags_Targets'](_0xa1919d);}},VisuMZ[_0x47679c(0x2b8)]['ParseActorNotetags']=VisuMZ[_0x47679c(0x8e6)],VisuMZ[_0x47679c(0x8e6)]=function(_0x2f9f34){const _0x127f30=_0x47679c;VisuMZ[_0x127f30(0x2b8)]['ParseActorNotetags']&&VisuMZ[_0x127f30(0x2b8)][_0x127f30(0x8e6)]['call'](this,_0x2f9f34),VisuMZ['BattleCore']['Parse_Notetags_TraitObjects'](_0x2f9f34);},VisuMZ[_0x47679c(0x2b8)]['ParseClassNotetags']=VisuMZ[_0x47679c(0x699)],VisuMZ[_0x47679c(0x699)]=function(_0x3f8569){const _0x3db8b8=_0x47679c;VisuMZ[_0x3db8b8(0x2b8)][_0x3db8b8(0x699)]&&VisuMZ[_0x3db8b8(0x2b8)][_0x3db8b8(0x699)][_0x3db8b8(0x22f)](this,_0x3f8569),VisuMZ[_0x3db8b8(0x2b8)][_0x3db8b8(0x22e)](_0x3f8569);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x266)]=VisuMZ[_0x47679c(0x266)],VisuMZ['ParseSkillNotetags']=function(_0x1865a4){const _0xeaae0f=_0x47679c;VisuMZ[_0xeaae0f(0x2b8)][_0xeaae0f(0x266)]&&VisuMZ['BattleCore']['ParseSkillNotetags'][_0xeaae0f(0x22f)](this,_0x1865a4),VisuMZ[_0xeaae0f(0x2b8)]['Parse_Notetags_Action'](_0x1865a4),VisuMZ[_0xeaae0f(0x2b8)][_0xeaae0f(0x841)](_0x1865a4);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1cc)]=VisuMZ[_0x47679c(0x1cc)],VisuMZ['ParseItemNotetags']=function(_0x475819){const _0x1f6a3a=_0x47679c;VisuMZ[_0x1f6a3a(0x2b8)][_0x1f6a3a(0x1cc)]&&VisuMZ[_0x1f6a3a(0x2b8)][_0x1f6a3a(0x1cc)][_0x1f6a3a(0x22f)](this,_0x475819),VisuMZ[_0x1f6a3a(0x2b8)][_0x1f6a3a(0x7dc)](_0x475819),VisuMZ['BattleCore'][_0x1f6a3a(0x841)](_0x475819);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x154)]=VisuMZ[_0x47679c(0x154)],VisuMZ[_0x47679c(0x154)]=function(_0xf4eb95){const _0xc87244=_0x47679c;VisuMZ[_0xc87244(0x2b8)][_0xc87244(0x154)]&&VisuMZ[_0xc87244(0x2b8)][_0xc87244(0x154)][_0xc87244(0x22f)](this,_0xf4eb95),VisuMZ[_0xc87244(0x2b8)]['Parse_Notetags_TraitObjects'](_0xf4eb95);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6ed)]=VisuMZ[_0x47679c(0x6ed)],VisuMZ[_0x47679c(0x6ed)]=function(_0x357aee){const _0x471063=_0x47679c;VisuMZ[_0x471063(0x2b8)]['ParseArmorNotetags']&&VisuMZ[_0x471063(0x2b8)][_0x471063(0x6ed)][_0x471063(0x22f)](this,_0x357aee),VisuMZ[_0x471063(0x2b8)][_0x471063(0x22e)](_0x357aee);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x43e)]=VisuMZ[_0x47679c(0x43e)],VisuMZ[_0x47679c(0x43e)]=function(_0x4b71bb){const _0x240c52=_0x47679c;VisuMZ[_0x240c52(0x2b8)][_0x240c52(0x43e)]&&VisuMZ[_0x240c52(0x2b8)][_0x240c52(0x43e)][_0x240c52(0x22f)](this,_0x4b71bb),VisuMZ[_0x240c52(0x2b8)][_0x240c52(0x22e)](_0x4b71bb);},VisuMZ['BattleCore'][_0x47679c(0x1b1)]=VisuMZ[_0x47679c(0x1b1)],VisuMZ[_0x47679c(0x1b1)]=function(_0x432ebc){const _0x16c349=_0x47679c;VisuMZ[_0x16c349(0x2b8)][_0x16c349(0x1b1)]&&VisuMZ[_0x16c349(0x2b8)][_0x16c349(0x1b1)][_0x16c349(0x22f)](this,_0x432ebc),VisuMZ[_0x16c349(0x2b8)]['Parse_Notetags_TraitObjects'](_0x432ebc);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x7dc)]=function(_0x3c4297){const _0x4fb730=_0x47679c,_0x317f06=[_0x4fb730(0x5f3),_0x4fb730(0x5e7),_0x4fb730(0x32f),_0x4fb730(0x1d9),_0x4fb730(0x4f4),_0x4fb730(0x641),_0x4fb730(0x68a),_0x4fb730(0x286)];for(const _0x3f5c24 of _0x317f06){VisuMZ[_0x4fb730(0x2b8)]['createJS'](_0x3c4297,_0x3f5c24);}const _0x3bfd82=_0x3c4297['note'];_0x3bfd82[_0x4fb730(0x503)](/<ALWAYS CRITICAL/i)&&(_0x3c4297[_0x4fb730(0x1e6)][_0x4fb730(0x6ef)]=!![]),_0x3bfd82[_0x4fb730(0x503)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x3c4297[_0x4fb730(0x7d3)]=Math[_0x4fb730(0x766)](0x1,Number(RegExp['$1']))),_0x3bfd82[_0x4fb730(0x503)](/<TARGET:[ ](.*)>/i)&&(_0x3c4297[_0x4fb730(0x5a7)]=String(RegExp['$1'])['toUpperCase']()['trim']());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x22e)]=function(_0x5c78d6){const _0x14147a=_0x47679c,_0x5082a2=[_0x14147a(0x830),_0x14147a(0x901),_0x14147a(0x124),_0x14147a(0x318),_0x14147a(0x1a2),_0x14147a(0x412),'PreDamageAsTargetJS',_0x14147a(0x850),'PreStartActionJS','PostStartActionJS',_0x14147a(0x68a),_0x14147a(0x286),_0x14147a(0x35f),_0x14147a(0x801),'PreEndBattleJS',_0x14147a(0x572),_0x14147a(0x58c),'BattleDefeatJS',_0x14147a(0x3b1),_0x14147a(0x2ab),_0x14147a(0x1fd),_0x14147a(0x204),_0x14147a(0x61a),'PostEndTurnJS',_0x14147a(0x477),_0x14147a(0x39a)];for(const _0x3b1b09 of _0x5082a2){VisuMZ[_0x14147a(0x2b8)][_0x14147a(0x34e)](_0x5c78d6,_0x3b1b09);}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x841)]=function(_0x59a98e){const _0x4f7650=_0x47679c,_0x19212b=_0x59a98e[_0x4f7650(0x4d1)];if(_0x19212b[_0x4f7650(0x503)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x3b71b1=String(RegExp['$1']),_0x387c35=VisuMZ[_0x4f7650(0x2b8)][_0x4f7650(0x1d5)](_0x59a98e,_0x4f7650(0x714));VisuMZ['BattleCore'][_0x4f7650(0x242)](_0x3b71b1,_0x387c35);}if(_0x19212b[_0x4f7650(0x503)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x203917=String(RegExp['$1']),_0x4a6e18=VisuMZ['BattleCore'][_0x4f7650(0x1d5)](_0x59a98e,_0x4f7650(0x7bf));VisuMZ[_0x4f7650(0x2b8)][_0x4f7650(0x7b0)](_0x203917,_0x4a6e18);}},VisuMZ[_0x47679c(0x2b8)]['JS']={},VisuMZ['BattleCore'][_0x47679c(0x34e)]=function(_0x10d6f7,_0x23f4c8){const _0x17f08c=_0x47679c,_0x242783=_0x10d6f7['note'];if(_0x242783['match'](VisuMZ[_0x17f08c(0x2b8)][_0x17f08c(0x53c)][_0x23f4c8])){const _0x4e1788=RegExp['$1'],_0x590878='\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20'['format'](_0x4e1788),_0x45ad4c=VisuMZ[_0x17f08c(0x2b8)][_0x17f08c(0x1d5)](_0x10d6f7,_0x23f4c8);VisuMZ['BattleCore']['JS'][_0x45ad4c]=new Function(_0x590878);}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1d5)]=function(_0xa5c46,_0x52f7ba){const _0x1d7154=_0x47679c;let _0x3dbed3='';if($dataActors['includes'](_0xa5c46))_0x3dbed3=_0x1d7154(0x323)['format'](_0xa5c46['id'],_0x52f7ba);if($dataClasses[_0x1d7154(0x3f6)](_0xa5c46))_0x3dbed3='Class-%1-%2'[_0x1d7154(0x151)](_0xa5c46['id'],_0x52f7ba);if($dataSkills[_0x1d7154(0x3f6)](_0xa5c46))_0x3dbed3=_0x1d7154(0x709)[_0x1d7154(0x151)](_0xa5c46['id'],_0x52f7ba);if($dataItems['includes'](_0xa5c46))_0x3dbed3=_0x1d7154(0x5f5)['format'](_0xa5c46['id'],_0x52f7ba);if($dataWeapons[_0x1d7154(0x3f6)](_0xa5c46))_0x3dbed3=_0x1d7154(0x45b)[_0x1d7154(0x151)](_0xa5c46['id'],_0x52f7ba);if($dataArmors[_0x1d7154(0x3f6)](_0xa5c46))_0x3dbed3=_0x1d7154(0x438)[_0x1d7154(0x151)](_0xa5c46['id'],_0x52f7ba);if($dataEnemies[_0x1d7154(0x3f6)](_0xa5c46))_0x3dbed3=_0x1d7154(0x8e4)[_0x1d7154(0x151)](_0xa5c46['id'],_0x52f7ba);if($dataStates[_0x1d7154(0x3f6)](_0xa5c46))_0x3dbed3='State-%1-%2'[_0x1d7154(0x151)](_0xa5c46['id'],_0x52f7ba);return _0x3dbed3;},VisuMZ['BattleCore'][_0x47679c(0x242)]=function(_0x24f2fd,_0x208c47){const _0x5dc821=_0x47679c,_0x5489ad=_0x5dc821(0x236)[_0x5dc821(0x151)](_0x24f2fd);VisuMZ[_0x5dc821(0x2b8)]['JS'][_0x208c47]=new Function(_0x5489ad);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x7b0)]=function(_0x179ed3,_0x36d52a){const _0x41da3a=_0x47679c,_0x288618='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20'[_0x41da3a(0x151)](_0x179ed3);VisuMZ['BattleCore']['JS'][_0x36d52a]=new Function(_0x288618);},TextManager['autoBattle']=VisuMZ['BattleCore'][_0x47679c(0x1ea)]['PartyCmd']['CmdTextAutoBattle'],TextManager[_0x47679c(0x648)]=VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1ea)]['AutoBattle'][_0x47679c(0x758)],TextManager[_0x47679c(0x380)]=VisuMZ['BattleCore'][_0x47679c(0x1ea)][_0x47679c(0x18c)]['StyleName'],TextManager[_0x47679c(0x1e4)]=VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1ea)][_0x47679c(0x84a)][_0x47679c(0x5e4)],ColorManager[_0x47679c(0x1dc)]=function(_0xcfc150){const _0x52ca4b=_0x47679c;return _0xcfc150=String(_0xcfc150),_0xcfc150[_0x52ca4b(0x503)](/#(.*)/i)?_0x52ca4b(0x1f9)[_0x52ca4b(0x151)](String(RegExp['$1'])):this[_0x52ca4b(0x7e0)](Number(_0xcfc150));},DataManager[_0x47679c(0x456)]=function(_0x5beb8f){const _0x34b77d=_0x47679c;if(_0x5beb8f[_0x34b77d(0x4d1)][_0x34b77d(0x503)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x47091c=String(RegExp['$1'])['toUpperCase']()[_0x34b77d(0x616)]();if(_0x47091c===_0x34b77d(0x5fd))return _0x34b77d(0x5fd);if(VisuMZ['DamageStyles'][_0x47091c])return _0x47091c;}const _0x17bbde=VisuMZ['BattleCore'][_0x34b77d(0x1ea)]['Damage']['DefaultDamageStyle'][_0x34b77d(0x1d3)]()[_0x34b77d(0x616)]();if(VisuMZ[_0x34b77d(0xf3)][_0x17bbde])return _0x17bbde;return _0x34b77d(0x5fd);},DataManager['getStypeIdWithName']=function(_0x5d0a4a){const _0x1014b0=_0x47679c;_0x5d0a4a=_0x5d0a4a[_0x1014b0(0x1d3)]()[_0x1014b0(0x616)](),this[_0x1014b0(0x1ff)]=this[_0x1014b0(0x1ff)]||{};if(this[_0x1014b0(0x1ff)][_0x5d0a4a])return this[_0x1014b0(0x1ff)][_0x5d0a4a];for(let _0x10bafa=0x1;_0x10bafa<0x64;_0x10bafa++){if(!$dataSystem['skillTypes'][_0x10bafa])continue;let _0x1cd6ea=$dataSystem[_0x1014b0(0x7ce)][_0x10bafa][_0x1014b0(0x1d3)]()[_0x1014b0(0x616)]();_0x1cd6ea=_0x1cd6ea[_0x1014b0(0x6c5)](/\x1I\[(\d+)\]/gi,''),_0x1cd6ea=_0x1cd6ea[_0x1014b0(0x6c5)](/\\I\[(\d+)\]/gi,''),this[_0x1014b0(0x1ff)][_0x1cd6ea]=_0x10bafa;}return this[_0x1014b0(0x1ff)][_0x5d0a4a]||0x0;},DataManager[_0x47679c(0x7a9)]=function(_0x46a88e){const _0xa81e6e=_0x47679c;_0x46a88e=_0x46a88e[_0xa81e6e(0x1d3)]()[_0xa81e6e(0x616)](),this[_0xa81e6e(0x12d)]=this[_0xa81e6e(0x12d)]||{};if(this[_0xa81e6e(0x12d)][_0x46a88e])return this[_0xa81e6e(0x12d)][_0x46a88e];for(const _0x1b5baa of $dataSkills){if(!_0x1b5baa)continue;this[_0xa81e6e(0x12d)][_0x1b5baa[_0xa81e6e(0x620)][_0xa81e6e(0x1d3)]()['trim']()]=_0x1b5baa['id'];}return this[_0xa81e6e(0x12d)][_0x46a88e]||0x0;},DataManager[_0x47679c(0x7c0)]=function(_0x1f6f26){const _0x2a440d=_0x47679c;_0x1f6f26=_0x1f6f26[_0x2a440d(0x1d3)]()[_0x2a440d(0x616)](),this['_enemyIDs']=this[_0x2a440d(0x819)]||{};if(this[_0x2a440d(0x819)][_0x1f6f26])return this[_0x2a440d(0x819)][_0x1f6f26];for(const _0xe7ee5b of $dataEnemies){if(!_0xe7ee5b)continue;this[_0x2a440d(0x819)][_0xe7ee5b[_0x2a440d(0x620)][_0x2a440d(0x1d3)]()['trim']()]=_0xe7ee5b['id'];}return this[_0x2a440d(0x819)][_0x1f6f26]||0x0;},DataManager[_0x47679c(0x142)]=function(_0xaffad9){const _0x445874=_0x47679c;_0xaffad9=_0xaffad9[_0x445874(0x1d3)]()[_0x445874(0x616)](),this[_0x445874(0x8b1)]=this[_0x445874(0x8b1)]||{};if(this[_0x445874(0x8b1)][_0xaffad9])return this[_0x445874(0x8b1)][_0xaffad9];for(let _0x349cf1=0x1;_0x349cf1<0x64;_0x349cf1++){if(!$dataSystem[_0x445874(0x5c0)][_0x349cf1])continue;let _0x1d7e88=$dataSystem[_0x445874(0x5c0)][_0x349cf1][_0x445874(0x1d3)]()['trim']();_0x1d7e88=_0x1d7e88[_0x445874(0x6c5)](/\x1I\[(\d+)\]/gi,''),_0x1d7e88=_0x1d7e88[_0x445874(0x6c5)](/\\I\[(\d+)\]/gi,''),this[_0x445874(0x8b1)][_0x1d7e88]=_0x349cf1;}return this[_0x445874(0x8b1)][_0x445874(0x7e1)]=0x0,this[_0x445874(0x8b1)][_0xaffad9]||0x0;},DataManager[_0x47679c(0x454)]=function(_0x43ece8){const _0x1bf5db=_0x47679c,_0x508fba='\x5cI[%1]%2';let _0x1543bf=_0x43ece8[_0x1bf5db(0x3d5)],_0x1ac20e=_0x43ece8[_0x1bf5db(0x620)];const _0x581d60=_0x43ece8['note'];return _0x581d60[_0x1bf5db(0x503)](/<DISPLAY ICON: (\d+)>/i)&&(_0x1543bf=Number(RegExp['$1'])),_0x581d60[_0x1bf5db(0x503)](/<DISPLAY TEXT: (.*)>/i)&&(_0x1ac20e=String(RegExp['$1'])),_0x508fba['format'](_0x1543bf,_0x1ac20e);},DataManager['battleCommandName']=function(_0x4a9d7d){const _0x354f2e=_0x47679c;return _0x4a9d7d[_0x354f2e(0x4d1)][_0x354f2e(0x503)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0x4a9d7d[_0x354f2e(0x620)];},DataManager[_0x47679c(0x615)]=function(_0x276ee7){const _0x1c09b8=_0x47679c;return _0x276ee7[_0x1c09b8(0x4d1)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x276ee7['iconIndex'];},DataManager['swapEnemyIDs']=function(_0x16b037){const _0x327c65=_0x47679c,_0x41d96e=$dataEnemies[_0x16b037];if(_0x41d96e){if(_0x41d96e['note'][_0x327c65(0x503)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0xbb87b8=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x327c65(0x3fc)](''),_0x4bcf82=this[_0x327c65(0x44f)](_0xbb87b8);_0x16b037=this['getEnemyIdWithName'](_0x4bcf82)||_0x16b037,_0x16b037=DataManager[_0x327c65(0x61e)](_0x16b037);}}return _0x16b037;},DataManager['processRandomizedData']=function(_0x5450ba){const _0x71e7e8=_0x47679c;let _0x58a43e=0x0;const _0x4e29ef={};for(const _0x315498 of _0x5450ba){if(_0x315498[_0x71e7e8(0x503)](/(.*):[ ](\d+)/i)){const _0x50b4aa=String(RegExp['$1'])[_0x71e7e8(0x616)](),_0x42f43b=Number(RegExp['$2']);_0x4e29ef[_0x50b4aa]=_0x42f43b,_0x58a43e+=_0x42f43b;}else{if(_0x315498[_0x71e7e8(0x503)](/(.*):[ ](\d+\.?\d+)/i)){const _0x4497a4=String(RegExp['$1'])[_0x71e7e8(0x616)](),_0x183cfe=Number(RegExp['$2']);_0x4e29ef[_0x4497a4]=_0x183cfe,_0x58a43e+=_0x183cfe;}else _0x315498!==''&&(_0x4e29ef[_0x315498]=0x1,_0x58a43e++);}}if(_0x58a43e<=0x0)return'';let _0x24bfb0=Math[_0x71e7e8(0x47f)]()*_0x58a43e;for(const _0x44125b in _0x4e29ef){_0x24bfb0-=_0x4e29ef[_0x44125b];if(_0x24bfb0<=0x0)return _0x44125b;}return'';},DataManager['checkAutoCustomActionSequenceNotetagEffect']=function(_0x1b4681){const _0x1dbd14=_0x47679c;if(!_0x1b4681)return![];if(!VisuMZ[_0x1dbd14(0x2b8)][_0x1dbd14(0x1ea)][_0x1dbd14(0x943)][_0x1dbd14(0x948)])return![];if(_0x1b4681[_0x1dbd14(0x4d1)]['match'](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1b4681[_0x1dbd14(0x4d1)][_0x1dbd14(0x503)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x4666d6 of _0x1b4681[_0x1dbd14(0x156)]){if(!_0x4666d6)continue;if(_0x4666d6[_0x1dbd14(0x107)]===Game_Action[_0x1dbd14(0x43b)])return!![];}return![];},DataManager[_0x47679c(0x6a7)]=function(_0x1e047f){const _0x1a1308=_0x47679c,_0x2f85fa=$dataTroops[_0x1e047f];if(!_0x2f85fa)return'';let _0x59cce4='';_0x59cce4+=_0x2f85fa[_0x1a1308(0x620)];for(const _0x28d6ea of _0x2f85fa[_0x1a1308(0x6d7)]){for(const _0x1e2c6b of _0x28d6ea[_0x1a1308(0x926)]){[0x6c,0x198]['includes'](_0x1e2c6b[_0x1a1308(0x107)])&&(_0x59cce4+='\x0a',_0x59cce4+=_0x1e2c6b[_0x1a1308(0x157)][0x0]);}}return _0x59cce4;},ConfigManager['autoBattleAtStart']=ConfigManager[_0x47679c(0x877)]??![],ConfigManager['autoBattleUseSkills']=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x47679c(0x1e4)]=ConfigManager[_0x47679c(0x1e4)]??!![],VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x5c5)]=ConfigManager['makeData'],ConfigManager['makeData']=function(){const _0x3d9174=_0x47679c,_0x57c3cc=VisuMZ['BattleCore'][_0x3d9174(0x5c5)][_0x3d9174(0x22f)](this);return _0x57c3cc[_0x3d9174(0x877)]=this[_0x3d9174(0x877)],_0x57c3cc[_0x3d9174(0x289)]=this[_0x3d9174(0x289)],_0x57c3cc['visualHpGauge']=this[_0x3d9174(0x1e4)],_0x57c3cc;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x72d)]=ConfigManager[_0x47679c(0x35b)],ConfigManager[_0x47679c(0x35b)]=function(_0x5d2624){const _0x176890=_0x47679c;VisuMZ['BattleCore'][_0x176890(0x72d)][_0x176890(0x22f)](this,_0x5d2624),_0x176890(0x877)in _0x5d2624?this[_0x176890(0x877)]=_0x5d2624[_0x176890(0x877)]:this['autoBattleAtStart']=![],_0x176890(0x289)in _0x5d2624?this[_0x176890(0x289)]=_0x5d2624['autoBattleUseSkills']:this['autoBattleUseSkills']=![],_0x176890(0x1e4)in _0x5d2624?this['visualHpGauge']=_0x5d2624['visualHpGauge']:this['visualHpGauge']=!![];},VisuMZ[_0x47679c(0x2b8)]['BattleManager_initMembers']=BattleManager[_0x47679c(0x6b1)],BattleManager[_0x47679c(0x6b1)]=function(){const _0x28fb22=_0x47679c;VisuMZ[_0x28fb22(0x2b8)][_0x28fb22(0x2b7)]['call'](this),this['_forcedBattlers']=[];},BattleManager[_0x47679c(0x111)]=function(){const _0x4b85c7=_0x47679c;if(!SceneManager[_0x4b85c7(0x75d)]())return;const _0x41ef84=SceneManager['_scene']['_statusWindow'];if(_0x41ef84)_0x41ef84[_0x4b85c7(0x88e)]();},BattleManager[_0x47679c(0x621)]=function(){const _0x46924f=_0x47679c;if(BattleManager[_0x46924f(0x8ad)]())return _0x46924f(0x26e);return _0x46924f(0x345);},BattleManager[_0x47679c(0x8b2)]=function(_0x4dc945){const _0x3387a9=_0x47679c;return _0x4dc945=_0x4dc945[_0x3387a9(0x1d3)]()[_0x3387a9(0x616)](),this[_0x3387a9(0x621)]()===_0x4dc945;},BattleManager[_0x47679c(0x532)]=function(){const _0x22861e=_0x47679c;return this[_0x22861e(0x8b2)](_0x22861e(0x345));},BattleManager[_0x47679c(0x383)]=function(){return this['isDTB']();},BattleManager['isTickBased']=function(){return!this['isTurnBased']();},BattleManager[_0x47679c(0x270)]=function(){return!this['isTurnBased']()&&!this['isTickBased']();},BattleManager[_0x47679c(0x348)]=function(_0x3eca83){const _0x15b946=_0x47679c;$gameParty[_0x15b946(0x348)](_0x3eca83),$gameTroop[_0x15b946(0x348)](_0x3eca83);},VisuMZ[_0x47679c(0x2b8)]['BattleManager_startBattle']=BattleManager[_0x47679c(0x716)],BattleManager[_0x47679c(0x716)]=function(){const _0x319d35=_0x47679c;this[_0x319d35(0x539)]=![],this[_0x319d35(0x1b7)]=ConfigManager[_0x319d35(0x877)],this['processBattleCoreJS'](_0x319d35(0x35f)),VisuMZ[_0x319d35(0x2b8)][_0x319d35(0x41a)][_0x319d35(0x22f)](this),this[_0x319d35(0x348)]('PostStartBattleJS');},BattleManager['processPostBattleCommonEvents']=function(_0x311e0d){const _0x630015=_0x47679c,_0x5095a2=VisuMZ['BattleCore']['Settings'][_0x630015(0x302)];_0x5095a2[_0x630015(0x1c2)]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x5095a2[_0x630015(0x1c2)])&&$gameTemp['reserveCommonEvent'](_0x5095a2[_0x630015(0x1c2)]);const _0x34cb9b='%1Event'[_0x630015(0x151)](_0x311e0d);_0x5095a2[_0x34cb9b]&&VisuMZ[_0x630015(0x2b8)][_0x630015(0x45a)](_0x5095a2[_0x34cb9b])&&$gameTemp[_0x630015(0x423)](_0x5095a2[_0x34cb9b]);},VisuMZ['BattleCore'][_0x47679c(0x319)]=BattleManager['processVictory'],BattleManager[_0x47679c(0x560)]=function(){const _0x3e8584=_0x47679c;this[_0x3e8584(0x348)](_0x3e8584(0x58c)),VisuMZ[_0x3e8584(0x2b8)][_0x3e8584(0x319)][_0x3e8584(0x22f)](this),this['processPostBattleCommonEvents'](_0x3e8584(0x6f0));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x4ae)]=BattleManager[_0x47679c(0x2f5)],BattleManager[_0x47679c(0x2f5)]=function(){const _0x552004=_0x47679c;this[_0x552004(0x348)]('BattleDefeatJS'),VisuMZ[_0x552004(0x2b8)][_0x552004(0x4ae)][_0x552004(0x22f)](this),this[_0x552004(0x7fa)]('Defeat');},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x41b)]=BattleManager[_0x47679c(0x64c)],BattleManager[_0x47679c(0x64c)]=function(_0x552fe3){const _0x135144=_0x47679c;this['_endBattle']=!![],this[_0x135144(0x1b7)]=![],this[_0x135144(0x348)]('PreEndBattleJS'),VisuMZ[_0x135144(0x2b8)]['BattleManager_endBattle'][_0x135144(0x22f)](this,_0x552fe3),this['processBattleCoreJS'](_0x135144(0x572));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x811)]=BattleManager[_0x47679c(0x7ca)],BattleManager['startTurn']=function(){const _0x60bb56=_0x47679c;if(this[_0x60bb56(0x383)]())this[_0x60bb56(0x348)](_0x60bb56(0x1fd));VisuMZ[_0x60bb56(0x2b8)][_0x60bb56(0x811)]['call'](this);if(this[_0x60bb56(0x383)]())this[_0x60bb56(0x348)](_0x60bb56(0x204));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x53e)]=BattleManager[_0x47679c(0x303)],BattleManager[_0x47679c(0x303)]=function(){const _0x27d165=_0x47679c,_0x2f36f6=this[_0x27d165(0x8f5)][_0x27d165(0x581)](),_0x2d7e08=this[_0x27d165(0x8f5)];_0x2f36f6&&_0x2f36f6[_0x27d165(0x8e3)]()===_0x2d7e08&&_0x2f36f6[_0x27d165(0x21e)]('PreStartActionJS'),VisuMZ[_0x27d165(0x2b8)][_0x27d165(0x53e)]['call'](this),_0x2f36f6&&_0x2f36f6[_0x27d165(0x8e3)]()===_0x2d7e08&&_0x2f36f6['actionBattleCoreJS']('PostStartActionJS');},VisuMZ[_0x47679c(0x2b8)]['BattleManager_endAction']=BattleManager[_0x47679c(0x6f6)],BattleManager[_0x47679c(0x6f6)]=function(){const _0xe8c815=_0x47679c,_0x4e9cb4=this[_0xe8c815(0x4c7)],_0x414585=this[_0xe8c815(0x8f5)];_0x4e9cb4&&_0x4e9cb4!==this[_0xe8c815(0x160)]&&_0x4e9cb4[_0xe8c815(0x8e3)]()===_0x414585&&_0x4e9cb4[_0xe8c815(0x21e)](_0xe8c815(0x68a)),VisuMZ[_0xe8c815(0x2b8)]['BattleManager_endAction'][_0xe8c815(0x22f)](this),_0x4e9cb4&&_0x4e9cb4!==this['_lastAction']&&_0x4e9cb4[_0xe8c815(0x8e3)]()===_0x414585&&_0x4e9cb4[_0xe8c815(0x21e)](_0xe8c815(0x286)),this[_0xe8c815(0x822)](this[_0xe8c815(0x85a)]()),this[_0xe8c815(0x160)]=this[_0xe8c815(0x4c7)];},BattleManager['refreshBattlerMotions']=function(_0x2abd1d){const _0x42c464=_0x47679c;for(const _0x2b9d4d of _0x2abd1d){if(!_0x2b9d4d)continue;if(!_0x2b9d4d[_0x42c464(0x828)]())continue;_0x2b9d4d[_0x42c464(0x828)]()[_0x42c464(0x8af)]();}},BattleManager['updateAction']=function(){const _0x340f7b=_0x47679c;!this[_0x340f7b(0x269)][_0x340f7b(0x7df)]()&&this[_0x340f7b(0x6f6)]();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x74f)]=function(){const _0x2f7888=_0x47679c;this[_0x2f7888(0x85b)]();if(Imported[_0x2f7888(0x2b6)]){const _0x39a78c=VisuMZ[_0x2f7888(0x8c7)][_0x2f7888(0x1ea)][_0x2f7888(0x8ed)];_0x39a78c&&_0x39a78c['ActionEndUpdate']===![]&&this[_0x2f7888(0x5eb)](0x1);}else this[_0x2f7888(0x5eb)](0x1);this['removeBuffsAuto']();},BattleManager[_0x47679c(0x645)]=function(){const _0x303b1b=_0x47679c;this['_escapeRatio']=VisuMZ[_0x303b1b(0x2b8)][_0x303b1b(0x1ea)]['Mechanics'][_0x303b1b(0x129)][_0x303b1b(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x4b1)]=BattleManager[_0x47679c(0x64b)],BattleManager['onEscapeSuccess']=function(){const _0xeb8e60=_0x47679c;this[_0xeb8e60(0x348)](_0xeb8e60(0x3b1)),BattleManager['_spriteset'][_0xeb8e60(0x17c)](),VisuMZ[_0xeb8e60(0x2b8)][_0xeb8e60(0x4b1)]['call'](this),this[_0xeb8e60(0x7fa)]('EscapeSuccess');},VisuMZ[_0x47679c(0x2b8)]['BattleManager_onEscapeFailure']=BattleManager[_0x47679c(0x67e)],BattleManager[_0x47679c(0x67e)]=function(){const _0x16b088=_0x47679c;this['processBattleCoreJS'](_0x16b088(0x2ab));const _0x2830b3=this['_escapeRatio'];VisuMZ[_0x16b088(0x2b8)]['BattleManager_onEscapeFailure']['call'](this),this[_0x16b088(0x11a)]=_0x2830b3+VisuMZ[_0x16b088(0x2b8)][_0x16b088(0x1ea)][_0x16b088(0x302)][_0x16b088(0x4c8)][_0x16b088(0x22f)](this),this[_0x16b088(0x7fa)](_0x16b088(0x4aa));},BattleManager[_0x47679c(0x229)]=function(){const _0x418689=_0x47679c;let _0x1e3c57=![];if(this[_0x418689(0x4a5)]())for(const _0x47b476 of $gameTroop[_0x418689(0x60f)]()){this[_0x418689(0x269)][_0x418689(0x6b4)]('addText',TextManager[_0x418689(0x253)][_0x418689(0x151)](_0x47b476)),this[_0x418689(0x269)][_0x418689(0x6b4)](_0x418689(0x4f7)),_0x1e3c57=!![];}if(this['_preemptive'])this[_0x418689(0x269)][_0x418689(0x6b4)](_0x418689(0xe0),TextManager[_0x418689(0x84f)][_0x418689(0x151)]($gameParty['name']())),this[_0x418689(0x269)][_0x418689(0x6b4)](_0x418689(0x4f7));else this['_surprise']&&(this[_0x418689(0x269)][_0x418689(0x6b4)](_0x418689(0xe0),TextManager['surprise'][_0x418689(0x151)]($gameParty['name']())),this[_0x418689(0x269)][_0x418689(0x6b4)](_0x418689(0x4f7)));_0x1e3c57&&(this[_0x418689(0x269)][_0x418689(0x6b4)](_0x418689(0x4f7)),this[_0x418689(0x269)][_0x418689(0x6b4)](_0x418689(0x78c))),this[_0x418689(0x8ad)]()&&this[_0x418689(0x711)]()&&(this[_0x418689(0x67f)]=![]);},BattleManager[_0x47679c(0x4a5)]=function(){const _0x269d4a=_0x47679c;if(BattleManager[_0x269d4a(0x1b7)])return![];return VisuMZ[_0x269d4a(0x2b8)][_0x269d4a(0x1ea)]['Enemy'][_0x269d4a(0x81d)];},VisuMZ['BattleCore'][_0x47679c(0x3e5)]=BattleManager['startInput'],BattleManager[_0x47679c(0x1f7)]=function(){const _0x3c2350=_0x47679c;VisuMZ[_0x3c2350(0x2b8)]['BattleManager_startInput'][_0x3c2350(0x22f)](this),this[_0x3c2350(0x532)]()&&this['isSkipPartyCommandWindow']()&&!this[_0x3c2350(0x6f5)]&&$gameParty['canInput']()&&this['selectNextCommand']();},BattleManager[_0x47679c(0x711)]=function(){const _0x4b29e2=_0x47679c;return VisuMZ[_0x4b29e2(0x2b8)][_0x4b29e2(0x1ea)]['PartyCmd'][_0x4b29e2(0x46d)];},BattleManager[_0x47679c(0x6a0)]=function(){const _0x62c4fc=_0x47679c;this[_0x62c4fc(0x427)]()&&this[_0x62c4fc(0x915)]();},VisuMZ['BattleCore'][_0x47679c(0x336)]=Scene_Battle['prototype'][_0x47679c(0x55e)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x55e)]=function(){const _0x17a92d=_0x47679c;VisuMZ[_0x17a92d(0x2b8)][_0x17a92d(0x336)][_0x17a92d(0x22f)](this),BattleManager[_0x17a92d(0x8ad)]()&&BattleManager[_0x17a92d(0x67f)]&&(BattleManager[_0x17a92d(0x67f)]=![],this['actorCommandCancelTPB']());},BattleManager[_0x47679c(0x710)]=function(_0x3933f6,_0xb56f93){const _0x57211d=_0x47679c;this[_0x57211d(0x4c7)]['_reflectionTarget']=_0xb56f93,this['_logWindow'][_0x57211d(0x8d8)](_0xb56f93),this[_0x57211d(0x269)][_0x57211d(0x166)](_0x3933f6,this[_0x57211d(0x4c7)]),this[_0x57211d(0x4c7)][_0x57211d(0x6b7)](_0x3933f6),this[_0x57211d(0x269)][_0x57211d(0x678)](_0x3933f6,_0x3933f6);},VisuMZ['BattleCore'][_0x47679c(0x472)]=BattleManager[_0x47679c(0x22d)],BattleManager['makeActionOrders']=function(){const _0xb5cc1c=_0x47679c;VisuMZ[_0xb5cc1c(0x2b8)][_0xb5cc1c(0x472)][_0xb5cc1c(0x22f)](this),this['_actionBattlers']=this['_actionBattlers'][_0xb5cc1c(0x36c)](_0x12e86f=>_0x12e86f&&_0x12e86f[_0xb5cc1c(0x7d2)]());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x747)]=BattleManager[_0x47679c(0x607)],BattleManager[_0x47679c(0x607)]=function(_0xd52f60){const _0x1098d7=_0x47679c;if(this[_0x1098d7(0x16f)]===_0x1098d7(0x56d))this[_0x1098d7(0x8e9)]();else this[_0x1098d7(0x16f)]===_0x1098d7(0x6f9)?this[_0x1098d7(0x1a0)]():VisuMZ['BattleCore']['BattleManager_updatePhase'][_0x1098d7(0x22f)](this,_0xd52f60);},BattleManager['prepareCustomActionSequence']=function(){const _0x107c63=_0x47679c;this['_allTargets']=this[_0x107c63(0x83f)][_0x107c63(0x36d)](0x0),this[_0x107c63(0x713)]=0x0,this[_0x107c63(0x1a4)]=this[_0x107c63(0x5d7)][0x0]||null,this['_phase']=_0x107c63(0x56d);},BattleManager[_0x47679c(0x8e9)]=function(){const _0x2fd72f=_0x47679c;!this[_0x2fd72f(0x826)]()&&!this[_0x2fd72f(0x269)][_0x2fd72f(0x7df)]()&&(this[_0x2fd72f(0x16f)]=_0x2fd72f(0x123));},BattleManager['forceAction']=function(_0xf298bb){const _0x44336c=_0x47679c;this[_0x44336c(0x60b)][_0x44336c(0x3fc)](_0xf298bb);if(_0xf298bb===this[_0x44336c(0x8f5)])return;const _0x31281f=JsonEx['makeDeepCopy'](_0xf298bb[_0x44336c(0x581)]());this[_0x44336c(0x30d)][_0x44336c(0x6b4)]([_0xf298bb,_0x31281f]);},BattleManager['processForcedAction']=function(){},BattleManager[_0x47679c(0x54f)]=function(){const _0x1b4f2e=_0x47679c;if(this[_0x1b4f2e(0x8ad)]())this[_0x1b4f2e(0x16f)]=_0x1b4f2e(0x45e);else this[_0x1b4f2e(0x30d)][_0x1b4f2e(0x42d)]>0x0?this[_0x1b4f2e(0x16f)]=_0x1b4f2e(0x45e):this[_0x1b4f2e(0x1f7)]();},BattleManager[_0x47679c(0x759)]=function(){const _0x155cec=_0x47679c,_0x39577f=this[_0x155cec(0x8f5)];_0x39577f&&this['isTpb']()&&_0x39577f['setActionState']('undecided');for(;;){const _0x562633=this[_0x155cec(0x813)]();if(!_0x562633)return null;if(_0x562633['isBattleMember']()&&_0x562633[_0x155cec(0x8e8)]())return _0x562633;}},BattleManager[_0x47679c(0x813)]=function(){const _0x4ba090=_0x47679c;if(this[_0x4ba090(0x30d)][_0x4ba090(0x42d)]>0x0){const _0x5d744b=this[_0x4ba090(0x30d)][_0x4ba090(0x2a4)](),_0xb6be46=_0x5d744b[0x0];return _0xb6be46[_0x4ba090(0x341)]=_0xb6be46[_0x4ba090(0x341)]||[],_0xb6be46['_actions'][0x0]=_0x5d744b[0x1],_0xb6be46;}else return this[_0x4ba090(0x60b)][_0x4ba090(0x2a4)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x495)]=Game_Battler['prototype'][_0x47679c(0x6f9)],Game_Battler['prototype'][_0x47679c(0x6f9)]=function(_0x524c10,_0x2e4b74){const _0xc645b7=_0x47679c;VisuMZ[_0xc645b7(0x2b8)][_0xc645b7(0x495)][_0xc645b7(0x22f)](this,_0x524c10,_0x2e4b74),this[_0xc645b7(0x341)][this[_0xc645b7(0x341)][_0xc645b7(0x42d)]-0x1]['_forceAction']=!![];},Game_Interpreter[_0x47679c(0x63e)][_0x47679c(0x1ad)]=function(_0x50ad94){const _0x27aa49=_0x47679c;return this[_0x27aa49(0x180)](_0x50ad94[0x0],_0x50ad94[0x1],_0x10ebf2=>{const _0xa22857=_0x27aa49;!_0x10ebf2['isDeathStateAffected']()&&(_0x10ebf2[_0xa22857(0x6f9)](_0x50ad94[0x2],_0x50ad94[0x3]),BattleManager[_0xa22857(0x6f9)](_0x10ebf2));}),!![];},VisuMZ['BattleCore']['Game_Battler_makeSpeed']=Game_Battler[_0x47679c(0x63e)][_0x47679c(0x451)],Game_Battler[_0x47679c(0x63e)]['makeSpeed']=function(){const _0x2f461c=_0x47679c;VisuMZ[_0x2f461c(0x2b8)][_0x2f461c(0x272)][_0x2f461c(0x22f)](this),this[_0x2f461c(0x341)]['length']<=0x0&&(this[_0x2f461c(0x820)]=Number[_0x2f461c(0x8fd)]);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x72f)]=BattleManager[_0x47679c(0x915)],BattleManager[_0x47679c(0x915)]=function(){const _0x200de6=_0x47679c;this[_0x200de6(0x8ad)]()?this[_0x200de6(0x248)]():VisuMZ[_0x200de6(0x2b8)]['BattleManager_selectNextCommand'][_0x200de6(0x22f)](this);},BattleManager[_0x47679c(0x248)]=function(){const _0x4e4cc4=_0x47679c;if(this[_0x4e4cc4(0x315)]){if(this[_0x4e4cc4(0x315)]['selectNextCommand']())return;this['finishActorInput'](),this['checkTpbInputClose'](),!this[_0x4e4cc4(0x8f5)]&&!this['_currentActor']&&SceneManager[_0x4e4cc4(0x56c)][_0x4e4cc4(0x481)]();}else!this['_subject']&&this[_0x4e4cc4(0x18a)]();},BattleManager['checkTpbInputClose']=function(){const _0x5be2fe=_0x47679c;(!this['isPartyTpbInputtable']()||this[_0x5be2fe(0x3fd)]())&&(this[_0x5be2fe(0x86d)]&&(!$gameParty['battleMembers']()[_0x5be2fe(0x3f6)](this[_0x5be2fe(0x86d)])&&(this['_tpbSceneChangeCacheActor']=null)),!this[_0x5be2fe(0x86d)]?(this[_0x5be2fe(0x633)](),this[_0x5be2fe(0x315)]=null,this[_0x5be2fe(0x8e7)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x47679c(0x858)]=function(){const _0x3f8f75=_0x47679c;!$gameParty[_0x3f8f75(0x8d4)]()[_0x3f8f75(0x3f6)](this[_0x3f8f75(0x86d)])&&(this[_0x3f8f75(0x86d)]=null),this['_tpbSceneChangeCacheActor']?(this[_0x3f8f75(0x315)]=this['_tpbSceneChangeCacheActor'],this['_currentActor'][_0x3f8f75(0x1f0)]=_0x3f8f75(0x571),this[_0x3f8f75(0x8e7)]=!![],this[_0x3f8f75(0x86d)]=null):(this[_0x3f8f75(0x633)](),this[_0x3f8f75(0x315)]=null,this[_0x3f8f75(0x8e7)]=![]);},VisuMZ['BattleCore'][_0x47679c(0xe9)]=BattleManager[_0x47679c(0x228)],BattleManager[_0x47679c(0x228)]=function(){const _0x900d45=_0x47679c;return this['_phase']===_0x900d45(0x56d)?this[_0x900d45(0x806)]():VisuMZ[_0x900d45(0x2b8)][_0x900d45(0xe9)][_0x900d45(0x22f)](this);},BattleManager[_0x47679c(0x806)]=function(){const _0x4cff80=_0x47679c;return this[_0x4cff80(0x70b)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x421)]=BattleManager[_0x47679c(0x633)],BattleManager[_0x47679c(0x633)]=function(){const _0x58bbef=_0x47679c;this[_0x58bbef(0x8ad)]()&&this[_0x58bbef(0x16f)]===_0x58bbef(0x369)&&(this[_0x58bbef(0x315)]=null),VisuMZ['BattleCore']['BattleManager_cancelActorInput'][_0x58bbef(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x238)]=BattleManager[_0x47679c(0x541)],BattleManager[_0x47679c(0x541)]=function(){const _0x4e6b87=_0x47679c,_0x231053=this[_0x4e6b87(0x315)];if(_0x231053&&!_0x231053[_0x4e6b87(0x541)]()){const _0x11d131=_0x231053['_actionInputIndex'];_0x231053[_0x4e6b87(0x341)][_0x11d131]=new Game_Action(_0x231053);}return VisuMZ[_0x4e6b87(0x2b8)][_0x4e6b87(0x238)][_0x4e6b87(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x40f)]=BattleManager[_0x47679c(0x7bb)],BattleManager[_0x47679c(0x7bb)]=function(_0x44f330){const _0x5c69e5=_0x47679c;if(this['_action'][_0x5c69e5(0x871)]())return![];return VisuMZ[_0x5c69e5(0x2b8)][_0x5c69e5(0x40f)][_0x5c69e5(0x22f)](this,_0x44f330);},SceneManager['isSceneBattle']=function(){const _0x39ac0d=_0x47679c;return this[_0x39ac0d(0x56c)]&&this[_0x39ac0d(0x56c)][_0x39ac0d(0x365)]===Scene_Battle;},SceneManager[_0x47679c(0x2c4)]=function(){const _0x3864c4=_0x47679c;return Spriteset_Battle[_0x3864c4(0x63e)][_0x3864c4(0x773)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x5913c0=_0x47679c;if(SceneManager[_0x5913c0(0x5c2)](Scene_Options))return!![];return![];},SceneManager[_0x47679c(0x7c8)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x47679c(0x80e)]=function(_0xeb9654){const _0x4bafbf=_0x47679c;if(!SceneManager[_0x4bafbf(0x75d)]())return!![];const _0x18411a=[_0x4bafbf(0x14e),_0x4bafbf(0x662)];return _0x18411a[_0x4bafbf(0x3f6)](_0xeb9654[_0x4bafbf(0x620)]);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x8b0)]=SceneManager['push'],SceneManager[_0x47679c(0x6b4)]=function(_0x211f63){const _0x35f330=_0x47679c;if(!SceneManager['checkSceneBattleTransitionable'](_0x211f63))return this[_0x35f330(0x105)](_0x211f63);VisuMZ[_0x35f330(0x2b8)][_0x35f330(0x8b0)][_0x35f330(0x22f)](this,_0x211f63);},SceneManager['displayBattleCoreTransitionErrorMsg']=function(_0x5e8184){const _0x2303ea=_0x47679c;if(!$gameTemp[_0x2303ea(0x209)]())return;if(this[_0x2303ea(0x712)])return;this['_displayBattleCoreTransitionErrorMsg']=!![];let _0x1523fd='';_0x1523fd+='VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing',_0x1523fd+=_0x2303ea(0x5ca)[_0x2303ea(0x151)](_0x5e8184[_0x2303ea(0x620)]),alert(_0x1523fd);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x118)]=Game_Temp['prototype']['requestAnimation'],Game_Temp[_0x47679c(0x63e)][_0x47679c(0x6ec)]=function(_0x512576,_0x4a0382,_0x3dc245){const _0x3bd242=_0x47679c;_0x512576=_0x512576[_0x3bd242(0x36c)]((_0x4ab1df,_0x32a295,_0x477811)=>_0x477811['indexOf'](_0x4ab1df)===_0x32a295),SceneManager[_0x3bd242(0x75d)]()&&SceneManager[_0x3bd242(0x2c4)]()&&(_0x3dc245=!_0x3dc245),VisuMZ[_0x3bd242(0x2b8)][_0x3bd242(0x118)]['call'](this,_0x512576,_0x4a0382,_0x3dc245),SceneManager['isSceneBattle']()&&BattleManager[_0x3bd242(0x610)]['processAnimationRequests']();},Game_Temp['prototype'][_0x47679c(0x62f)]=function(_0x1c70b3){this['_lastPluginCommandInterpreter']=_0x1c70b3;},Game_Temp['prototype']['getLastPluginCommandInterpreter']=function(){const _0x25f5f5=_0x47679c;return this[_0x25f5f5(0x116)];},Game_Temp[_0x47679c(0x63e)]['clearForcedGameTroopSettingsBattleCore']=function(){const _0x3b0552=_0x47679c;this[_0x3b0552(0x3bb)]=undefined;},Game_Temp[_0x47679c(0x63e)]['applyForcedGameTroopSettingsBattleCore']=function(_0x4b6aee){const _0x3ed480=_0x47679c;$gameMap&&$dataMap&&$dataMap['note']&&this[_0x3ed480(0x8b8)]($dataMap[_0x3ed480(0x4d1)]);const _0x42eb48=$dataTroops[_0x4b6aee];if(_0x42eb48){let _0x595deb=DataManager[_0x3ed480(0x6a7)](_0x42eb48['id']);this[_0x3ed480(0x8b8)](_0x595deb);}},Game_Temp[_0x47679c(0x63e)][_0x47679c(0x8b8)]=function(_0x54f368){const _0x3cf78e=_0x47679c;if(!_0x54f368)return;if(_0x54f368[_0x3cf78e(0x503)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0x1659de=String(RegExp['$1']);if(_0x1659de['match'](/DEFAULT/i))this[_0x3cf78e(0x3bb)]=_0x3cf78e(0x4e0);else{if(_0x1659de[_0x3cf78e(0x503)](/LIST/i))this[_0x3cf78e(0x3bb)]=_0x3cf78e(0x926);else{if(_0x1659de[_0x3cf78e(0x503)](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x1659de[_0x3cf78e(0x503)](/PORTRAIT/i))this[_0x3cf78e(0x3bb)]=_0x3cf78e(0x5d2);else{if(_0x1659de[_0x3cf78e(0x503)](/BORDER/i))this['_forcedBattleLayout']=_0x3cf78e(0x26c);else _0x1659de[_0x3cf78e(0x503)](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x3cf78e(0x793)]?this[_0x3cf78e(0x3bb)]=_0x3cf78e(0xfe):this[_0x3cf78e(0x3bb)]=_0x3cf78e(0x4e0));}}}}}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3a6)]=Game_System[_0x47679c(0x63e)]['initialize'],Game_System[_0x47679c(0x63e)][_0x47679c(0x736)]=function(){const _0x1e6af7=_0x47679c;VisuMZ[_0x1e6af7(0x2b8)][_0x1e6af7(0x3a6)][_0x1e6af7(0x22f)](this),this['initBattleCore']();},Game_System['prototype']['initBattleCore']=function(){const _0x4e3894=_0x47679c;this[_0x4e3894(0x664)]=this[_0x4e3894(0x664)]||[];},Game_System[_0x47679c(0x63e)][_0x47679c(0x865)]=function(){const _0x101215=_0x47679c;if(this[_0x101215(0x664)]===undefined)this[_0x101215(0x839)]();return this['_defeatedEnemies'];},Game_System[_0x47679c(0x63e)][_0x47679c(0x251)]=function(_0x527687){const _0x56f184=_0x47679c;if(this[_0x56f184(0x664)]===undefined)this[_0x56f184(0x839)]();if(!_0x527687)return;if(this[_0x56f184(0x664)]['includes'](_0x527687))return;this[_0x56f184(0x664)]['push'](_0x527687),this[_0x56f184(0x664)][_0x56f184(0x177)]((_0x335e76,_0x349e54)=>_0x335e76-_0x349e54);},VisuMZ['BattleCore'][_0x47679c(0x744)]=Game_BattlerBase[_0x47679c(0x63e)]['addNewState'],Game_BattlerBase['prototype']['addNewState']=function(_0x25886b){const _0x935242=_0x47679c,_0x5dad5c=this['isAlive'](),_0x4e7650=this[_0x935242(0x4ad)]();VisuMZ[_0x935242(0x2b8)][_0x935242(0x744)][_0x935242(0x22f)](this,_0x25886b),this['isEnemy']()&&_0x5dad5c&&this[_0x935242(0x40e)]()&&(this['_visualHpGauge_JustDied']=!this[_0x935242(0x42c)](),$gameSystem[_0x935242(0x251)](this[_0x935242(0x70a)]())),SceneManager[_0x935242(0x75d)]()&&_0x4e7650!==this[_0x935242(0x4ad)]()&&(this[_0x935242(0x828)]()&&this[_0x935242(0x828)]()[_0x935242(0x8af)]());},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x42c)]=function(){const _0x4fab86=_0x47679c;return $gameSystem[_0x4fab86(0x865)]()[_0x4fab86(0x3f6)](this[_0x4fab86(0x23d)]);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x155)]=Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x112)],Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x112)]=function(_0x4da353){const _0x924b44=_0x47679c;VisuMZ[_0x924b44(0x2b8)]['Game_BattlerBase_eraseState'][_0x924b44(0x22f)](this,_0x4da353),this['isEnemy']()&&_0x4da353===this[_0x924b44(0x201)]()&&this['isAlive']()&&(this[_0x924b44(0x58a)]=![]),!this[_0x924b44(0x496)]&&!this['_tempBattler']&&SceneManager[_0x924b44(0x75d)]()&&this[_0x924b44(0x64e)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x696)]=Game_Action[_0x47679c(0x63e)]['clear'],Game_Action['prototype'][_0x47679c(0x78c)]=function(){const _0x5cb766=_0x47679c;VisuMZ[_0x5cb766(0x2b8)][_0x5cb766(0x696)][_0x5cb766(0x22f)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x5cb766(0x91a)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this[_0x5cb766(0x262)]=_0x5cb766(0x4e0);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x250)]=function(_0x37e2c0,_0x285472){const _0x537bdb=_0x47679c;return VisuMZ[_0x537bdb(0x2b8)][_0x537bdb(0x1ea)][_0x537bdb(0x2c7)]['OverallFormulaJS'][_0x537bdb(0x22f)](this,_0x37e2c0,_0x285472);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x575)]=function(_0x1715df,_0x4d7aff){const _0x5f2bdd=_0x47679c;return VisuMZ['BattleCore'][_0x5f2bdd(0x1ea)][_0x5f2bdd(0x2c7)][_0x5f2bdd(0x32e)][_0x5f2bdd(0x22f)](this,_0x1715df,_0x4d7aff);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x26b)]=function(_0x2379d7,_0x503d6c){const _0x21f0fc=_0x47679c;return VisuMZ[_0x21f0fc(0x2b8)]['Settings'][_0x21f0fc(0x2c7)]['GuardFormulaJS'][_0x21f0fc(0x22f)](this,_0x2379d7,_0x503d6c);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6ff)]=Game_Action[_0x47679c(0x63e)]['itemHit'],Game_Action['prototype'][_0x47679c(0x1b6)]=function(_0x39f647){const _0x5f283d=_0x47679c,_0xfbdcc7=this[_0x5f283d(0x88b)]()[_0x5f283d(0x4d1)];if(_0xfbdcc7[_0x5f283d(0x503)](/<ALWAYS HIT>/i))return 0x1;else{if(_0xfbdcc7[_0x5f283d(0x503)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x30c690=VisuMZ[_0x5f283d(0x2b8)][_0x5f283d(0x6ff)][_0x5f283d(0x22f)](this,_0x39f647);return _0x30c690=this[_0x5f283d(0x91a)][_0x5f283d(0x2e5)]*_0x30c690+this[_0x5f283d(0x91a)][_0x5f283d(0x28c)],_0x30c690;}}},Game_Action[_0x47679c(0x63e)]['itemCri']=function(_0x246c25){const _0x1e0796=_0x47679c;if(!this[_0x1e0796(0x88b)]()[_0x1e0796(0x1e6)][_0x1e0796(0x6ef)])return 0x0;let _0x540edd=VisuMZ['BattleCore'][_0x1e0796(0x1ea)]['Damage']['CriticalHitRateJS'][_0x1e0796(0x22f)](this,_0x246c25);return _0x540edd=this[_0x1e0796(0x91a)]['criticalHitRate']*_0x540edd+this[_0x1e0796(0x91a)]['criticalHitFlat'],_0x540edd;},Game_Action[_0x47679c(0x63e)][_0x47679c(0x8a5)]=function(_0x5e92ea){const _0x253f83=_0x47679c;return _0x5e92ea=VisuMZ[_0x253f83(0x2b8)][_0x253f83(0x1ea)]['Damage']['CriticalHitMultiplier'][_0x253f83(0x22f)](this,_0x5e92ea),_0x5e92ea=this[_0x253f83(0x91a)][_0x253f83(0x43d)]*_0x5e92ea+this[_0x253f83(0x91a)][_0x253f83(0x38b)],_0x5e92ea;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x16b)]=Game_Action[_0x47679c(0x63e)][_0x47679c(0x67a)],Game_Action['prototype'][_0x47679c(0x67a)]=function(_0x2a71ef){const _0x891b44=_0x47679c;if(this['_customDamageFormula']!=='default')return this['customDamageFormula'](_0x2a71ef);else return DataManager[_0x891b44(0x456)](this[_0x891b44(0x88b)]())==='MANUAL'?VisuMZ[_0x891b44(0x2b8)][_0x891b44(0x16b)][_0x891b44(0x22f)](this,_0x2a71ef):this[_0x891b44(0x55f)](_0x2a71ef);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x16a)]=function(_0x23ec7f){const _0x440d53=_0x47679c;this[_0x440d53(0x262)]=_0x23ec7f;},Game_Action[_0x47679c(0x63e)][_0x47679c(0x4c0)]=function(_0x45d380){const _0x45e0c8=_0x47679c,_0xde2f90=this[_0x45e0c8(0x88b)](),_0x1829a2=_0xde2f90[_0x45e0c8(0x1e6)][_0x45e0c8(0x441)];_0xde2f90[_0x45e0c8(0x1e6)]['formula']=this[_0x45e0c8(0x262)];let _0xe8effa=VisuMZ[_0x45e0c8(0x2b8)][_0x45e0c8(0x16b)][_0x45e0c8(0x22f)](this,_0x45d380);return _0xde2f90['damage']['formula']=_0x1829a2,_0xe8effa;},Game_Action[_0x47679c(0x63e)][_0x47679c(0xfa)]=function(){const _0x3e7161=_0x47679c;if(this['item']()[_0x3e7161(0x4d1)][_0x3e7161(0x503)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x5615eb=String(RegExp['$1'])['toUpperCase']()[_0x3e7161(0x616)]();return _0x5615eb;}return _0x3e7161(0x5fd);},Game_Action[_0x47679c(0x63e)]['evalDamageFormulaBattleCore']=function(_0x3c348f){const _0x5e3099=_0x47679c,_0x4ff59b=DataManager[_0x5e3099(0x456)](this[_0x5e3099(0x88b)]()),_0x3d79dd=VisuMZ[_0x5e3099(0xf3)][_0x4ff59b];try{return _0x3d79dd[_0x5e3099(0x778)][_0x5e3099(0x22f)](this,_0x3c348f);}catch(_0x1811ac){if($gameTemp[_0x5e3099(0x209)]())console[_0x5e3099(0x1a8)](_0x1811ac);return VisuMZ[_0x5e3099(0x2b8)][_0x5e3099(0x16b)][_0x5e3099(0x22f)](this);}},Game_Action[_0x47679c(0x63e)][_0x47679c(0x537)]=function(_0x192783,_0x22f5e4){const _0x18a91b=_0x47679c;if(this[_0x18a91b(0x598)]())return _0x22f5e4;const _0x1cad21=this[_0x18a91b(0x8e3)](),_0x11cbb2=_0x192783;let _0x40edb6=[],_0x125973=[];_0x40edb6[_0x18a91b(0x6b4)](this[_0x18a91b(0x34a)][_0x18a91b(0x2ff)],this[_0x18a91b(0x34a)][_0x18a91b(0x651)]),_0x125973[_0x18a91b(0x6b4)](this[_0x18a91b(0x34a)][_0x18a91b(0x4f2)],this[_0x18a91b(0x34a)][_0x18a91b(0x5fe)]);const _0x310e54=this[_0x18a91b(0x2b0)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x590369=this[_0x18a91b(0x2b0)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x6ed811=this[_0x18a91b(0x2b0)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x5606f1=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x40edb6=_0x40edb6[_0x18a91b(0x4f9)](_0x11cbb2[_0x18a91b(0x891)]()[_0x18a91b(0x261)](_0x7702b6=>_0x7702b6&&_0x7702b6['note']['match'](_0x310e54)?Number(RegExp['$1']):0x0)),_0x125973=_0x125973[_0x18a91b(0x4f9)](_0x11cbb2['traitObjects']()[_0x18a91b(0x261)](_0x5d8c61=>_0x5d8c61&&_0x5d8c61[_0x18a91b(0x4d1)][_0x18a91b(0x503)](_0x590369)?Number(RegExp['$1'])/0x64:0x0)),_0x40edb6=_0x40edb6[_0x18a91b(0x4f9)](_0x1cad21[_0x18a91b(0x891)]()[_0x18a91b(0x261)](_0x5527e5=>_0x5527e5&&_0x5527e5[_0x18a91b(0x4d1)][_0x18a91b(0x503)](_0x6ed811)?Number(RegExp['$1']):0x0)),_0x125973=_0x125973['concat'](_0x1cad21[_0x18a91b(0x891)]()[_0x18a91b(0x261)](_0x1c51f1=>_0x1c51f1&&_0x1c51f1[_0x18a91b(0x4d1)][_0x18a91b(0x503)](_0x5606f1)?Number(RegExp['$1'])/0x64:0x0)),this[_0x18a91b(0x88b)]()['note'][_0x18a91b(0x503)](_0x6ed811)&&_0x40edb6[_0x18a91b(0x6b4)](Number(RegExp['$1'])),this['item']()[_0x18a91b(0x4d1)][_0x18a91b(0x503)](_0x5606f1)&&_0x125973[_0x18a91b(0x6b4)](Number(RegExp['$1'])),_0x22f5e4=_0x40edb6[_0x18a91b(0x836)]((_0x4b5bac,_0x35ee98)=>_0x4b5bac-_0x35ee98,_0x22f5e4),_0x22f5e4>0x0&&(_0x22f5e4=_0x125973[_0x18a91b(0x836)]((_0x168060,_0x18c5aa)=>_0x168060*(0x1-_0x18c5aa),_0x22f5e4)),_0x22f5e4;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x606)]=Game_Action[_0x47679c(0x63e)][_0x47679c(0x682)],Game_Action[_0x47679c(0x63e)][_0x47679c(0x682)]=function(_0x2e3ee0,_0x3f26ec){const _0x465e98=_0x47679c;_0x3f26ec=_0x3f26ec*this[_0x465e98(0x91a)]['damageRate'],_0x3f26ec+=this[_0x465e98(0x91a)][_0x465e98(0x6c9)]*(_0x3f26ec>=0x0?0x1:-0x1),_0x3f26ec=this[_0x465e98(0x86f)](_0x465e98(0x2d6),_0x2e3ee0,_0x3f26ec,![]),_0x3f26ec=this[_0x465e98(0x2a2)](_0x3f26ec),_0x3f26ec=Math[_0x465e98(0x23b)](_0x3f26ec),this[_0x465e98(0x2fe)]=_0x3f26ec,this[_0x465e98(0x779)]=this[_0x465e98(0x779)]||0x0,this[_0x465e98(0x779)]+=_0x3f26ec,VisuMZ['BattleCore'][_0x465e98(0x606)][_0x465e98(0x22f)](this,_0x2e3ee0,_0x3f26ec),this[_0x465e98(0x86f)](_0x465e98(0x271),_0x2e3ee0,_0x3f26ec,!![]);},Game_Action['prototype'][_0x47679c(0x2a2)]=function(_0x234eb6){const _0x32848a=_0x47679c;if(this[_0x32848a(0x601)]())return _0x234eb6;return _0x234eb6=this[_0x32848a(0x786)](_0x234eb6),_0x234eb6=this[_0x32848a(0x723)](_0x234eb6),_0x234eb6;},Game_Action[_0x47679c(0x63e)][_0x47679c(0x601)]=function(){const _0x5b6215=_0x47679c,_0x4077be=/<BYPASS DAMAGE CAP>/i;if(this[_0x5b6215(0x88b)]()[_0x5b6215(0x4d1)][_0x5b6215(0x503)](_0x4077be))return!![];if(this[_0x5b6215(0x8e3)]()[_0x5b6215(0x891)]()[_0x5b6215(0x51a)](_0x184686=>_0x184686&&_0x184686[_0x5b6215(0x4d1)]['match'](_0x4077be)))return!![];return!VisuMZ[_0x5b6215(0x2b8)][_0x5b6215(0x1ea)][_0x5b6215(0x2c7)][_0x5b6215(0x426)];},Game_Action[_0x47679c(0x63e)][_0x47679c(0x786)]=function(_0xeee53c){const _0x51b190=_0x47679c;if(!VisuMZ[_0x51b190(0x2b8)][_0x51b190(0x1ea)][_0x51b190(0x2c7)][_0x51b190(0x602)])return _0xeee53c;const _0x5cd9e7=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x51b190(0x88b)]()[_0x51b190(0x4d1)][_0x51b190(0x503)](_0x5cd9e7))return!![];if(this[_0x51b190(0x8e3)]()[_0x51b190(0x891)]()[_0x51b190(0x51a)](_0x5caf91=>_0x5caf91&&_0x5caf91[_0x51b190(0x4d1)][_0x51b190(0x503)](_0x5cd9e7)))return!![];const _0x25b8e3=_0xeee53c<0x0?-0x1:0x1;_0xeee53c=Math[_0x51b190(0x85c)](_0xeee53c);let _0x2c8886=this[_0x51b190(0x8e3)]()['softDamageCapRate']();this['item']()[_0x51b190(0x4d1)][_0x51b190(0x503)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x2c8886+=Number(RegExp['$1'])/0x64);_0x2c8886=_0x2c8886[_0x51b190(0x77b)](0.01,0x1);const _0x27a3c8=this[_0x51b190(0x4d2)](),_0x2bd34b=_0x2c8886*_0x27a3c8;if(_0xeee53c>_0x2bd34b&&_0x27a3c8>_0x2bd34b){_0xeee53c-=_0x2bd34b;const _0x58acb1=VisuMZ['BattleCore'][_0x51b190(0x1ea)][_0x51b190(0x2c7)][_0x51b190(0x720)],_0xe84710=Math[_0x51b190(0x766)](0x1-_0xeee53c/((_0x27a3c8-_0x2bd34b)*_0x58acb1+_0xeee53c),0.01);_0xeee53c*=_0xe84710,_0xeee53c+=_0x2bd34b;}return _0xeee53c*_0x25b8e3;},Game_Action[_0x47679c(0x63e)][_0x47679c(0x4d2)]=function(){const _0x57ecd4=_0x47679c;return this['item']()[_0x57ecd4(0x4d1)][_0x57ecd4(0x503)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0x57ecd4(0x8e3)]()[_0x57ecd4(0x3ee)]();},Game_Action[_0x47679c(0x63e)][_0x47679c(0x723)]=function(_0x12b6b7){const _0x337246=_0x47679c;let _0x5b7663=this[_0x337246(0x4d2)]();return _0x12b6b7[_0x337246(0x77b)](-_0x5b7663,_0x5b7663);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x12b)]=Game_Action[_0x47679c(0x63e)][_0x47679c(0x6b7)],Game_Action['prototype'][_0x47679c(0x6b7)]=function(_0x1c2fb6){const _0x4715f3=_0x47679c;this[_0x4715f3(0x86f)](_0x4715f3(0x2b1),_0x1c2fb6,0x0,!![]),VisuMZ[_0x4715f3(0x2b8)]['Game_Action_apply'][_0x4715f3(0x22f)](this,_0x1c2fb6),this[_0x4715f3(0x86f)](_0x4715f3(0x28d),_0x1c2fb6,this[_0x4715f3(0x2fe)]||0x0,!![]),this[_0x4715f3(0x58b)](_0x1c2fb6);},Game_Action[_0x47679c(0x63e)]['applyBattleCoreJS']=function(_0x315df6,_0x5b159b,_0x17d4ba,_0x295ffd){const _0x5a2caa=_0x47679c;if(this['_tempBattler']||this[_0x5a2caa(0x496)])return;_0x17d4ba=_0x17d4ba||0x0;const _0x46941e=_0x17d4ba,_0x55497c=VisuMZ[_0x5a2caa(0x2b8)][_0x5a2caa(0x1ea)][_0x5a2caa(0x302)],_0x2f671d=_0x315df6['format']('');if(_0x55497c[_0x2f671d]){_0x17d4ba=_0x55497c[_0x2f671d][_0x5a2caa(0x22f)](this,_0x17d4ba,_0x5b159b);if(_0x295ffd)_0x17d4ba=_0x46941e;}let _0x1d9b32=VisuMZ[_0x5a2caa(0x2b8)][_0x5a2caa(0x1d5)](this[_0x5a2caa(0x88b)](),_0x315df6['format'](''));if(VisuMZ['BattleCore']['JS'][_0x1d9b32]){_0x17d4ba=VisuMZ['BattleCore']['JS'][_0x1d9b32][_0x5a2caa(0x22f)](this,this[_0x5a2caa(0x8e3)](),_0x5b159b,this[_0x5a2caa(0x88b)](),_0x17d4ba);if(_0x295ffd)_0x17d4ba=_0x46941e;}for(const _0x5e5111 of this['subject']()[_0x5a2caa(0x891)]()){if(!_0x5e5111)continue;_0x1d9b32=VisuMZ[_0x5a2caa(0x2b8)][_0x5a2caa(0x1d5)](_0x5e5111,_0x315df6[_0x5a2caa(0x151)](_0x5a2caa(0x36b)));if(VisuMZ['BattleCore']['JS'][_0x1d9b32]){_0x17d4ba=VisuMZ['BattleCore']['JS'][_0x1d9b32][_0x5a2caa(0x22f)](this,this[_0x5a2caa(0x8e3)](),_0x5b159b,_0x5e5111,_0x17d4ba);if(_0x295ffd)_0x17d4ba=_0x46941e;}}for(const _0x1c0543 of _0x5b159b[_0x5a2caa(0x891)]()){if(!_0x1c0543)continue;_0x1d9b32=VisuMZ[_0x5a2caa(0x2b8)]['createKeyJS'](_0x1c0543,_0x315df6[_0x5a2caa(0x151)](_0x5a2caa(0x5fa)));if(VisuMZ[_0x5a2caa(0x2b8)]['JS'][_0x1d9b32]){_0x17d4ba=VisuMZ['BattleCore']['JS'][_0x1d9b32][_0x5a2caa(0x22f)](this,this[_0x5a2caa(0x8e3)](),_0x5b159b,_0x1c0543,_0x17d4ba);if(_0x295ffd)_0x17d4ba=_0x46941e;}}return _0x17d4ba;},Game_Action[_0x47679c(0x63e)][_0x47679c(0x21e)]=function(_0x32df18){const _0x50907f=_0x47679c,_0x103ad2=this[_0x50907f(0x779)]||0x0,_0x160d26=VisuMZ[_0x50907f(0x2b8)][_0x50907f(0x1ea)]['Mechanics'],_0x26bad3=_0x32df18['format']('');_0x160d26[_0x26bad3]&&_0x160d26[_0x26bad3][_0x50907f(0x22f)](this,_0x103ad2);let _0x1a4c67=VisuMZ[_0x50907f(0x2b8)][_0x50907f(0x1d5)](this[_0x50907f(0x88b)](),_0x32df18);VisuMZ[_0x50907f(0x2b8)]['JS'][_0x1a4c67]&&VisuMZ[_0x50907f(0x2b8)]['JS'][_0x1a4c67][_0x50907f(0x22f)](this,this[_0x50907f(0x8e3)](),this[_0x50907f(0x8e3)](),this[_0x50907f(0x88b)](),_0x103ad2);for(const _0xd42753 of this['subject']()['traitObjects']()){if(!_0xd42753)continue;_0x1a4c67=VisuMZ[_0x50907f(0x2b8)][_0x50907f(0x1d5)](_0xd42753,_0x32df18),VisuMZ['BattleCore']['JS'][_0x1a4c67]&&VisuMZ['BattleCore']['JS'][_0x1a4c67][_0x50907f(0x22f)](this,this['subject'](),this[_0x50907f(0x8e3)](),_0xd42753,_0x103ad2);}},Game_Action[_0x47679c(0x63e)]['speed']=function(){const _0x575e70=_0x47679c;return VisuMZ[_0x575e70(0x2b8)][_0x575e70(0x1ea)][_0x575e70(0x302)]['CalcActionSpeedJS'][_0x575e70(0x22f)](this);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x553)]=function(){const _0x26ae5e=_0x47679c;return VisuMZ[_0x26ae5e(0x2b8)]['Settings'][_0x26ae5e(0x302)][_0x26ae5e(0x938)];},Game_Action[_0x47679c(0x63e)][_0x47679c(0x10f)]=function(){const _0x4dd62b=_0x47679c;return this[_0x4dd62b(0x88b)]()[_0x4dd62b(0x4d1)][_0x4dd62b(0x503)](/<JS TARGETS>/i);},Game_Action[_0x47679c(0x63e)]['isBattleCoreTargetScope']=function(){const _0x2565e3=_0x47679c;if(!this[_0x2565e3(0x789)]&&this[_0x2565e3(0x8e3)]()[_0x2565e3(0x5f6)]())return![];if(this[_0x2565e3(0x10f)]())return!![];return typeof this[_0x2565e3(0x88b)]()[_0x2565e3(0x5a7)]===_0x2565e3(0x2a1);},VisuMZ['BattleCore']['Game_Action_isForOpponent']=Game_Action[_0x47679c(0x63e)][_0x47679c(0x27c)],Game_Action[_0x47679c(0x63e)]['isForOpponent']=function(){const _0x455d6f=_0x47679c;return this[_0x455d6f(0x448)]()&&!this['isCustomBattleScope']()?this[_0x455d6f(0x815)]():VisuMZ[_0x455d6f(0x2b8)][_0x455d6f(0x218)][_0x455d6f(0x22f)](this);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x815)]=function(){const _0x185bfc=_0x47679c,_0x3128a5=this[_0x185bfc(0x88b)]()[_0x185bfc(0x5a7)];return _0x3128a5[_0x185bfc(0x503)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x47679c(0x3e3)]=Game_Action['prototype']['isForFriend'],Game_Action['prototype']['isForFriend']=function(){const _0xdffe69=_0x47679c;return this[_0xdffe69(0x448)]()&&!this[_0xdffe69(0x10f)]()?this['isForFriendBattleCore']():VisuMZ[_0xdffe69(0x2b8)][_0xdffe69(0x3e3)][_0xdffe69(0x22f)](this);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x8ff)]=function(){const _0x16b5d2=_0x47679c,_0x4525a8=this[_0x16b5d2(0x88b)]()[_0x16b5d2(0x5a7)];return _0x4525a8[_0x16b5d2(0x503)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ['BattleCore'][_0x47679c(0x3d2)]=Game_Action[_0x47679c(0x63e)]['isForRandom'],Game_Action[_0x47679c(0x63e)][_0x47679c(0x2a6)]=function(){const _0x4d6e9b=_0x47679c;return this[_0x4d6e9b(0x448)]()&&!this[_0x4d6e9b(0x10f)]()?this[_0x4d6e9b(0x8ba)]():VisuMZ[_0x4d6e9b(0x2b8)][_0x4d6e9b(0x3d2)][_0x4d6e9b(0x22f)](this);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x8ba)]=function(){const _0x33b195=_0x47679c,_0x437cb2=this[_0x33b195(0x88b)]()[_0x33b195(0x5a7)];return _0x437cb2[_0x33b195(0x503)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x47679c(0x2b8)]['Game_Action_needsSelection']=Game_Action['prototype'][_0x47679c(0x3ad)],Game_Action[_0x47679c(0x63e)][_0x47679c(0x3ad)]=function(){const _0x23ce21=_0x47679c;return this[_0x23ce21(0x448)]()&&!this['isCustomBattleScope']()?this[_0x23ce21(0x23a)]():VisuMZ['BattleCore'][_0x23ce21(0x416)]['call'](this);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x23a)]=function(){const _0x468398=_0x47679c,_0x48c313=this['item']()[_0x468398(0x5a7)];if(_0x48c313[_0x468398(0x503)](/RANDOM/i))return![];if(_0x48c313['match'](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x48c313['match'](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ['BattleCore'][_0x468398(0x416)][_0x468398(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3bc)]=Game_Action[_0x47679c(0x63e)][_0x47679c(0x2c1)],Game_Action[_0x47679c(0x63e)][_0x47679c(0x2c1)]=function(){const _0x433d9f=_0x47679c;let _0x3e04bd=[];return this[_0x433d9f(0x448)]()?_0x3e04bd=this['makeTargetsBattleCore']():_0x3e04bd=VisuMZ[_0x433d9f(0x2b8)][_0x433d9f(0x3bc)][_0x433d9f(0x22f)](this),_0x3e04bd=this['applyTargetFilters'](_0x3e04bd),_0x3e04bd;},Game_Action[_0x47679c(0x63e)][_0x47679c(0x80a)]=function(){const _0x5bb3a0=_0x47679c;let _0x3ed2f1=[];const _0x5b5ba2=String(this[_0x5bb3a0(0x88b)]()[_0x5bb3a0(0x5a7)]),_0x58835c=VisuMZ[_0x5bb3a0(0x2b8)][_0x5bb3a0(0x1d5)](this[_0x5bb3a0(0x88b)](),_0x5bb3a0(0x714));if(VisuMZ[_0x5bb3a0(0x2b8)]['JS'][_0x58835c]){_0x3ed2f1=VisuMZ[_0x5bb3a0(0x2b8)][_0x5bb3a0(0x3bc)][_0x5bb3a0(0x22f)](this);const _0x312e7a=VisuMZ['BattleCore'][_0x5bb3a0(0x1d5)](this[_0x5bb3a0(0x88b)](),_0x5bb3a0(0x714));return _0x3ed2f1=VisuMZ[_0x5bb3a0(0x2b8)]['JS'][_0x312e7a][_0x5bb3a0(0x22f)](this,this[_0x5bb3a0(0x8e3)](),_0x3ed2f1),this[_0x5bb3a0(0x23f)](_0x3ed2f1);}if(_0x5b5ba2[_0x5bb3a0(0x503)](/(\d+) RANDOM ANY/i)){let _0x54c53b=Number(RegExp['$1']);while(_0x54c53b--){const _0x7f3560=Math[_0x5bb3a0(0x743)](0x2)===0x0?this[_0x5bb3a0(0x1f5)]():this[_0x5bb3a0(0x36f)]();_0x3ed2f1['push'](_0x7f3560[_0x5bb3a0(0x52d)]());}return this[_0x5bb3a0(0x23f)](_0x3ed2f1);}if(_0x5b5ba2[_0x5bb3a0(0x503)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0xa013c2=Number(RegExp['$1']);while(_0xa013c2--){_0x3ed2f1['push'](this[_0x5bb3a0(0x1f5)]()['trueRandomTarget']());}return this['repeatTargets'](_0x3ed2f1);}if(_0x5b5ba2['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x1d2baf=Number(RegExp['$1']);while(_0x1d2baf--){_0x3ed2f1['push'](this['friendsUnit']()[_0x5bb3a0(0x52d)]());}return this['repeatTargets'](_0x3ed2f1);}if(_0x5b5ba2[_0x5bb3a0(0x503)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0x3ed2f1['push'](...this['friendsUnit']()[_0x5bb3a0(0x8ef)]()['filter'](_0x3f823e=>_0x3f823e!==this[_0x5bb3a0(0x8e3)]())),this[_0x5bb3a0(0x23f)](_0x3ed2f1);return VisuMZ[_0x5bb3a0(0x2b8)][_0x5bb3a0(0x3bc)][_0x5bb3a0(0x22f)](this);},Game_Action['prototype'][_0x47679c(0xf0)]=function(_0x52de6f){const _0x56333e=_0x47679c,_0x1fc62a=[];for(let _0x5dd2a9=0x0;_0x5dd2a9<this[_0x56333e(0x909)]();_0x5dd2a9++){_0x1fc62a[_0x56333e(0x6b4)](_0x52de6f[_0x56333e(0x52d)]());}return _0x1fc62a;},Game_Action[_0x47679c(0x63e)]['applyTargetFilters']=function(_0x4870e4){const _0x230309=_0x47679c;if(!this[_0x230309(0x88b)]())return _0x4870e4;const _0x508582=this['item']()[_0x230309(0x4d1)];return _0x508582[_0x230309(0x503)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x4870e4[_0x230309(0x3fc)](this[_0x230309(0x8e3)]()),_0x4870e4;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x492)]=Game_Action['prototype']['itemEffectAddAttackState'],Game_Action['prototype'][_0x47679c(0x83a)]=function(_0x3ccfc7,_0x249bf9){const _0x5d2bdc=_0x47679c;VisuMZ['BattleCore']['Game_Action_itemEffectAddAttackState'][_0x5d2bdc(0x22f)](this,_0x3ccfc7,_0x249bf9);if(!_0x3ccfc7['isImmortal']())return;for(const _0x3161eb of this['subject']()['attackStates']()){if(_0x3161eb===_0x3ccfc7[_0x5d2bdc(0x201)]()){let _0x185fb0=_0x249bf9[_0x5d2bdc(0x728)];_0x185fb0*=_0x3ccfc7[_0x5d2bdc(0x2b3)](_0x3161eb),_0x185fb0*=this['subject']()[_0x5d2bdc(0x4d0)](_0x3161eb),_0x185fb0*=this[_0x5d2bdc(0x729)](_0x3ccfc7),Math['random']()<_0x185fb0&&(_0x3ccfc7['_deathStateApplied']=!![],this[_0x5d2bdc(0x1fa)](_0x3ccfc7));}}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x531)]=Game_Action[_0x47679c(0x63e)][_0x47679c(0x6bf)],Game_Action[_0x47679c(0x63e)][_0x47679c(0x6bf)]=function(_0x2e9c6a,_0x4698eb){const _0xe35b1=_0x47679c;VisuMZ[_0xe35b1(0x2b8)][_0xe35b1(0x531)][_0xe35b1(0x22f)](this,_0x2e9c6a,_0x4698eb);if(!_0x2e9c6a[_0xe35b1(0x27b)]())return;if(_0x4698eb[_0xe35b1(0x8db)]!==_0x2e9c6a[_0xe35b1(0x201)]())return;let _0x2f122c=_0x4698eb['value1'];!this[_0xe35b1(0x598)]()&&(_0x2f122c*=_0x2e9c6a[_0xe35b1(0x2b3)](_0x4698eb[_0xe35b1(0x8db)]),_0x2f122c*=this[_0xe35b1(0x729)](_0x2e9c6a)),Math['random']()<_0x2f122c&&(_0x2e9c6a[_0xe35b1(0x181)]=!![],this[_0xe35b1(0x1fa)](_0x2e9c6a));},VisuMZ['BattleCore'][_0x47679c(0x73d)]=Game_Action['prototype'][_0x47679c(0x190)],Game_Action[_0x47679c(0x63e)][_0x47679c(0x190)]=function(){const _0x30e08e=_0x47679c;VisuMZ[_0x30e08e(0x2b8)][_0x30e08e(0x73d)][_0x30e08e(0x22f)](this),this[_0x30e08e(0x241)](),this[_0x30e08e(0x4f5)]();},Game_Action['prototype'][_0x47679c(0x241)]=function(){const _0x3e3b8b=_0x47679c;if(!SceneManager[_0x3e3b8b(0x75d)]())return;const _0x4805c4=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x27f580=this[_0x3e3b8b(0x88b)]()['note']['match'](_0x4805c4);if(_0x27f580)for(const _0x1224c7 of _0x27f580){if(!_0x1224c7)continue;_0x1224c7[_0x3e3b8b(0x503)](_0x4805c4);const _0x5850e0=String(RegExp['$1'])[_0x3e3b8b(0x41c)](',')[_0x3e3b8b(0x261)](_0x12a753=>String(_0x12a753)[_0x3e3b8b(0x616)]()),_0x28ee4a=_0x5850e0['map'](_0x373c80=>DataManager[_0x3e3b8b(0x4fb)](_0x373c80));for(const _0x333b21 of _0x28ee4a){const _0x563b77=$dataCommonEvents[_0x333b21];_0x563b77&&$gameTemp['reserveCommonEvent'](_0x333b21);}}},DataManager['getCommonEventIdWithName']=function(_0x33e76c){const _0x50a1a7=_0x47679c;_0x33e76c=_0x33e76c[_0x50a1a7(0x1d3)]()[_0x50a1a7(0x616)](),this[_0x50a1a7(0x87d)]=this[_0x50a1a7(0x87d)]||{};if(this[_0x50a1a7(0x87d)][_0x33e76c])return this[_0x50a1a7(0x87d)][_0x33e76c];for(const _0x2eefbf of $dataCommonEvents){if(!_0x2eefbf)continue;let _0x18c3ff=_0x2eefbf[_0x50a1a7(0x620)];_0x18c3ff=_0x18c3ff[_0x50a1a7(0x6c5)](/\x1I\[(\d+)\]/gi,''),_0x18c3ff=_0x18c3ff[_0x50a1a7(0x6c5)](/\\I\[(\d+)\]/gi,''),this[_0x50a1a7(0x87d)][_0x18c3ff[_0x50a1a7(0x1d3)]()['trim']()]=_0x2eefbf['id'];}return this[_0x50a1a7(0x87d)][_0x33e76c]||0x0;},Game_Action[_0x47679c(0x63e)][_0x47679c(0x4f5)]=function(){const _0x546c4d=_0x47679c;if(!SceneManager[_0x546c4d(0x75d)]())return;const _0x752540=VisuMZ[_0x546c4d(0x2b8)][_0x546c4d(0x1ea)]['Mechanics'];_0x752540['SwitchCritical']&&$gameSwitches['setValue'](_0x752540[_0x546c4d(0x7fb)],![]),_0x752540[_0x546c4d(0x8d3)]&&$gameSwitches[_0x546c4d(0x1c9)](_0x752540[_0x546c4d(0x8d3)],![]),_0x752540[_0x546c4d(0x5b3)]&&$gameVariables[_0x546c4d(0x1c9)](_0x752540['VariableDmg'],0x0),_0x752540[_0x546c4d(0x840)]&&$gameVariables[_0x546c4d(0x1c9)](_0x752540[_0x546c4d(0x840)],0x0);},Game_Action[_0x47679c(0x63e)][_0x47679c(0x58b)]=function(_0x94cd58){const _0x272764=_0x47679c;if(!SceneManager[_0x272764(0x75d)]())return;if(!_0x94cd58)return;const _0x1f1a05=_0x94cd58[_0x272764(0x1d8)](),_0x5f4ee0=VisuMZ[_0x272764(0x2b8)][_0x272764(0x1ea)][_0x272764(0x302)];_0x5f4ee0['SwitchCritical']&&_0x1f1a05[_0x272764(0x6ef)]&&$gameSwitches[_0x272764(0x1c9)](_0x5f4ee0[_0x272764(0x7fb)],!![]);_0x5f4ee0['SwitchMissEvade']&&(_0x1f1a05[_0x272764(0x493)]||_0x1f1a05[_0x272764(0x761)])&&$gameSwitches[_0x272764(0x1c9)](_0x5f4ee0[_0x272764(0x8d3)],!![]);if(_0x5f4ee0[_0x272764(0x5b3)]){let _0x4c5c38=$gameVariables[_0x272764(0x48e)](_0x5f4ee0[_0x272764(0x5b3)]);_0x1f1a05['hpDamage']>0x0&&(_0x4c5c38+=Math['abs'](_0x1f1a05['hpDamage'])),$gameVariables['setValue'](_0x5f4ee0['VariableDmg'],_0x4c5c38);}if(_0x5f4ee0[_0x272764(0x840)]){let _0x4e4836=$gameVariables[_0x272764(0x48e)](_0x5f4ee0[_0x272764(0x840)]);_0x1f1a05[_0x272764(0xf5)]<0x0&&(_0x4e4836+=Math[_0x272764(0x85c)](_0x1f1a05[_0x272764(0xf5)])),$gameVariables[_0x272764(0x1c9)](_0x5f4ee0[_0x272764(0x840)],_0x4e4836);}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6e1)]=Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x6b1)],Game_BattlerBase[_0x47679c(0x63e)]['initMembers']=function(){const _0x598772=_0x47679c;VisuMZ[_0x598772(0x2b8)][_0x598772(0x6e1)][_0x598772(0x22f)](this),this['initMembersBattleCore']();},Game_BattlerBase[_0x47679c(0x63e)]['initMembersBattleCore']=function(){const _0x4c1679=_0x47679c;this[_0x4c1679(0x74a)]=![];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x71c)]=Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x29b)],Game_BattlerBase[_0x47679c(0x63e)]['refresh']=function(){const _0xd07ff8=_0x47679c;this['_cache']={},VisuMZ['BattleCore'][_0xd07ff8(0x71c)]['call'](this);},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x74e)]=function(_0x320b43){const _0x55fe2b=_0x47679c;return this['_cache']=this[_0x55fe2b(0x392)]||{},this[_0x55fe2b(0x392)][_0x320b43]!==undefined;},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x3ee)]=function(){const _0x202467=_0x47679c;if(this['_cache'][_0x202467(0x3ee)]!==undefined)return this['_cache'][_0x202467(0x3ee)];const _0xeda091=/<DAMAGE CAP:[ ](\d+)>/i,_0x4318a1=this[_0x202467(0x891)]()['map'](_0x23ddc7=>_0x23ddc7&&_0x23ddc7[_0x202467(0x4d1)]['match'](_0xeda091)?Number(RegExp['$1']):0x0);let _0x3a9b83=_0x4318a1[_0x202467(0x42d)]>0x0?Math['max'](..._0x4318a1):0x0;if(_0x3a9b83<=0x0)_0x3a9b83=VisuMZ[_0x202467(0x2b8)][_0x202467(0x1ea)]['Damage']['DefaultHardCap'];return this[_0x202467(0x392)][_0x202467(0x3ee)]=_0x3a9b83,this[_0x202467(0x392)][_0x202467(0x3ee)];},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0xed)]=function(){const _0x2a4e7a=_0x47679c;if(this[_0x2a4e7a(0x392)][_0x2a4e7a(0x491)]!==undefined)return this[_0x2a4e7a(0x392)][_0x2a4e7a(0x491)];let _0x220d9a=VisuMZ[_0x2a4e7a(0x2b8)][_0x2a4e7a(0x1ea)][_0x2a4e7a(0x2c7)][_0x2a4e7a(0x225)];const _0x51cf24=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x3c48ce=this[_0x2a4e7a(0x891)]()['map'](_0x2c8942=>_0x2c8942&&_0x2c8942[_0x2a4e7a(0x4d1)][_0x2a4e7a(0x503)](_0x51cf24)?Number(RegExp['$1'])/0x64:0x0);return _0x220d9a=_0x3c48ce[_0x2a4e7a(0x836)]((_0x28bd61,_0x2299db)=>_0x28bd61+_0x2299db,_0x220d9a),this['_cache'][_0x2a4e7a(0x491)]=_0x220d9a,this[_0x2a4e7a(0x392)][_0x2a4e7a(0x491)][_0x2a4e7a(0x77b)](0.01,0x1);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1c5)]=Game_BattlerBase['prototype']['die'],Game_BattlerBase[_0x47679c(0x63e)]['die']=function(){const _0x17df0c=_0x47679c;VisuMZ[_0x17df0c(0x2b8)][_0x17df0c(0x1c5)][_0x17df0c(0x22f)](this),SceneManager[_0x17df0c(0x75d)]()&&this[_0x17df0c(0x608)]('dead');},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x828)]=function(){const _0x71e329=_0x47679c;if(!SceneManager[_0x71e329(0x75d)]())return null;if(!SceneManager['_scene'][_0x71e329(0x610)])return null;return SceneManager[_0x71e329(0x56c)][_0x71e329(0x610)][_0x71e329(0x485)](this);},Game_BattlerBase['prototype'][_0x47679c(0x8a7)]=function(){const _0x58ba2b=_0x47679c;return VisuMZ[_0x58ba2b(0x2b8)]['Settings'][_0x58ba2b(0x559)]['AnchorX'];},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x287)]=function(){const _0x3ec290=_0x47679c;return VisuMZ[_0x3ec290(0x2b8)][_0x3ec290(0x1ea)][_0x3ec290(0x559)]['AnchorY'];},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x4e6)]=function(){const _0x4d4b69=_0x47679c;return this[_0x4d4b69(0xf2)]&&this[_0x4d4b69(0xf2)]()?VisuMZ['BattleCore'][_0x4d4b69(0x1ea)][_0x4d4b69(0x559)][_0x4d4b69(0x28f)]:VisuMZ['BattleCore'][_0x4d4b69(0x1ea)][_0x4d4b69(0x7d1)][_0x4d4b69(0x28f)];},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x5de)]=function(){return!![];},Game_BattlerBase['prototype'][_0x47679c(0x3d6)]=function(){return 0x0;},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x5f1)]=function(){return 0x0;},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x914)]=function(_0x1ef09c){const _0x46b100=_0x47679c;if(!_0x1ef09c)return 0x0;let _0x4fb8eb=0x0;const _0x21ed79=_0x1ef09c[_0x46b100(0x4d1)];return _0x21ed79[_0x46b100(0x503)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4fb8eb+=Number(RegExp['$1'])),_0x21ed79[_0x46b100(0x503)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4fb8eb+=Number(RegExp['$1'])),_0x4fb8eb;},Game_BattlerBase['prototype'][_0x47679c(0x198)]=function(_0x32b59f){const _0x117a0f=_0x47679c;if(!_0x32b59f)return 0x0;let _0x1667e3=0x0;const _0x1df153=_0x32b59f[_0x117a0f(0x4d1)];return _0x1df153[_0x117a0f(0x503)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x1667e3+=Number(RegExp['$1'])),_0x1df153[_0x117a0f(0x503)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x1667e3+=Number(RegExp['$2'])),_0x1667e3;},VisuMZ[_0x47679c(0x2b8)]['Game_BattlerBase_isStateResist']=Game_BattlerBase[_0x47679c(0x63e)]['isStateResist'],Game_BattlerBase['prototype'][_0x47679c(0x896)]=function(_0xd52f96){const _0x417645=_0x47679c;if(_0xd52f96===this[_0x417645(0x201)]()&&this[_0x417645(0x27b)]())return!![];return VisuMZ[_0x417645(0x2b8)][_0x417645(0x7a8)][_0x417645(0x22f)](this,_0xd52f96);},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x27b)]=function(){const _0x5ca933=_0x47679c;return this[_0x5ca933(0x74a)];},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x38f)]=function(_0x1de2e1){const _0x557ed5=_0x47679c;_0x1de2e1?this[_0x557ed5(0x899)]():this[_0x557ed5(0xe1)]();},Game_BattlerBase[_0x47679c(0x63e)]['addImmortal']=function(){const _0x446617=_0x47679c;if(this[_0x446617(0x40e)]())return;this[_0x446617(0x74a)]=!![],this[_0x446617(0x181)]=![];},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0xe1)]=function(){const _0xbd2ef9=_0x47679c,_0xe6f878=this[_0xbd2ef9(0x8e8)]();this[_0xbd2ef9(0x74a)]=![],_0xe6f878&&this[_0xbd2ef9(0x181)]&&this[_0xbd2ef9(0x1d7)](),this[_0xbd2ef9(0x181)]=![],this['refresh'](),this[_0xbd2ef9(0x40e)]()&&_0xe6f878&&(this['performCollapse'](),this[_0xbd2ef9(0x64e)]());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x115)]=Game_Action[_0x47679c(0x63e)][_0x47679c(0x279)],Game_Action[_0x47679c(0x63e)]['numRepeats']=function(){const _0x1699bf=_0x47679c;return this[_0x1699bf(0x88b)]()?VisuMZ['BattleCore'][_0x1699bf(0x115)][_0x1699bf(0x22f)](this):0x0;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x549)]=Game_Action['prototype'][_0x47679c(0x642)],Game_Action[_0x47679c(0x63e)][_0x47679c(0x642)]=function(){const _0x170db6=_0x47679c;this[_0x170db6(0x8e3)]()&&this['subject']()[_0x170db6(0x5e2)]()?VisuMZ[_0x170db6(0x2b8)][_0x170db6(0x549)][_0x170db6(0x22f)](this):this['clear']();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x395)]=Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x5e2)],Game_BattlerBase['prototype'][_0x47679c(0x5e2)]=function(){const _0x1060a4=_0x47679c;if(!this[_0x1060a4(0x6aa)]())return![];return VisuMZ[_0x1060a4(0x2b8)][_0x1060a4(0x395)][_0x1060a4(0x22f)](this);},Game_BattlerBase['prototype'][_0x47679c(0x6aa)]=function(){const _0x53eb6c=_0x47679c;for(const _0x43be46 of this['traitObjects']()){if(!_0x43be46)continue;if(_0x43be46['note'][_0x53eb6c(0x503)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ['BattleCore'][_0x47679c(0x4d7)]=Game_Action[_0x47679c(0x63e)]['setGuard'],Game_Action['prototype']['setGuard']=function(){const _0x5c3e84=_0x47679c;this[_0x5c3e84(0x8e3)]()['canGuard']()&&VisuMZ[_0x5c3e84(0x2b8)][_0x5c3e84(0x4d7)]['call'](this);},VisuMZ['BattleCore']['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x47679c(0x63e)]['canGuard'],Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x6b2)]=function(){const _0x5c5eac=_0x47679c;if(!this[_0x5c5eac(0x1c1)]())return![];return VisuMZ['BattleCore']['Game_BattlerBase_canGuard'][_0x5c5eac(0x22f)](this);},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x1c1)]=function(){const _0x4e3e40=_0x47679c;for(const _0x31295 of this[_0x4e3e40(0x891)]()){if(!_0x31295)continue;if(_0x31295['note'][_0x4e3e40(0x503)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase['prototype'][_0x47679c(0x4f8)]=function(){const _0x135197=_0x47679c;for(const _0x54a696 of this[_0x135197(0x891)]()){if(!_0x54a696)continue;if(_0x54a696[_0x135197(0x4d1)][_0x135197(0x503)](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler['prototype']['allowRandomSpeed']=function(){const _0x416a2e=_0x47679c;return VisuMZ[_0x416a2e(0x2b8)][_0x416a2e(0x1ea)][_0x416a2e(0x302)][_0x416a2e(0x938)];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x72a)]=Game_Battler[_0x47679c(0x63e)][_0x47679c(0x824)],Game_Battler['prototype'][_0x47679c(0x824)]=function(){const _0x3b9ec5=_0x47679c;if(SceneManager[_0x3b9ec5(0x75d)]()&&$gameTroop[_0x3b9ec5(0x27d)]()<=0x0)return;if(SceneManager['isSceneBattle']()&&BattleManager[_0x3b9ec5(0x8ad)]()&&this[_0x3b9ec5(0x71d)]===Graphics[_0x3b9ec5(0x213)])return;this[_0x3b9ec5(0x71d)]=Graphics[_0x3b9ec5(0x213)],SceneManager[_0x3b9ec5(0x75d)]()&&this[_0x3b9ec5(0x348)](_0x3b9ec5(0x477)),VisuMZ[_0x3b9ec5(0x2b8)][_0x3b9ec5(0x72a)]['call'](this),SceneManager[_0x3b9ec5(0x75d)]()&&(this[_0x3b9ec5(0x122)](),this[_0x3b9ec5(0x348)]('PostRegenerateJS'));},Game_Battler[_0x47679c(0x63e)]['regenerateAllBattleCore']=function(){const _0xc72d74=_0x47679c;if(SceneManager[_0xc72d74(0x75d)]())for(const _0x40d759 of this['traitObjects']()){if(!_0x40d759)continue;this[_0xc72d74(0x731)](_0x40d759);}},Game_Battler[_0x47679c(0x63e)]['onRegeneratePlayStateAnimation']=function(_0x7c3dbf){const _0x292a1c=_0x47679c;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager[_0x292a1c(0x75d)]())return;if(this[_0x292a1c(0x40e)]())return;if(this['isHidden']())return;if(_0x7c3dbf[_0x292a1c(0x4d1)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x4d6d83=Number(RegExp['$1']);$gameTemp[_0x292a1c(0x42f)]([this],_0x4d6d83,![],![]);}},VisuMZ['BattleCore'][_0x47679c(0x44b)]=Game_Battler[_0x47679c(0x63e)][_0x47679c(0x2c3)],Game_Battler['prototype'][_0x47679c(0x2c3)]=function(){const _0x4c7812=_0x47679c;this['processBattleCoreJS']('PreStartTurnJS'),VisuMZ[_0x4c7812(0x2b8)][_0x4c7812(0x44b)]['call'](this),this[_0x4c7812(0x348)](_0x4c7812(0x204));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x68b)]=Game_Battler['prototype']['onTurnEnd'],Game_Battler[_0x47679c(0x63e)][_0x47679c(0x605)]=function(){const _0x25722b=_0x47679c;this[_0x25722b(0x348)](_0x25722b(0x61a)),VisuMZ[_0x25722b(0x2b8)][_0x25722b(0x68b)][_0x25722b(0x22f)](this),this['processBattleCoreJS'](_0x25722b(0x140));},Game_Battler[_0x47679c(0x63e)]['processBattleCoreJS']=function(_0x551ef7){const _0x52294f=_0x47679c;if(this[_0x52294f(0x7be)]||this[_0x52294f(0x496)])return;const _0x54290e=VisuMZ['BattleCore'][_0x52294f(0x1ea)][_0x52294f(0x302)];if(_0x54290e[_0x551ef7])_0x54290e[_0x551ef7]['call'](this);for(const _0x3a185a of this[_0x52294f(0x891)]()){if(!_0x3a185a)continue;key=VisuMZ[_0x52294f(0x2b8)][_0x52294f(0x1d5)](_0x3a185a,_0x551ef7),VisuMZ[_0x52294f(0x2b8)]['JS'][key]&&VisuMZ[_0x52294f(0x2b8)]['JS'][key]['call'](this,this,this,_0x3a185a,0x0);}},Game_Battler[_0x47679c(0x63e)]['chantStyle']=function(){const _0x2325fb=_0x47679c;return VisuMZ[_0x2325fb(0x2b8)]['Settings'][_0x2325fb(0x559)][_0x2325fb(0x636)]||![];},Game_Battler[_0x47679c(0x63e)]['isChanting']=function(){const _0x47e81a=_0x47679c;if(this['isWaiting']()){if(this[_0x47e81a(0x18b)]()){if(this[_0x47e81a(0x341)][_0x47e81a(0x51a)](_0x6d172c=>_0x6d172c[_0x47e81a(0x88b)]()&&_0x6d172c[_0x47e81a(0x330)]()))return!![];}else{if(this[_0x47e81a(0x341)]['some'](_0x173424=>_0x173424['item']()&&_0x173424['isMagicSkill']()))return!![];}}if(BattleManager[_0x47e81a(0x8ad)]()&&this[_0x47e81a(0x1f0)]===_0x47e81a(0x5b5))return this[_0x47e81a(0x18b)]()?this[_0x47e81a(0x581)]()&&this[_0x47e81a(0x581)]()[_0x47e81a(0x88b)]()&&this[_0x47e81a(0x581)]()[_0x47e81a(0x330)]():this[_0x47e81a(0x581)]()&&this[_0x47e81a(0x581)]()[_0x47e81a(0x88b)]()&&this[_0x47e81a(0x581)]()[_0x47e81a(0x5c4)]();return![];},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x772)]=function(){const _0xd812a6=_0x47679c;if(BattleManager[_0xd812a6(0x8ad)]()&&this[_0xd812a6(0x1f0)]==='casting')return this[_0xd812a6(0x18b)]()?this['currentAction']()&&this['currentAction']()[_0xd812a6(0x88b)]()&&!this['currentAction']()[_0xd812a6(0x330)]():this['currentAction']()&&this[_0xd812a6(0x581)]()[_0xd812a6(0x88b)]()&&!this['currentAction']()[_0xd812a6(0x5c4)]();return![];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x4a2)]=Game_Battler[_0x47679c(0x63e)]['clearDamagePopup'],Game_Battler[_0x47679c(0x63e)][_0x47679c(0x585)]=function(){const _0x4af0d7=_0x47679c;VisuMZ[_0x4af0d7(0x2b8)][_0x4af0d7(0x4a2)][_0x4af0d7(0x22f)](this),this[_0x4af0d7(0x391)]=[];},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x1f3)]=function(){const _0x48f4df=_0x47679c;if(!this[_0x48f4df(0x391)])this['clearDamagePopup']();return this[_0x48f4df(0x391)][_0x48f4df(0x42d)]>0x0;},Game_Battler['prototype']['startDamagePopup']=function(){const _0x1a767e=_0x47679c;if(!SceneManager[_0x1a767e(0x75d)]())return;if(!this[_0x1a767e(0x391)])this[_0x1a767e(0x585)]();this['createSeparateDamagePopups']();const _0xf36366=this['battler']();if(_0xf36366)_0xf36366['setupDamagePopup']();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x6a3)]=function(){const _0x37bbbd=_0x47679c,_0x1c21dc=this[_0x37bbbd(0x1d8)]();if(_0x1c21dc[_0x37bbbd(0x493)]||_0x1c21dc[_0x37bbbd(0x761)]){const _0x404929=JsonEx[_0x37bbbd(0x7f5)](_0x1c21dc);_0x404929[_0x37bbbd(0x21b)]=![],_0x404929[_0x37bbbd(0x4e7)]=0x0,this[_0x37bbbd(0x391)][_0x37bbbd(0x6b4)](_0x404929);}if(_0x1c21dc[_0x37bbbd(0x21b)]){const _0x285fef=JsonEx[_0x37bbbd(0x7f5)](_0x1c21dc);_0x285fef[_0x37bbbd(0x493)]=![],_0x285fef[_0x37bbbd(0x761)]=![],_0x285fef[_0x37bbbd(0x4e7)]=0x0,this['_damagePopupArray'][_0x37bbbd(0x6b4)](_0x285fef);}if(_0x1c21dc[_0x37bbbd(0x4e7)]!==0x0){const _0x4d2453=JsonEx[_0x37bbbd(0x7f5)](_0x1c21dc);_0x4d2453[_0x37bbbd(0x493)]=![],_0x4d2453[_0x37bbbd(0x761)]=![],_0x4d2453['hpAffected']=![],this[_0x37bbbd(0x391)][_0x37bbbd(0x6b4)](_0x4d2453);}},Game_Battler['prototype']['getNextDamagePopup']=function(){const _0x1f148f=_0x47679c;if(!this['_damagePopupArray'])this['clearDamagePopup']();return VisuMZ[_0x1f148f(0x2b8)][_0x1f148f(0x1ea)][_0x1f148f(0x2c7)]['NewPopupBottom']?this[_0x1f148f(0x391)][_0x1f148f(0x2a4)]():this[_0x1f148f(0x391)][_0x1f148f(0x3f4)]();},Game_Battler['prototype'][_0x47679c(0x37f)]=function(_0x5b8ba7,_0x1c8045){const _0x3af5bb=_0x47679c;if(!SceneManager['isSceneBattle']())return;if(!this[_0x3af5bb(0x828)]())return;if(_0x5b8ba7[_0x3af5bb(0x42d)]<=0x0)return;_0x1c8045=_0x1c8045||{},_0x1c8045[_0x3af5bb(0x7e0)]=_0x1c8045[_0x3af5bb(0x7e0)]||'#ffffff',_0x1c8045[_0x3af5bb(0x187)]=_0x1c8045[_0x3af5bb(0x187)]||[0x0,0x0,0x0,0x0],_0x1c8045['flashDuration']=_0x1c8045['flashDuration']||0x0,this[_0x3af5bb(0x828)]()[_0x3af5bb(0x37f)](_0x5b8ba7,_0x1c8045);},Game_Battler[_0x47679c(0x63e)]['setupIconTextPopup']=function(_0x2aa701,_0x53473e,_0x5a7198){const _0x2e3398=_0x47679c;if(!SceneManager[_0x2e3398(0x75d)]())return;if(!this['battler']())return;if(_0x53473e['length']<=0x0)return;_0x5a7198=_0x5a7198||{},_0x5a7198[_0x2e3398(0x7e0)]=_0x5a7198['textColor']||'#ffffff',_0x5a7198[_0x2e3398(0x187)]=_0x5a7198['flashColor']||[0x0,0x0,0x0,0x0],_0x5a7198[_0x2e3398(0x941)]=_0x5a7198[_0x2e3398(0x941)]||0x0,this[_0x2e3398(0x828)]()['setupIconTextPopup'](_0x2aa701,_0x53473e,_0x5a7198);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x787)]=function(){const _0x4ea5b4=_0x47679c;if(this[_0x4ea5b4(0x7aa)]())return![];if(this[_0x4ea5b4(0x8e8)]()&&this[_0x4ea5b4(0x7d2)]())return!![];if(this[_0x4ea5b4(0x415)]()&&this[_0x4ea5b4(0x8de)]()){if(this['isDead']()&&this[_0x4ea5b4(0x3cc)]())return![];}else{if(this[_0x4ea5b4(0x40e)]())return![];}return!![];},VisuMZ['BattleCore'][_0x47679c(0x625)]=Game_Battler[_0x47679c(0x63e)][_0x47679c(0x515)],Game_Battler[_0x47679c(0x63e)][_0x47679c(0x515)]=function(){const _0x5beb50=_0x47679c;VisuMZ[_0x5beb50(0x2b8)][_0x5beb50(0x625)][_0x5beb50(0x22f)](this),this[_0x5beb50(0x698)]();},Game_Battler[_0x47679c(0x63e)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x5a4)]=function(){return![];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x5c3)]=Game_Battler[_0x47679c(0x63e)][_0x47679c(0x2a5)],Game_Battler['prototype'][_0x47679c(0x2a5)]=function(_0x4e37f1){const _0x2f1507=_0x47679c;VisuMZ[_0x2f1507(0x2b8)][_0x2f1507(0x5c3)]['call'](this,_0x4e37f1),this[_0x2f1507(0x470)](_0x4e37f1);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x470)]=function(_0x369a18){const _0x44929c=_0x47679c;this[_0x44929c(0x697)](![]),this['_forcedHomeX']=undefined,this[_0x44929c(0x12c)]=undefined;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x214)]=Game_Battler[_0x47679c(0x63e)][_0x47679c(0x8cc)],Game_Battler['prototype'][_0x47679c(0x8cc)]=function(){const _0x5b6220=_0x47679c;VisuMZ[_0x5b6220(0x2b8)][_0x5b6220(0x214)]['call'](this),this[_0x5b6220(0x19c)]();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x19c)]=function(){const _0x541052=_0x47679c;this['_forcedHomeX']=undefined,this[_0x541052(0x12c)]=undefined;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x14d)]=Game_Battler[_0x47679c(0x63e)]['performActionStart'],Game_Battler['prototype'][_0x47679c(0x223)]=function(_0x3fdad7){const _0x2016bd=_0x47679c;VisuMZ[_0x2016bd(0x2b8)]['Game_Battler_performActionStart'][_0x2016bd(0x22f)](this,_0x3fdad7);if(!_0x3fdad7['isGuard']()){const _0x55a4a6=this[_0x2016bd(0x828)]();_0x55a4a6&&_0x55a4a6[_0x2016bd(0x83e)]();}this[_0x2016bd(0x697)](![]);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x4ed)]=function(){const _0x5b8c13=_0x47679c,_0x53de8f=this[_0x5b8c13(0x482)];this[_0x5b8c13(0x482)]=![];if(BattleManager[_0x5b8c13(0x70b)]()&&this['isInputting']()){const _0x15d568=this[_0x5b8c13(0x828)]();if(_0x15d568&&_0x53de8f)_0x15d568['stepForward']();return;}const _0x41aa5c=this['battler']();if(_0x41aa5c)_0x41aa5c['stepBack']();this[_0x5b8c13(0x697)](![]),this[_0x5b8c13(0x64e)]();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x7bd)]=function(_0x506d0e){const _0x2b2a1a=_0x47679c;if(_0x506d0e[_0x2b2a1a(0x219)]())this[_0x2b2a1a(0x1b2)]();else{if(_0x506d0e['isGuard']())this[_0x2b2a1a(0x608)](_0x2b2a1a(0x878));else{if(_0x506d0e[_0x2b2a1a(0x330)]())this[_0x2b2a1a(0x608)](_0x2b2a1a(0x60d));else{if(_0x506d0e[_0x2b2a1a(0x5e3)]())_0x506d0e[_0x2b2a1a(0x88b)]()[_0x2b2a1a(0x1e6)]['type']>0x0?this[_0x2b2a1a(0x1b2)]():this['requestMotion'](_0x2b2a1a(0x660));else _0x506d0e[_0x2b2a1a(0x41f)]()&&this[_0x2b2a1a(0x608)](_0x2b2a1a(0x88b));}}}},Game_Battler[_0x47679c(0x63e)]['getAttackMotion']=function(){return $dataSystem['attackMotions'][0x0];},Game_Battler['prototype'][_0x47679c(0x2bb)]=function(){const _0x149613=_0x47679c,_0x4923f6=this[_0x149613(0x8ee)]();return _0x4923f6?_0x4923f6[_0x149613(0x85d)]:0x0;},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x661)]=function(_0x12a22c){const _0x1ba695=_0x47679c;if(!$gameSystem[_0x1ba695(0x30b)]())return;const _0x328b88=this[_0x1ba695(0x828)](),_0x4b1720=_0x12a22c[_0x1ba695(0x828)]();if(!_0x328b88||!_0x4b1720)return;const _0x548db6=_0x4b1720['_baseX'],_0x3d3dac=_0x4b1720[_0x1ba695(0x4b2)];this[_0x1ba695(0x2a8)](_0x548db6,_0x3d3dac,0x0,![],_0x1ba695(0x49d),-0x1),_0x328b88[_0x1ba695(0x6e8)]();const _0x20504c=VisuMZ[_0x1ba695(0x2b8)]['Settings'][_0x1ba695(0x943)];let _0x195ae1=(_0x4b1720[_0x1ba695(0x1ce)]+_0x328b88[_0x1ba695(0x1ce)])/0x2;_0x195ae1*=this[_0x1ba695(0xf2)]()?0x1:-0x1;let _0x1e5e4e=_0x20504c[_0x1ba695(0x5b8)]*(this['isActor']()?0x1:-0x1);_0x12a22c[_0x1ba695(0x75a)](_0x195ae1,_0x1e5e4e,0x0,![],_0x1ba695(0x49d)),_0x4b1720[_0x1ba695(0x6e8)]();},Game_Battler[_0x47679c(0x63e)]['requestMotion']=function(_0x1cddd8){const _0xb35cad=_0x47679c;if(SceneManager[_0xb35cad(0x75d)]()){const _0x4028b3=this[_0xb35cad(0x828)]();_0x4028b3&&(_0x4028b3[_0xb35cad(0x468)](_0x1cddd8),[_0xb35cad(0x3a8),_0xb35cad(0x7cd),'missile'][_0xb35cad(0x3f6)](_0x1cddd8)&&this[_0xb35cad(0x78d)]());}this[_0xb35cad(0x698)]();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x78d)]=function(){},Game_Battler['prototype']['startWeaponAnimation']=function(_0x612249){const _0x23592f=_0x47679c;if(SceneManager[_0x23592f(0x75d)]()){const _0x26e13b=this['battler']();if(_0x26e13b)_0x26e13b['forceWeaponAnimation'](_0x612249);}},Game_Battler[_0x47679c(0x63e)]['startAttackWeaponAnimation']=function(){const _0x1f6bce=_0x47679c;if(SceneManager[_0x1f6bce(0x75d)]()){const _0x486722=this['getAttackWeaponAnimationId']();this[_0x1f6bce(0x145)](_0x486722);}},Game_Battler['prototype'][_0x47679c(0x32d)]=function(_0x3dbc29,_0x598067){const _0x4d16f1=_0x47679c;if(!_0x3dbc29)return;if(!_0x3dbc29[_0x4d16f1(0x88b)]())return;if(_0x3dbc29[_0x4d16f1(0x219)]())return;if(_0x3dbc29['isGuard']())return;if(_0x3dbc29[_0x4d16f1(0x41f)]())return;let _0x887b75=0x0;const _0x3121e0=VisuMZ[_0x4d16f1(0x2b8)][_0x4d16f1(0x1ea)][_0x4d16f1(0x943)],_0x2ad106=_0x3dbc29[_0x4d16f1(0x88b)]()['note'];if(_0x2ad106['match'](/<CAST ANIMATION: (\d+)>/i))_0x887b75=Number(RegExp['$1']);else{if(_0x2ad106[_0x4d16f1(0x503)](/<NO CAST ANIMATION>/i))return;else{if(_0x3dbc29[_0x4d16f1(0x598)]())_0x887b75=_0x3121e0[_0x4d16f1(0x49f)];else{if(_0x3dbc29[_0x4d16f1(0x2b0)]())_0x887b75=_0x3121e0[_0x4d16f1(0x6df)];else _0x3dbc29[_0x4d16f1(0x330)]()&&(_0x887b75=_0x3121e0[_0x4d16f1(0x1e8)]);}}}_0x887b75>0x0&&$gameTemp[_0x4d16f1(0x6ec)]([this],_0x887b75,!!_0x598067);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x71f)]=function(){const _0x3cfe90=_0x47679c;SoundManager['playReflection']();let _0xff71c9=VisuMZ['BattleCore'][_0x3cfe90(0x1ea)][_0x3cfe90(0x943)]['ReflectAnimation'];_0xff71c9>0x0&&(Imported[_0x3cfe90(0x4a7)]?$gameTemp['requestFauxAnimation']([this],_0xff71c9):$gameTemp[_0x3cfe90(0x6ec)]([this],_0xff71c9));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x888)]=Game_Battler['prototype'][_0x47679c(0x62b)],Game_Battler[_0x47679c(0x63e)]['performDamage']=function(){const _0x52370e=_0x47679c;VisuMZ[_0x52370e(0x2b8)][_0x52370e(0x888)][_0x52370e(0x22f)](this),this[_0x52370e(0x4a8)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x798)]=Game_Battler[_0x47679c(0x63e)][_0x47679c(0x2d4)],Game_Battler[_0x47679c(0x63e)][_0x47679c(0x2d4)]=function(){const _0x1e8e58=_0x47679c;VisuMZ[_0x1e8e58(0x2b8)][_0x1e8e58(0x798)]['call'](this),this[_0x1e8e58(0x4a8)]();},VisuMZ['BattleCore'][_0x47679c(0x167)]=Game_Battler['prototype'][_0x47679c(0x857)],Game_Battler[_0x47679c(0x63e)][_0x47679c(0x857)]=function(){const _0x488270=_0x47679c;VisuMZ['BattleCore'][_0x488270(0x167)][_0x488270(0x22f)](this),this['performFlinch']();},Game_Battler['prototype'][_0x47679c(0x4a8)]=function(){const _0x2857a7=_0x47679c;if(!$gameSystem[_0x2857a7(0x30b)]())return;if(this[_0x2857a7(0x482)])return;this[_0x2857a7(0x482)]=!![];const _0x4b507f=this[_0x2857a7(0x828)]();if(_0x4b507f)_0x4b507f['stepFlinch']();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x64e)]=function(){const _0x1a5c32=_0x47679c;if(this[_0x1a5c32(0x40e)]()&&this['_motionType']!==_0x1a5c32(0x368)){this['requestMotion'](_0x1a5c32(0x368));return;}if(this[_0x1a5c32(0x40e)]()&&this[_0x1a5c32(0x6d9)]==='dead')return;if(!!this['_freezeMotionData'])return;if(this[_0x1a5c32(0x415)]()){if(!this[_0x1a5c32(0x2d8)]()&&this!==BattleManager[_0x1a5c32(0x8f5)]){if(this[_0x1a5c32(0x828)]())this[_0x1a5c32(0x828)]()[_0x1a5c32(0x8af)]();}this['clearFreezeMotion']();return;}if(this[_0x1a5c32(0x6d9)]===_0x1a5c32(0x94e))return;if(this[_0x1a5c32(0x6d9)]===_0x1a5c32(0x2a7)&&!BattleManager['isInputting']())return;if(this['_motionType']==='guard'&&!BattleManager[_0x1a5c32(0x770)]())return;this[_0x1a5c32(0x515)]();if(this[_0x1a5c32(0x828)]()&&BattleManager['isInputting']()){this['battler']()[_0x1a5c32(0x8af)](),this[_0x1a5c32(0x698)]();return;}},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x2d8)]=function(){const _0x3f354a=_0x47679c;if(!this[_0x3f354a(0x8de)]())return![];const _0x1484fd=this['battler']();if(!_0x1484fd)return![];const _0x3ba043=_0x1484fd[_0x3f354a(0x692)];if(!_0x3ba043)return![];const _0xd95e56=_0x3ba043[_0x3f354a(0x16c)];return _0xd95e56&&!_0xd95e56['loop'];},Game_Battler[_0x47679c(0x63e)]['isBattlerFlipped']=function(){const _0x26933d=_0x47679c;return this[_0x26933d(0x497)];},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x697)]=function(_0x3f88b9){const _0x5bf859=_0x47679c;if(!$gameSystem[_0x5bf859(0x30b)]())return;this[_0x5bf859(0x497)]=_0x3f88b9;const _0x236ee2=this[_0x5bf859(0x828)]();if(_0x236ee2)_0x236ee2['updateFlip']();},Game_Battler[_0x47679c(0x63e)]['setBattlerFacePoint']=function(_0x3eebbf,_0x4a1e3b,_0x194f60){const _0x4a22=_0x47679c;if(!$gameSystem['isSideView']())return;const _0x49099b=this[_0x4a22(0x828)]();if(!_0x49099b)return;if(_0x3eebbf===_0x49099b['_baseX'])return;let _0x4ffa46=![];if(this[_0x4a22(0xf2)]()){if(_0x3eebbf>_0x49099b[_0x4a22(0x854)])_0x4ffa46=!![];if(_0x3eebbf<_0x49099b[_0x4a22(0x854)])_0x4ffa46=![];}else{if(this[_0x4a22(0x415)]()){if(_0x3eebbf>_0x49099b[_0x4a22(0x854)])_0x4ffa46=![];if(_0x3eebbf<_0x49099b[_0x4a22(0x854)])_0x4ffa46=!![];}};this[_0x4a22(0x697)](_0x194f60?!_0x4ffa46:_0x4ffa46),_0x49099b[_0x4a22(0x8b6)]();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x75a)]=function(_0x2d5eca,_0x3c1512,_0xb61d56,_0x2f60a2,_0x1f7e67){const _0xc2d28a=_0x47679c;if(!$gameSystem[_0xc2d28a(0x30b)]())return;const _0x5631e9=this[_0xc2d28a(0x828)]();if(!_0x5631e9)return;if(_0x2f60a2)this[_0xc2d28a(0x128)](_0x2d5eca+_0x5631e9[_0xc2d28a(0x854)],_0x3c1512+_0x5631e9[_0xc2d28a(0x4b2)],![]);_0x2d5eca+=_0x5631e9[_0xc2d28a(0x854)]-_0x5631e9[_0xc2d28a(0x76a)],_0x3c1512+=_0x5631e9[_0xc2d28a(0x4b2)]-_0x5631e9[_0xc2d28a(0x843)],_0x5631e9['startMove'](_0x2d5eca,_0x3c1512,_0xb61d56);if(Imported[_0xc2d28a(0x4a7)])_0x5631e9[_0xc2d28a(0xf1)](_0x1f7e67||'Linear');},Game_Battler['prototype'][_0x47679c(0x2a8)]=function(_0x1d3470,_0x2577b3,_0x2cc8b0,_0x3e8eb7,_0x575e12,_0x2a44db){const _0x585708=_0x47679c;if(!$gameSystem[_0x585708(0x30b)]())return;const _0x510f75=this[_0x585708(0x828)]();if(!_0x510f75)return;_0x2a44db=_0x2a44db||0x0;if(_0x2a44db>0x0){if(_0x510f75[_0x585708(0x854)]>_0x1d3470)_0x1d3470+=_0x510f75[_0x585708(0x1ce)]/0x2+_0x2a44db;if(_0x510f75[_0x585708(0x854)]<_0x1d3470)_0x1d3470-=_0x510f75[_0x585708(0x1ce)]/0x2+_0x2a44db;}if(_0x3e8eb7)this[_0x585708(0x128)](_0x1d3470,_0x2577b3,![]);_0x1d3470-=_0x510f75['_homeX'],_0x2577b3-=_0x510f75[_0x585708(0x843)],_0x510f75['startMove'](_0x1d3470,_0x2577b3,_0x2cc8b0);if(Imported['VisuMZ_0_CoreEngine'])_0x510f75[_0x585708(0xf1)](_0x575e12||_0x585708(0x49d));},Game_Battler[_0x47679c(0x63e)]['moveBattlerHomeDistance']=function(_0x4de4ed,_0x3e3515,_0x2fd58f,_0x436188,_0xd71d8){const _0x2eca3c=_0x47679c;if(!$gameSystem['isSideView']())return;const _0x3b1b46=this[_0x2eca3c(0x828)]();if(!_0x3b1b46)return;if(_0x436188)this[_0x2eca3c(0x128)](_0x4de4ed+_0x3b1b46[_0x2eca3c(0x854)],_0x3e3515+_0x3b1b46[_0x2eca3c(0x4b2)],![]);_0x4de4ed+=_0x3b1b46[_0x2eca3c(0x76a)],_0x3e3515+=_0x3b1b46[_0x2eca3c(0x843)],_0x3b1b46[_0x2eca3c(0x586)](_0x4de4ed,_0x3e3515,_0x2fd58f,_0xd71d8),this['_forcedHomeX']=_0x4de4ed,this[_0x2eca3c(0x12c)]=_0x3e3515;},Game_Battler[_0x47679c(0x63e)]['moveBattlerHomeToPoint']=function(_0x115b7a,_0x19eb94,_0x3011fc,_0x26f18c,_0x512410,_0x422d69){const _0x50150a=_0x47679c;if(!$gameSystem[_0x50150a(0x30b)]())return;const _0x15fbcc=this[_0x50150a(0x828)]();if(!_0x15fbcc)return;_0x422d69=_0x422d69||0x0;if(_0x422d69>0x0){if(_0x15fbcc[_0x50150a(0x854)]>_0x115b7a)_0x115b7a+=_0x15fbcc['width']/0x2+_0x422d69;if(_0x15fbcc[_0x50150a(0x854)]<_0x115b7a)_0x115b7a-=_0x15fbcc['width']/0x2+_0x422d69;}if(_0x26f18c)this['setBattlerFacePoint'](_0x115b7a,_0x19eb94,![]);_0x15fbcc[_0x50150a(0x586)](_0x115b7a,_0x19eb94,_0x3011fc,_0x512410),this['_forcedHomeX']=_0x115b7a,this[_0x50150a(0x12c)]=_0x19eb94;},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x4ec)]=function(_0x3fce32,_0x55f209,_0x5bc6da){const _0x8deb9f=_0x47679c;if(!$gameSystem[_0x8deb9f(0x30b)]())return;const _0x427342=this[_0x8deb9f(0x828)]();if(!_0x427342)return;_0x427342[_0x8deb9f(0x172)](_0x3fce32,_0x55f209,_0x5bc6da);},Game_Battler['prototype'][_0x47679c(0x1a7)]=function(_0xbd8fc9,_0xecc999){const _0x243d7d=_0x47679c;if(!$gameSystem[_0x243d7d(0x30b)]())return;const _0x47329b=this[_0x243d7d(0x828)]();if(!_0x47329b)return;_0x47329b[_0x243d7d(0x654)](_0xbd8fc9,_0xecc999);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x644)]=function(_0x1e6d48,_0x2750a0,_0x5c232c,_0x3a0c42){const _0xe0eba1=_0x47679c;if(!$gameSystem[_0xe0eba1(0x30b)]())return;const _0x4d3d71=this[_0xe0eba1(0x828)]();if(!_0x4d3d71)return;_0x4d3d71[_0xe0eba1(0x3bd)](_0x1e6d48,_0x2750a0,_0x5c232c,_0x3a0c42);},Game_Battler['prototype']['skewBattler']=function(_0x5acb47,_0x4b840,_0x31f91c,_0x5d7186){const _0x3e9dab=_0x47679c;if(!$gameSystem['isSideView']())return;const _0x57d26c=this[_0x3e9dab(0x828)]();if(!_0x57d26c)return;this[_0x3e9dab(0xf2)]()&&(_0x5acb47*=-0x1,_0x4b840*=-0x1),_0x57d26c[_0x3e9dab(0x545)](_0x5acb47,_0x4b840,_0x31f91c,_0x5d7186);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x4bf)]=function(_0x39f9d1,_0x44bda9,_0x1a7c61,_0x405709){const _0x4ebf3c=_0x47679c;if(!$gameSystem['isSideView']())return;const _0xba4761=this[_0x4ebf3c(0x828)]();if(!_0xba4761)return;_0xba4761['startGrow'](_0x39f9d1,_0x44bda9,_0x1a7c61,_0x405709);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x211)]=function(_0x5df8ea,_0x3e6ca5,_0x2ce5bf){const _0x1f036c=_0x47679c;if(!$gameSystem['isSideView']())return;const _0x56b5=this[_0x1f036c(0x828)]();if(!_0x56b5)return;_0x56b5[_0x1f036c(0x5bc)](_0x5df8ea,_0x3e6ca5,_0x2ce5bf);},Game_Battler[_0x47679c(0x63e)]['clearFreezeMotion']=function(){const _0x55c34a=_0x47679c,_0x3a74c9=!!this['_freezeMotionData'];this[_0x55c34a(0x6bc)]=undefined,_0x3a74c9&&(this[_0x55c34a(0x64e)](),this[_0x55c34a(0x37c)]());},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x37c)]=function(){const _0x307c3b=_0x47679c;if(!SceneManager[_0x307c3b(0x75d)]())return;const _0x54a407=this[_0x307c3b(0x828)]();if(!_0x54a407)return;let _0x11a4ed=this[_0x307c3b(0xf2)]()?_0x54a407['_weaponSprite']:_0x54a407[_0x307c3b(0x692)][_0x307c3b(0xee)];_0x11a4ed&&_0x11a4ed[_0x307c3b(0x629)](0x0);},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x44d)]=function(_0x564ac1,_0x46701f,_0x1e1681){const _0x150771=_0x47679c;if(this[_0x150771(0x415)]()&&!this[_0x150771(0x8de)]())return;let _0x35543a=0x0,_0x51d8b3=0x0;_0x564ac1['match'](/ATTACK[ ](\d+)/i)&&(_0x51d8b3=Number(RegExp['$1']),_0x51d8b3--);if(this[_0x150771(0xf2)]()){const _0x23278c=this['weapons']();_0x35543a=_0x23278c[_0x51d8b3]?_0x23278c[_0x51d8b3]['wtypeId']:0x0;}else this['isEnemy']()&&(_0x35543a=this[_0x150771(0x745)]()['wtypeId']||0x0);const _0x199d08=$dataSystem[_0x150771(0x791)][_0x35543a];_0x564ac1[_0x150771(0x503)](/attack/i)&&(_0x564ac1=['thrust',_0x150771(0x3a8),_0x150771(0x5e9)][_0x199d08[_0x150771(0x3b6)]]||_0x150771(0x3a8)),this[_0x150771(0x6bc)]={'motionType':_0x564ac1,'weaponImageId':_0x46701f?_0x199d08['weaponImageId']:0x0,'pattern':_0x1e1681};},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x174)]=function(_0x937ed2){const _0x53e6da=_0x47679c;if(!_0x937ed2)return![];return _0x937ed2[_0x53e6da(0x36f)]()===this[_0x53e6da(0x36f)]();},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x6cd)]=function(_0x5939e4){const _0x40930a=_0x47679c;if(!_0x5939e4)return![];return _0x5939e4[_0x40930a(0x1f5)]()===this['friendsUnit']();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x855)]=Game_Actor[_0x47679c(0x63e)]['setup'],Game_Actor[_0x47679c(0x63e)][_0x47679c(0x629)]=function(_0x365085){const _0x59ba51=_0x47679c;VisuMZ[_0x59ba51(0x2b8)][_0x59ba51(0x855)][_0x59ba51(0x22f)](this,_0x365085),this[_0x59ba51(0x1d4)]();},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x1d4)]=function(){const _0x4bfd42=_0x47679c;this[_0x4bfd42(0x1ae)]='',this[_0x4bfd42(0x84d)]()&&this[_0x4bfd42(0x84d)]()[_0x4bfd42(0x4d1)][_0x4bfd42(0x503)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x4bfd42(0x1ae)]=String(RegExp['$1']));},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x5a9)]=function(){const _0x110a70=_0x47679c;if(this[_0x110a70(0x746)]()!=='')return this['getBattlePortrait']();else{if(Imported['VisuMZ_1_MainMenuCore']&&this['getMenuImage']()!=='')return this[_0x110a70(0x20d)]();}return'';},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x746)]=function(){const _0x34cabd=_0x47679c;if(this[_0x34cabd(0x1ae)]===undefined)this[_0x34cabd(0x1d4)]();return this[_0x34cabd(0x1ae)];},Game_Actor[_0x47679c(0x63e)]['setBattlePortrait']=function(_0x1cf084){const _0x23fe16=_0x47679c;if(this['_battlePortrait']===undefined)this[_0x23fe16(0x1d4)]();this[_0x23fe16(0x1ae)]=_0x1cf084;if(SceneManager['isSceneBattle']()&&$gameParty[_0x23fe16(0x8d4)]()[_0x23fe16(0x3f6)](this)){const _0x3e5733=SceneManager[_0x23fe16(0x56c)][_0x23fe16(0x5cc)];if(_0x3e5733)_0x3e5733[_0x23fe16(0x6eb)](this);}},Game_Actor['prototype'][_0x47679c(0x936)]=function(){return!![];},Game_Actor['prototype'][_0x47679c(0x8fb)]=function(){const _0x593487=_0x47679c;if(!this['isConfused']()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x593487(0x63e)][_0x593487(0x8fb)][_0x593487(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x274)]=Game_Actor[_0x47679c(0x63e)][_0x47679c(0x4fc)],Game_Actor[_0x47679c(0x63e)][_0x47679c(0x4fc)]=function(){const _0x115ec8=_0x47679c;if(BattleManager[_0x115ec8(0x1b7)]&&!ConfigManager[_0x115ec8(0x289)])return this['makeActionListAutoAttack']();else{return VisuMZ['BattleCore'][_0x115ec8(0x274)]['call'](this);;}},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x498)]=function(){const _0xe66f8c=_0x47679c,_0xd30b5d=[],_0x542cef=new Game_Action(this);return _0x542cef[_0xe66f8c(0x642)](),_0xd30b5d[_0xe66f8c(0x6b4)](_0x542cef),_0xd30b5d;},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x87e)]=function(){const _0x336507=_0x47679c;return this['currentClass']()[_0x336507(0x4d1)][_0x336507(0x503)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])['split'](/[\r\n]+/):VisuMZ[_0x336507(0x2b8)]['Settings'][_0x336507(0x25b)][_0x336507(0x338)];},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x8a7)]=function(){const _0x13fd5e=_0x47679c;if(this[_0x13fd5e(0x392)][_0x13fd5e(0x8f7)]!==undefined)return this['_cache'][_0x13fd5e(0x8f7)];return this[_0x13fd5e(0x84d)]()[_0x13fd5e(0x4d1)]['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x13fd5e(0x392)][_0x13fd5e(0x8f7)]=eval(RegExp['$1']),this[_0x13fd5e(0x392)][_0x13fd5e(0x50a)]=eval(RegExp['$2'])):this['_cache']['svAnchorX']=Game_Battler[_0x13fd5e(0x63e)][_0x13fd5e(0x8a7)][_0x13fd5e(0x22f)](this),this['_cache']['svAnchorX'];},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x287)]=function(){const _0x42dea7=_0x47679c;if(this[_0x42dea7(0x392)][_0x42dea7(0x50a)]!==undefined)return this[_0x42dea7(0x392)][_0x42dea7(0x50a)];return this['actor']()[_0x42dea7(0x4d1)][_0x42dea7(0x503)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x42dea7(0x8f7)]=eval(RegExp['$1']),this[_0x42dea7(0x392)][_0x42dea7(0x50a)]=eval(RegExp['$2'])):this['_cache'][_0x42dea7(0x50a)]=Game_Battler['prototype']['svBattlerAnchorY']['call'](this),this[_0x42dea7(0x392)][_0x42dea7(0x50a)];},Game_Actor['prototype']['svBattlerShadowVisible']=function(){const _0x332412=_0x47679c;if(this[_0x332412(0x392)][_0x332412(0x66e)]!==undefined)return this[_0x332412(0x392)]['svShadow'];if(this[_0x332412(0x84d)]()['note'][_0x332412(0x503)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x332412(0x392)][_0x332412(0x66e)]=!![];else this[_0x332412(0x84d)]()[_0x332412(0x4d1)][_0x332412(0x503)](/<SIDEVIEW HIDE SHADOW>/i)?this['_cache']['svShadow']=![]:this[_0x332412(0x392)][_0x332412(0x66e)]=Game_Battler['prototype'][_0x332412(0x4e6)]['call'](this);return this['_cache']['svShadow'];},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x5de)]=function(){const _0x1b0fab=_0x47679c;return VisuMZ[_0x1b0fab(0x2b8)][_0x1b0fab(0x1ea)][_0x1b0fab(0x559)][_0x1b0fab(0x138)];},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x78d)]=function(){const _0x101321=_0x47679c,_0x2ae394=this[_0x101321(0x6a8)](),_0x537acf=_0x2ae394[0x0]?_0x2ae394[0x0][_0x101321(0x69e)]:0x0,_0x4a8025=$dataSystem[_0x101321(0x791)][_0x537acf];_0x4a8025&&this[_0x101321(0x145)](_0x4a8025['weaponImageId']);},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x5d5)]=function(_0x1117bf){const _0x318272=_0x47679c;Game_Battler['prototype'][_0x318272(0x5d5)][_0x318272(0x22f)](this,_0x1117bf),this[_0x318272(0x7bd)](_0x1117bf);},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x8ee)]=function(){const _0x4bfa85=_0x47679c,_0x28aa0d=this[_0x4bfa85(0x6a8)](),_0x558185=_0x28aa0d[0x0]?_0x28aa0d[0x0]['wtypeId']:0x0;return $dataSystem['attackMotions'][_0x558185];},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x80d)]=function(_0x4b1ee0){const _0x2e2607=_0x47679c;_0x4b1ee0=_0x4b1ee0||0x1,_0x4b1ee0--;const _0xa57665=this['weapons']();return _0xa57665[_0x4b1ee0]?_0xa57665[_0x4b1ee0][_0x2e2607(0x62c)]:0x0;},Game_Actor[_0x47679c(0x63e)]['getAttackMotionSlot']=function(_0xc859d1){const _0x19fbc3=_0x47679c;_0xc859d1=_0xc859d1||0x1,_0xc859d1--;const _0x320b7b=this[_0x19fbc3(0x6a8)](),_0x31b8f5=_0x320b7b[_0xc859d1]?_0x320b7b[_0xc859d1][_0x19fbc3(0x69e)]:0x0;return $dataSystem['attackMotions'][_0x31b8f5];},Game_Actor[_0x47679c(0x63e)][_0x47679c(0x7c1)]=function(_0x30b85f){const _0x48d95b=_0x47679c;_0x30b85f=_0x30b85f||0x1,_0x30b85f--;const _0x189ba9=this[_0x48d95b(0x6a8)](),_0x582331=_0x189ba9[_0x30b85f]?_0x189ba9[_0x30b85f]['wtypeId']:0x0,_0x22ab19=$dataSystem['attackMotions'][_0x582331];if(_0x22ab19){if(_0x22ab19[_0x48d95b(0x3b6)]===0x0)this[_0x48d95b(0x608)](_0x48d95b(0x7cd));else{if(_0x22ab19[_0x48d95b(0x3b6)]===0x1)this[_0x48d95b(0x608)](_0x48d95b(0x3a8));else _0x22ab19[_0x48d95b(0x3b6)]===0x2&&this['requestMotion'](_0x48d95b(0x5e9));}this['startWeaponAnimation'](_0x22ab19[_0x48d95b(0x85d)]);}},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x7ec)]=function(_0x5c65f6){this['_activeWeaponSlot']=_0x5c65f6||0x0;},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x3ec)]=function(){const _0x10f495=_0x47679c;this[_0x10f495(0x86b)]=this[_0x10f495(0x86b)]||0x0,this['_activeWeaponSlot']++;},Game_Battler[_0x47679c(0x63e)][_0x47679c(0x6f1)]=function(){const _0x562685=_0x47679c;this[_0x562685(0x86b)]=undefined;},VisuMZ[_0x47679c(0x2b8)]['Game_Actor_equips']=Game_Actor[_0x47679c(0x63e)]['equips'],Game_Actor[_0x47679c(0x63e)]['equips']=function(){const _0x54a0bd=_0x47679c;let _0x207989=VisuMZ[_0x54a0bd(0x2b8)]['Game_Actor_equips'][_0x54a0bd(0x22f)](this);if(this[_0x54a0bd(0x8d2)])return _0x207989;if(this[_0x54a0bd(0x86b)]!==undefined){this[_0x54a0bd(0x8d2)]=!![];const _0x3d8284=this[_0x54a0bd(0x240)]();for(let _0xa06e66=0x0;_0xa06e66<_0x3d8284[_0x54a0bd(0x42d)];_0xa06e66++){_0x3d8284[_0xa06e66]===0x1&&this[_0x54a0bd(0x86b)]!==_0xa06e66&&(_0x207989[_0xa06e66]=null);}this[_0x54a0bd(0x8d2)]=undefined;}return _0x207989;},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x5ea)]=function(_0x1a944d){const _0x227343=_0x47679c;return _0x1a944d['isActor']()?_0x1a944d[_0x227343(0x6a8)]()[_0x227343(0x42d)]||0x1:0x1;},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x680)]=function(_0x92c18,_0x15e7fa){const _0x1ae6ff=_0x47679c;_0x92c18&&_0x92c18[_0x1ae6ff(0xf2)]()&&_0x92c18[_0x1ae6ff(0x7ec)](_0x15e7fa),this[_0x1ae6ff(0x550)]();},Window_BattleLog['prototype'][_0x47679c(0x8ae)]=function(_0xb14024){const _0x550706=_0x47679c;_0xb14024&&_0xb14024[_0x550706(0xf2)]()&&_0xb14024[_0x550706(0x6f1)](),this[_0x550706(0x550)]();},Game_Actor[_0x47679c(0x63e)]['battleUIOffsetX']=function(){const _0x2cae54=_0x47679c;let _0x59f6c9=_0x2cae54(0x3d6);if(this['checkCacheKey'](_0x59f6c9))return this[_0x2cae54(0x392)][_0x59f6c9];return this[_0x2cae54(0x392)][_0x59f6c9]=this[_0x2cae54(0x914)](this[_0x2cae54(0x84d)]()),this['_cache'][_0x59f6c9];},Game_Actor['prototype'][_0x47679c(0x5f1)]=function(){const _0x40ed70=_0x47679c;let _0x3cc7dd=_0x40ed70(0x5f1);if(this[_0x40ed70(0x74e)](_0x3cc7dd))return this[_0x40ed70(0x392)][_0x3cc7dd];return this[_0x40ed70(0x392)][_0x3cc7dd]=this[_0x40ed70(0x198)](this['actor']()),this[_0x40ed70(0x392)][_0x3cc7dd];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x7da)]=Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x629)],Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x629)]=function(_0x1c957a,_0x149ab5,_0x272bcd){const _0x5e6e6f=_0x47679c;_0x1c957a=DataManager['swapEnemyIDs'](_0x1c957a),VisuMZ[_0x5e6e6f(0x2b8)][_0x5e6e6f(0x7da)][_0x5e6e6f(0x22f)](this,_0x1c957a,_0x149ab5,_0x272bcd),Imported[_0x5e6e6f(0x185)]&&this['initElementStatusCore'](),this['clearBattleCoreData'](),this['setupBattleCoreData'](),Imported['VisuMZ_1_ElementStatusCore']&&this['recoverAll']();},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x524)]=function(){const _0x70e504=_0x47679c,_0x85e6da=VisuMZ[_0x70e504(0x2b8)]['Settings'][_0x70e504(0x7d1)];this[_0x70e504(0x7c9)]=_0x85e6da[_0x70e504(0x350)],this['_svBattlerData']={};},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x6e4)]=function(){const _0x356f4a=_0x47679c,_0x25826b=VisuMZ['BattleCore'][_0x356f4a(0x1ea)][_0x356f4a(0x7d1)],_0xc3712d=this[_0x356f4a(0xdc)]()[_0x356f4a(0x4d1)];this['_svBattlerData']={'name':'','wtypeId':_0x25826b['WtypeId'],'collapse':_0x25826b[_0x356f4a(0x765)],'motionIdle':_0x25826b[_0x356f4a(0x3b2)],'width':_0x25826b[_0x356f4a(0x1a3)]||0x40,'height':_0x25826b['Height']||0x40,'anchorX':_0x25826b[_0x356f4a(0x65d)]||0x0,'anchorY':_0x25826b[_0x356f4a(0x134)]||0x0,'shadow':_0x25826b[_0x356f4a(0x28f)]};_0xc3712d[_0x356f4a(0x503)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x356f4a(0x7c9)]=Number(RegExp['$1']));const _0x3cc22a=this[_0x356f4a(0x440)];if(_0xc3712d[_0x356f4a(0x503)](/<SIDEVIEW BATTLER: (.*)>/i))_0x3cc22a['name']=String(RegExp['$1']);else{if(_0xc3712d[_0x356f4a(0x503)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0xde3149=String(RegExp['$1'])[_0x356f4a(0x41c)](/[\r\n]+/)[_0x356f4a(0x3fc)]('');_0x3cc22a[_0x356f4a(0x620)]=DataManager['processRandomizedData'](_0xde3149);}}_0xc3712d['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x3cc22a[_0x356f4a(0x5b4)]=eval(RegExp['$1']),_0x3cc22a[_0x356f4a(0x285)]=eval(RegExp['$2']));if(_0xc3712d['match'](/<SIDEVIEW COLLAPSE>/i))_0x3cc22a[_0x356f4a(0x516)]=!![];else _0xc3712d['match'](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x3cc22a['collapse']=![]);if(_0xc3712d['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x3cc22a[_0x356f4a(0x27f)]=!![];else _0xc3712d[_0x356f4a(0x503)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x3cc22a[_0x356f4a(0x27f)]=![]);if(_0xc3712d['match'](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x3cc22a['motionIdle']=String(RegExp['$1'])[_0x356f4a(0x6d4)]()['trim']();else{if(_0xc3712d['match'](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x30b240=String(RegExp['$1'])[_0x356f4a(0x41c)](/[\r\n]+/)[_0x356f4a(0x3fc)]('');_0x3cc22a['motionIdle']=DataManager[_0x356f4a(0x44f)](_0x30b240);}}_0xc3712d[_0x356f4a(0x503)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x3cc22a[_0x356f4a(0x1ce)]=Number(RegExp['$1']),_0x3cc22a['height']=Number(RegExp['$2']));if(_0xc3712d[_0x356f4a(0x503)](/<SIDEVIEW WEAPON: (.*)>/i))_0x3cc22a['wtypeId']=DataManager['getWtypeIdWithName'](RegExp['$1']);else{if(_0xc3712d[_0x356f4a(0x503)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x482abc=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0xb0b6f3=DataManager[_0x356f4a(0x44f)](_0x482abc);_0x3cc22a[_0x356f4a(0x69e)]=DataManager['getWtypeIdWithName'](_0xb0b6f3);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x1a9857=this[_0x356f4a(0x3ca)]();for(const _0x1b7df5 of _0x1a9857){const _0x55efe0=this['traitSet'](_0x1b7df5)['Name'][_0x356f4a(0x1d3)]()[_0x356f4a(0x616)](),_0x524618=_0x1b7df5[_0x356f4a(0x1d3)]()[_0x356f4a(0x616)]();if(_0xc3712d[_0x356f4a(0x503)](VisuMZ[_0x356f4a(0x637)][_0x356f4a(0x53c)]['SvBattlerSolo-%1-%2'['format'](_0x524618,_0x55efe0)]))_0x3cc22a[_0x356f4a(0x620)]=String(RegExp['$1']);else{if(_0xc3712d[_0x356f4a(0x503)](VisuMZ[_0x356f4a(0x637)]['RegExp'][_0x356f4a(0x5ce)[_0x356f4a(0x151)](_0x524618,_0x55efe0)])){const _0x4a8322=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x356f4a(0x3fc)]('');_0x3cc22a['name']=DataManager[_0x356f4a(0x44f)](_0x4a8322);}}if(_0xc3712d[_0x356f4a(0x503)](VisuMZ[_0x356f4a(0x637)]['RegExp'][_0x356f4a(0x249)[_0x356f4a(0x151)](_0x524618,_0x55efe0)]))_0x3cc22a[_0x356f4a(0x69e)]=DataManager[_0x356f4a(0x142)](RegExp['$1']);else{if(_0xc3712d[_0x356f4a(0x503)](VisuMZ[_0x356f4a(0x637)][_0x356f4a(0x53c)][_0x356f4a(0x1f2)['format'](_0x524618,_0x55efe0)])){const _0x41a111=String(RegExp['$1'])[_0x356f4a(0x41c)](/[\r\n]+/)[_0x356f4a(0x3fc)](''),_0x79f0c=DataManager[_0x356f4a(0x44f)](_0x41a111);_0x3cc22a[_0x356f4a(0x69e)]=DataManager['getWtypeIdWithName'](_0x79f0c);}}if(_0xc3712d[_0x356f4a(0x503)](VisuMZ[_0x356f4a(0x637)][_0x356f4a(0x53c)][_0x356f4a(0x1ab)[_0x356f4a(0x151)](_0x524618,_0x55efe0)]))_0x3cc22a[_0x356f4a(0x2b5)]=String(RegExp['$1'])[_0x356f4a(0x6d4)]()[_0x356f4a(0x616)]();else{if(_0xc3712d[_0x356f4a(0x503)](VisuMZ['ElementStatusCore'][_0x356f4a(0x53c)][_0x356f4a(0x817)['format'](_0x524618,_0x55efe0)])){const _0x322121=String(RegExp['$1'])['split'](/[\r\n]+/)[_0x356f4a(0x3fc)]('');_0x3cc22a[_0x356f4a(0x2b5)]=DataManager[_0x356f4a(0x44f)](_0x322121);}}}}},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x13d)]=function(){const _0x2b6c9b=_0x47679c;return this[_0x2b6c9b(0x7c9)]||0x0;},Game_Enemy['prototype'][_0x47679c(0x5c8)]=function(){const _0x4d8b14=_0x47679c;return this[_0x4d8b14(0x13d)]();},Game_Enemy['prototype'][_0x47679c(0x80d)]=function(_0x66dab4){const _0x314153=_0x47679c;return this[_0x314153(0x13d)]();},Game_Enemy['prototype'][_0x47679c(0x6de)]=function(){const _0x1b50c1=_0x47679c;if(this[_0x1b50c1(0xdc)]()[_0x1b50c1(0x4d1)][_0x1b50c1(0x503)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x1b50c1(0x63e)][_0x1b50c1(0x6de)]['call'](this);},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x5a4)]=function(){const _0x1d69fb=_0x47679c;if(this[_0x1d69fb(0xdc)]()[_0x1d69fb(0x4d1)][_0x1d69fb(0x503)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy['prototype']['skills']=function(){const _0x2b1cce=_0x47679c,_0x400080=[];for(const _0xb8e720 of this[_0x2b1cce(0xdc)]()[_0x2b1cce(0x1ca)]){const _0x5900e6=$dataSkills[_0xb8e720[_0x2b1cce(0x29e)]];if(_0x5900e6&&!_0x400080[_0x2b1cce(0x3f6)](_0x5900e6))_0x400080[_0x2b1cce(0x6b4)](_0x5900e6);}return _0x400080;},Game_Enemy[_0x47679c(0x63e)]['battleUIOffsetX']=function(){const _0x3ba9c5=_0x47679c;let _0x3cf533=_0x3ba9c5(0x3d6);if(this['checkCacheKey'](_0x3cf533))return this[_0x3ba9c5(0x392)][_0x3cf533];return this[_0x3ba9c5(0x392)][_0x3cf533]=this[_0x3ba9c5(0x914)](this[_0x3ba9c5(0xdc)]()),this[_0x3ba9c5(0x392)][_0x3cf533];},Game_Enemy['prototype']['battleUIOffsetY']=function(){const _0x2c5710=_0x47679c;let _0x450ad5=_0x2c5710(0x5f1);if(this[_0x2c5710(0x74e)](_0x450ad5))return this[_0x2c5710(0x392)][_0x450ad5];return this[_0x2c5710(0x392)][_0x450ad5]=this[_0x2c5710(0x198)](this['enemy']()),this[_0x2c5710(0x392)][_0x450ad5];},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x745)]=function(){const _0x565021=_0x47679c;if(this[_0x565021(0x440)]!==undefined)return this[_0x565021(0x440)];return this[_0x565021(0x6e4)](),this[_0x565021(0x440)];},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x8de)]=function(){const _0x3b8068=_0x47679c;return this[_0x3b8068(0x745)]()[_0x3b8068(0x620)]!=='';},Game_Enemy[_0x47679c(0x63e)]['svBattlerName']=function(){const _0x524a8e=_0x47679c;return this[_0x524a8e(0x745)]()[_0x524a8e(0x620)];},Game_Enemy[_0x47679c(0x63e)]['battlerSmoothImage']=function(){const _0x4c6733=_0x47679c;return this[_0x4c6733(0x8de)]()?VisuMZ['BattleCore'][_0x4c6733(0x1ea)][_0x4c6733(0x559)][_0x4c6733(0x138)]:VisuMZ[_0x4c6733(0x2b8)][_0x4c6733(0x1ea)]['Enemy'][_0x4c6733(0x138)];},Game_Enemy[_0x47679c(0x63e)]['performAction']=function(_0x24deeb){const _0x279683=_0x47679c;Game_Battler[_0x279683(0x63e)]['performAction'][_0x279683(0x22f)](this,_0x24deeb);if(this[_0x279683(0x8de)]())this[_0x279683(0x7bd)](_0x24deeb);},Game_Enemy['prototype']['performAttack']=function(){const _0x4dfbe2=_0x47679c,_0x31f5a3=this[_0x4dfbe2(0x745)]()[_0x4dfbe2(0x69e)]||0x0,_0x264e1a=$dataSystem['attackMotions'][_0x31f5a3];if(_0x264e1a){if(_0x264e1a[_0x4dfbe2(0x3b6)]===0x0)this[_0x4dfbe2(0x608)](_0x4dfbe2(0x7cd));else{if(_0x264e1a['type']===0x1)this[_0x4dfbe2(0x608)]('swing');else _0x264e1a[_0x4dfbe2(0x3b6)]===0x2&&this[_0x4dfbe2(0x608)](_0x4dfbe2(0x5e9));}}},Game_Enemy[_0x47679c(0x63e)]['performWeaponAnimation']=function(){const _0x25c748=_0x47679c,_0xbe7f21=this['svBattlerData']()[_0x25c748(0x69e)]||0x0,_0x250d18=$dataSystem[_0x25c748(0x791)][_0xbe7f21];_0x250d18&&this[_0x25c748(0x145)](_0x250d18[_0x25c748(0x85d)]);},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x8ee)]=function(){const _0x5802d0=_0x47679c,_0x3f2e6a=this[_0x5802d0(0x745)]()[_0x5802d0(0x69e)]||0x0;return $dataSystem[_0x5802d0(0x791)][_0x3f2e6a];},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x4db)]=function(_0x15e626){const _0x621e64=_0x47679c;return this[_0x621e64(0x8ee)]();},Game_Enemy['prototype']['performDamage']=function(){const _0x27d772=_0x47679c;Game_Battler[_0x27d772(0x63e)]['performDamage'][_0x27d772(0x22f)](this),this[_0x27d772(0x936)]()&&this[_0x27d772(0x8de)]()&&this[_0x27d772(0x608)](_0x27d772(0x1e6)),SoundManager[_0x27d772(0x5d4)]();},Game_Enemy['prototype'][_0x47679c(0x857)]=function(){const _0x5a7d5e=_0x47679c;Game_Battler['prototype'][_0x5a7d5e(0x857)][_0x5a7d5e(0x22f)](this),this['requestMotion'](_0x5a7d5e(0x3a1));},Game_Enemy['prototype'][_0x47679c(0x4c1)]=function(){const _0x17dd07=_0x47679c;Game_Battler[_0x17dd07(0x63e)][_0x17dd07(0x4c1)][_0x17dd07(0x22f)](this),this[_0x17dd07(0x608)]('evade');},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x70f)]=function(){const _0x1c6505=_0x47679c;Game_Battler[_0x1c6505(0x63e)][_0x1c6505(0x70f)]['call'](this),this['performAttack']();},Game_Enemy['prototype'][_0x47679c(0x3cc)]=function(){const _0x354701=_0x47679c;if(this[_0x354701(0x8de)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x354701(0x745)]()['collapse'];}else return!![];},Game_Enemy['prototype'][_0x47679c(0x8a7)]=function(){const _0x1829aa=_0x47679c;return this[_0x1829aa(0x745)]()['anchorX'];},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x287)]=function(){const _0x3171b4=_0x47679c;return this[_0x3171b4(0x745)]()[_0x3171b4(0x285)];},Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x4e6)]=function(){const _0x5da65b=_0x47679c;return this[_0x5da65b(0x745)]()['shadow'];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x76b)]=Game_Enemy['prototype']['transform'],Game_Enemy[_0x47679c(0x63e)][_0x47679c(0x361)]=function(_0x1b44c0){const _0x29fbaa=_0x47679c;VisuMZ[_0x29fbaa(0x2b8)][_0x29fbaa(0x76b)][_0x29fbaa(0x22f)](this,_0x1b44c0),this[_0x29fbaa(0x524)](),this[_0x29fbaa(0x6e4)]();const _0x4d8678=this[_0x29fbaa(0x828)]();if(_0x4d8678)_0x4d8678[_0x29fbaa(0x890)](this);},Game_Unit[_0x47679c(0x63e)]['processBattleCoreJS']=function(_0x35e648){const _0x2f0038=_0x47679c;for(const _0x9aa622 of this['members']()){if(_0x9aa622)_0x9aa622[_0x2f0038(0x348)](_0x35e648);}},Game_Unit[_0x47679c(0x63e)][_0x47679c(0x52d)]=function(){const _0x2bf4af=_0x47679c,_0x4b0e5e=this[_0x2bf4af(0x8ef)]();return _0x4b0e5e[Math['randomInt'](_0x4b0e5e[_0x2bf4af(0x42d)])];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x24e)]=Game_Party[_0x47679c(0x63e)][_0x47679c(0x546)],Game_Party[_0x47679c(0x63e)][_0x47679c(0x546)]=function(_0x4bb3bd){const _0x59bdcb=_0x47679c;VisuMZ[_0x59bdcb(0x2b8)][_0x59bdcb(0x24e)]['call'](this,_0x4bb3bd),BattleManager[_0x59bdcb(0x111)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x849)]=Game_Party[_0x47679c(0x63e)][_0x47679c(0x74d)],Game_Party[_0x47679c(0x63e)][_0x47679c(0x74d)]=function(_0x3c553b){const _0x397130=_0x47679c;VisuMZ[_0x397130(0x2b8)][_0x397130(0x849)][_0x397130(0x22f)](this,_0x3c553b),BattleManager[_0x397130(0x111)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x335)]=Game_Troop['prototype'][_0x47679c(0x629)],Game_Troop['prototype'][_0x47679c(0x629)]=function(_0x3cae8c){const _0x49b5d0=_0x47679c;$gameTemp[_0x49b5d0(0x31e)](),$gameTemp[_0x49b5d0(0x37e)](_0x3cae8c),VisuMZ[_0x49b5d0(0x2b8)]['Game_Troop_setup'][_0x49b5d0(0x22f)](this,_0x3cae8c);},VisuMZ['BattleCore'][_0x47679c(0x63c)]=Game_Troop[_0x47679c(0x63e)]['expTotal'],Game_Troop['prototype'][_0x47679c(0x72b)]=function(){const _0x4c3115=_0x47679c;let _0x1b7ae9=VisuMZ[_0x4c3115(0x2b8)][_0x4c3115(0x63c)][_0x4c3115(0x22f)](this);return this['expRate']&&(_0x1b7ae9*=this['expRate']()),Math['ceil'](_0x1b7ae9);},Game_Troop[_0x47679c(0x63e)][_0x47679c(0x3f8)]=function(){return 0x1;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3da)]=Game_Map[_0x47679c(0x63e)][_0x47679c(0x7b3)],Game_Map[_0x47679c(0x63e)]['setupBattleback']=function(){const _0x5ea1c0=_0x47679c;VisuMZ[_0x5ea1c0(0x2b8)]['Game_Map_setupBattleback']['call'](this),this[_0x5ea1c0(0x474)]();},Game_Map[_0x47679c(0x63e)][_0x47679c(0x474)]=function(){const _0x2271f6=_0x47679c;this[_0x2271f6(0x3d0)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x4e48b9=$dataMap[_0x2271f6(0x4d1)];if(!_0x4e48b9)return;const _0x34b013=_0x4e48b9[_0x2271f6(0x503)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x34b013)for(const _0x3d2eff of _0x34b013){_0x3d2eff['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x4ee8a1=Number(RegExp['$1']),_0x1aa285=Number(RegExp['$2']),_0x24a28f=_0x1aa285===0x1?this[_0x2271f6(0x3d0)]:this['_regionBattleback2'],_0x289409=String(RegExp['$3']);_0x24a28f[_0x4ee8a1]=_0x289409;}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x317)]=Game_Map[_0x47679c(0x63e)][_0x47679c(0x6c8)],Game_Map[_0x47679c(0x63e)][_0x47679c(0x6c8)]=function(){const _0x1c1865=_0x47679c;if(!BattleManager[_0x1c1865(0x669)]()){const _0x37d33f=$gamePlayer[_0x1c1865(0x4e8)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x1c1865(0x3d0)]&&this[_0x1c1865(0x3d0)][_0x37d33f])return this[_0x1c1865(0x3d0)][_0x37d33f];}return VisuMZ['BattleCore'][_0x1c1865(0x317)][_0x1c1865(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x730)]=Game_Map[_0x47679c(0x63e)][_0x47679c(0x483)],Game_Map[_0x47679c(0x63e)][_0x47679c(0x483)]=function(){const _0x3cd75f=_0x47679c;if(!BattleManager[_0x3cd75f(0x669)]()){const _0x32ae77=$gamePlayer['regionId']($gamePlayer['x'],$gamePlayer['y']);if(this[_0x3cd75f(0x3d0)]&&this[_0x3cd75f(0x614)][_0x32ae77])return this[_0x3cd75f(0x614)][_0x32ae77];}return VisuMZ[_0x3cd75f(0x2b8)]['Game_Map_battleback2Name'][_0x3cd75f(0x22f)](this);},VisuMZ['BattleCore']['Game_Map_encounterList']=Game_Map[_0x47679c(0x63e)]['encounterList'],Game_Map['prototype'][_0x47679c(0x81b)]=function(){const _0x2ea5ae=_0x47679c;let _0x57911b=JsonEx[_0x2ea5ae(0x7f5)](VisuMZ[_0x2ea5ae(0x2b8)][_0x2ea5ae(0x1c0)][_0x2ea5ae(0x22f)](this));return VisuMZ[_0x2ea5ae(0x2b8)][_0x2ea5ae(0x44e)](_0x57911b);},VisuMZ['BattleCore'][_0x47679c(0x44e)]=function(_0x31d051){const _0x30660f=_0x47679c;var _0x514894,_0x35d08f,_0x510b01;for(_0x510b01=_0x31d051[_0x30660f(0x42d)]-0x1;_0x510b01>0x0;_0x510b01--){_0x514894=Math[_0x30660f(0x8c0)](Math[_0x30660f(0x47f)]()*(_0x510b01+0x1)),_0x35d08f=_0x31d051[_0x510b01],_0x31d051[_0x510b01]=_0x31d051[_0x514894],_0x31d051[_0x514894]=_0x35d08f;}return _0x31d051;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x650)]=Game_Interpreter[_0x47679c(0x63e)][_0x47679c(0x254)],Game_Interpreter['prototype'][_0x47679c(0x254)]=function(_0x176138){const _0x37ec4f=_0x47679c;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ[_0x37ec4f(0x2b8)][_0x37ec4f(0x650)][_0x37ec4f(0x22f)](this,_0x176138);},VisuMZ['BattleCore'][_0x47679c(0x6f8)]=Game_Interpreter[_0x47679c(0x63e)][_0x47679c(0x343)],Game_Interpreter[_0x47679c(0x63e)]['updateWaitMode']=function(){const _0x1015e1=_0x47679c;if(SceneManager[_0x1015e1(0x75d)]())switch(this[_0x1015e1(0x596)]){case _0x1015e1(0xeb):if(Imported[_0x1015e1(0x94c)]){if($gameScreen[_0x1015e1(0x4a3)]()['angleDuration']>0x0)return!![];this[_0x1015e1(0x596)]='';}break;case _0x1015e1(0x31d):if(BattleManager[_0x1015e1(0x610)][_0x1015e1(0x6ca)]())return!![];this[_0x1015e1(0x596)]='';break;case _0x1015e1(0x333):if(Imported[_0x1015e1(0x94c)]){if($gameScreen[_0x1015e1(0x4a3)]()[_0x1015e1(0x686)]>0x0)return!![];if($gameScreen[_0x1015e1(0x4a3)]()[_0x1015e1(0x173)]>0x0)return!![];this[_0x1015e1(0x596)]='';}break;case _0x1015e1(0x45f):if(BattleManager[_0x1015e1(0x610)][_0x1015e1(0x788)]())return!![];this[_0x1015e1(0x596)]='';break;case'battleFloat':if(BattleManager['_spriteset'][_0x1015e1(0x449)]())return!![];this[_0x1015e1(0x596)]='';break;case _0x1015e1(0x578):if(BattleManager[_0x1015e1(0x610)]['isAnyoneJumping']())return!![];this[_0x1015e1(0x596)]='';break;case'battlelog':if(BattleManager['_logWindow'][_0x1015e1(0x7df)]())return!![];this[_0x1015e1(0x596)]='';break;case _0x1015e1(0x63a):if(BattleManager['_spriteset'][_0x1015e1(0x795)]())return!![];this['_waitMode']='';break;case _0x1015e1(0x311):if(BattleManager['_spriteset'][_0x1015e1(0x30a)]())return!![];this['_waitMode']='';break;case _0x1015e1(0x94d):if(BattleManager[_0x1015e1(0x610)][_0x1015e1(0x737)]())return!![];this[_0x1015e1(0x596)]='';break;case'battleSpriteSkew':if(BattleManager[_0x1015e1(0x610)][_0x1015e1(0x4eb)]())return!![];this[_0x1015e1(0x596)]='';break;case'battleProjectiles':if(Imported[_0x1015e1(0x3f7)]){if(BattleManager['_spriteset'][_0x1015e1(0x87a)]())return!![];this[_0x1015e1(0x596)]='';}break;case _0x1015e1(0x1e3):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()[_0x1015e1(0x2e7)]>0x0)return!![];this[_0x1015e1(0x596)]='';}break;case _0x1015e1(0x7f0):if(BattleManager[_0x1015e1(0x610)][_0x1015e1(0x478)]())return!![];this[_0x1015e1(0x596)]='';break;case _0x1015e1(0x82f):if(Imported[_0x1015e1(0x94c)]){if($gameScreen['battleCameraData']()[_0x1015e1(0x75e)]>0x0)return!![];this['_waitMode']='';}break;}return VisuMZ['BattleCore']['Game_Interpreter_updateWaitMode'][_0x1015e1(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)]['Game_Interpreter_command301']=Game_Interpreter[_0x47679c(0x63e)]['command301'],Game_Interpreter['prototype'][_0x47679c(0x205)]=function(_0x18eed9){const _0x188a44=_0x47679c;return!$gameParty[_0x188a44(0x2de)]()?this['command301_PreBattleEvent'](_0x18eed9):VisuMZ[_0x188a44(0x2b8)]['Game_Interpreter_command301'][_0x188a44(0x22f)](this,_0x18eed9);},Game_Interpreter[_0x47679c(0x63e)]['command3011']=function(_0x1d4044){const _0x93a223=_0x47679c;return VisuMZ['BattleCore'][_0x93a223(0x424)][_0x93a223(0x22f)](this,_0x1d4044),BattleManager[_0x93a223(0x2e6)](_0x270488=>{const _0x755b1f=_0x93a223;this[_0x755b1f(0x281)][this['_indent']]=_0x270488;}),!![];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x45a)]=function(_0x2d6b3a){const _0x17c231=_0x47679c,_0x5329e9=$dataCommonEvents[_0x2d6b3a];if(!_0x5329e9)return![];if(_0x5329e9[_0x17c231(0x926)][_0x17c231(0x42d)]<=0x1)return![];return!![];},Game_Interpreter[_0x47679c(0x63e)]['command301_PreBattleEvent']=function(_0x5c7f4e){const _0x9911ea=_0x47679c,_0x5a4461=VisuMZ[_0x9911ea(0x2b8)][_0x9911ea(0x1ea)][_0x9911ea(0x302)],_0x20d510=_0x5a4461['BattleStartEvent'],_0x56df97=$dataCommonEvents[_0x20d510];if(_0x56df97&&VisuMZ[_0x9911ea(0x2b8)][_0x9911ea(0x45a)](_0x20d510)){const _0x496a3c=this[_0x9911ea(0x2cc)]()?this[_0x9911ea(0x587)]:0x0,_0x307918=_0x56df97[_0x9911ea(0x926)];this[_0x9911ea(0x48f)](_0x307918,_0x496a3c),this['_list']=JsonEx[_0x9911ea(0x7f5)](this[_0x9911ea(0x628)]);const _0x2f9f90={'code':0xbc3,'indent':this[_0x9911ea(0x8fa)],'parameters':JsonEx['makeDeepCopy'](_0x5c7f4e)};return this[_0x9911ea(0x628)][_0x9911ea(0x57a)](this[_0x9911ea(0x69b)]+0x1,0x0,_0x2f9f90),!![];}else return VisuMZ['BattleCore']['Game_Interpreter_command301']['call'](this,_0x5c7f4e);},VisuMZ['BattleCore'][_0x47679c(0x2eb)]=BattleManager['onEncounter'],BattleManager[_0x47679c(0x944)]=function(){const _0x4261a3=_0x47679c;VisuMZ[_0x4261a3(0x2b8)]['BattleManager_onEncounter']['call'](this),this[_0x4261a3(0x10a)]();},BattleManager[_0x47679c(0x10a)]=function(){const _0x42320f=_0x47679c,_0xdb4c15=VisuMZ['BattleCore'][_0x42320f(0x1ea)][_0x42320f(0x302)],_0x21e4cd=_0xdb4c15[_0x42320f(0x939)];_0x21e4cd&&VisuMZ['BattleCore'][_0x42320f(0x45a)](_0x21e4cd)&&(this[_0x42320f(0x3c6)]=!![],$gameTemp['reserveCommonEvent'](_0xdb4c15[_0x42320f(0x939)]),$gameMap['updateInterpreter'](),$gameMap[_0x42320f(0x3b4)][_0x42320f(0x8c3)]=!![]),_0xdb4c15[_0x42320f(0x351)]>0x0&&(this[_0x42320f(0x510)]=!![]);},VisuMZ[_0x47679c(0x2b8)]['Scene_Map_updateCallMenu']=Scene_Map['prototype'][_0x47679c(0x1d0)],Scene_Map[_0x47679c(0x63e)][_0x47679c(0x1d0)]=function(){const _0x1a85f0=_0x47679c;if(BattleManager[_0x1a85f0(0x3c6)])return;VisuMZ[_0x1a85f0(0x2b8)][_0x1a85f0(0x92d)][_0x1a85f0(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x465)]=Scene_Map[_0x47679c(0x63e)][_0x47679c(0x6e2)],Scene_Map[_0x47679c(0x63e)]['launchBattle']=function(){const _0x1d0179=_0x47679c;BattleManager[_0x1d0179(0x3c6)]?this['battleCorePreBattleCommonEvent']():VisuMZ['BattleCore']['Scene_Map_launchBattle'][_0x1d0179(0x22f)](this);},Scene_Map['prototype']['battleCorePreBattleCommonEvent']=function(){const _0x23f4dd=_0x47679c;this[_0x23f4dd(0x15a)]=!![];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x4dd)]=SceneManager[_0x47679c(0x860)],SceneManager['isSceneChanging']=function(){const _0x44a604=_0x47679c;if(BattleManager[_0x44a604(0x3c6)])return![];return VisuMZ[_0x44a604(0x2b8)][_0x44a604(0x4dd)][_0x44a604(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)]['Game_Interpreter_terminate']=Game_Interpreter[_0x47679c(0x63e)][_0x47679c(0x5c1)],Game_Interpreter[_0x47679c(0x63e)][_0x47679c(0x5c1)]=function(){const _0x365cb7=_0x47679c;VisuMZ[_0x365cb7(0x2b8)][_0x365cb7(0x649)][_0x365cb7(0x22f)](this),this[_0x365cb7(0x8c3)]&&(this[_0x365cb7(0x8c3)]=undefined,SceneManager[_0x365cb7(0x56c)][_0x365cb7(0x12e)]());},Scene_Map['prototype'][_0x47679c(0x12e)]=function(){const _0x52e9c8=_0x47679c;BattleManager[_0x52e9c8(0x3c6)]=undefined,BattleManager[_0x52e9c8(0x821)]=!![],this[_0x52e9c8(0x420)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x5b6)]=Scene_Map['prototype'][_0x47679c(0x736)],Scene_Map[_0x47679c(0x63e)][_0x47679c(0x736)]=function(){const _0x4c4717=_0x47679c;VisuMZ[_0x4c4717(0x2b8)][_0x4c4717(0x5b6)][_0x4c4717(0x22f)](this),BattleManager[_0x4c4717(0x821)]&&(this[_0x4c4717(0x15a)]=!![],BattleManager['_battleCoreBattleResumeAfter']=undefined);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x82c)]=Scene_Map[_0x47679c(0x63e)]['initialize'],Scene_Map[_0x47679c(0x63e)]['initialize']=function(){const _0x269ff2=_0x47679c;VisuMZ[_0x269ff2(0x2b8)][_0x269ff2(0x82c)][_0x269ff2(0x22f)](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ['BattleCore'][_0x47679c(0x93c)]=Scene_ItemBase[_0x47679c(0x63e)]['applyItem'],Scene_ItemBase[_0x47679c(0x63e)][_0x47679c(0x152)]=function(){const _0x34d1bb=_0x47679c;VisuMZ[_0x34d1bb(0x2b8)][_0x34d1bb(0x93c)][_0x34d1bb(0x22f)](this),this[_0x34d1bb(0x88b)]()[_0x34d1bb(0x4d1)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x34d1bb(0x796)]=[]),DataManager[_0x34d1bb(0x86a)](this['item']())&&($gameTemp[_0x34d1bb(0x796)]=[]);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x47b)]=Scene_Options['prototype'][_0x47679c(0x3b5)],Scene_Options[_0x47679c(0x63e)][_0x47679c(0x3b5)]=function(){const _0x3e6d9a=_0x47679c;let _0x264a5f=VisuMZ[_0x3e6d9a(0x2b8)]['Scene_Options_maxCommands'][_0x3e6d9a(0x22f)](this);const _0x55c2e5=VisuMZ[_0x3e6d9a(0x2b8)][_0x3e6d9a(0x1ea)];if(_0x55c2e5['AutoBattle'][_0x3e6d9a(0x389)]&&_0x55c2e5['AutoBattle'][_0x3e6d9a(0x79b)])_0x264a5f+=0x2;if(_0x55c2e5[_0x3e6d9a(0x84a)][_0x3e6d9a(0x389)]&&_0x55c2e5[_0x3e6d9a(0x84a)]['AdjustRect'])_0x264a5f+=0x1;return _0x264a5f;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x4fe)]=Scene_Battle[_0x47679c(0x63e)]['initialize'],Scene_Battle[_0x47679c(0x63e)]['initialize']=function(){const _0x59b213=_0x47679c;VisuMZ[_0x59b213(0x2b8)]['Scene_Battle_initialize'][_0x59b213(0x22f)](this),this[_0x59b213(0x192)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3e8)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x881)],Scene_Battle[_0x47679c(0x63e)]['start']=function(){const _0x52ebf5=_0x47679c;SceneManager[_0x52ebf5(0x33a)]()?(Scene_Message[_0x52ebf5(0x63e)]['start'][_0x52ebf5(0x22f)](this),this['_spriteset']&&this[_0x52ebf5(0x610)]['update'](),BattleManager['_tpbSceneChangeCacheActor']&&BattleManager['revertTpbCachedActor']()):VisuMZ[_0x52ebf5(0x2b8)][_0x52ebf5(0x3e8)][_0x52ebf5(0x22f)](this);},VisuMZ['BattleCore'][_0x47679c(0x8ab)]=Scene_Battle[_0x47679c(0x63e)]['stop'],Scene_Battle['prototype']['stop']=function(){const _0x58086f=_0x47679c;SceneManager['isNextSceneBattleTransitionable']()?Scene_Message['prototype'][_0x58086f(0x420)]['call'](this):VisuMZ[_0x58086f(0x2b8)][_0x58086f(0x8ab)][_0x58086f(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3a4)]=Scene_Battle['prototype'][_0x47679c(0x5c1)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x5c1)]=function(){const _0x38b410=_0x47679c;SceneManager[_0x38b410(0x7c8)]()?Scene_Message[_0x38b410(0x63e)][_0x38b410(0x5c1)][_0x38b410(0x22f)](this):VisuMZ[_0x38b410(0x2b8)][_0x38b410(0x3a4)]['call'](this),this['clearOnceParallelInterpreters']();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x6d8)]=function(){const _0x47b6f8=_0x47679c;if(ConfigManager['uiMenuStyle']&&ConfigManager[_0x47b6f8(0x117)]!==undefined)return ConfigManager[_0x47b6f8(0x117)];else{if(this['battleLayoutStyle']()===_0x47b6f8(0x26c))return![];else{return Scene_Message[_0x47b6f8(0x63e)][_0x47b6f8(0x6d8)][_0x47b6f8(0x22f)](this);;}}},VisuMZ[_0x47679c(0x2b8)]['Scene_Battle_createAllWindows']=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x452)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x452)]=function(){const _0x3018f3=_0x47679c;this[_0x3018f3(0x8bb)](),VisuMZ[_0x3018f3(0x2b8)]['Scene_Battle_createAllWindows'][_0x3018f3(0x22f)](this),this[_0x3018f3(0x394)]();},VisuMZ['BattleCore'][_0x47679c(0x509)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x450)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x450)]=function(){const _0x46ece2=_0x47679c;VisuMZ[_0x46ece2(0x2b8)][_0x46ece2(0x509)][_0x46ece2(0x22f)](this),this[_0x46ece2(0x527)]()===_0x46ece2(0x26c)&&this[_0x46ece2(0x237)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x44c)]=function(_0x44727c){const _0x1217ab=_0x47679c;_0x44727c?(this['_windowLayer']['x']=(Graphics['width']-Graphics['boxWidth'])/0x2,this[_0x1217ab(0x33c)]['y']=(Graphics[_0x1217ab(0x170)]-Graphics[_0x1217ab(0x113)])/0x2):(this[_0x1217ab(0x33c)]['x']=Graphics[_0x1217ab(0x1ce)]*0xa,this[_0x1217ab(0x33c)]['y']=Graphics[_0x1217ab(0x170)]*0xa);},VisuMZ['BattleCore'][_0x47679c(0x8be)]=Scene_Battle[_0x47679c(0x63e)]['selectNextCommand'],Scene_Battle['prototype'][_0x47679c(0x915)]=function(){const _0x56ba3c=_0x47679c,_0x1cf2b6=BattleManager['actor']();VisuMZ[_0x56ba3c(0x2b8)][_0x56ba3c(0x8be)][_0x56ba3c(0x22f)](this);if(_0x1cf2b6){if(_0x1cf2b6===BattleManager['actor']())return;if(_0x1cf2b6===BattleManager['_subject'])return;if(_0x1cf2b6[_0x56ba3c(0x828)]())_0x1cf2b6[_0x56ba3c(0x828)]()['stepBack']();}},VisuMZ['BattleCore'][_0x47679c(0x777)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x812)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x812)]=function(){const _0x197b23=_0x47679c,_0x1e13e8=BattleManager[_0x197b23(0x84d)]();if(_0x1e13e8&&_0x1e13e8[_0x197b23(0x828)])_0x1e13e8[_0x197b23(0x828)]()[_0x197b23(0x268)]();VisuMZ[_0x197b23(0x2b8)][_0x197b23(0x777)][_0x197b23(0x22f)](this);},VisuMZ['BattleCore'][_0x47679c(0x4c9)]=Scene_Battle[_0x47679c(0x63e)]['logWindowRect'],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x593)]=function(){const _0x5ed2e2=_0x47679c;if(VisuMZ[_0x5ed2e2(0x2b8)][_0x5ed2e2(0x1ea)][_0x5ed2e2(0x519)]['BattleLogRectJS'])return VisuMZ[_0x5ed2e2(0x2b8)]['Settings'][_0x5ed2e2(0x519)][_0x5ed2e2(0x292)][_0x5ed2e2(0x22f)](this);return VisuMZ[_0x5ed2e2(0x2b8)][_0x5ed2e2(0x4c9)][_0x5ed2e2(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x77d)],Scene_Battle['prototype'][_0x47679c(0x77d)]=function(){const _0x1575a6=_0x47679c;VisuMZ[_0x1575a6(0x2b8)][_0x1575a6(0x2aa)][_0x1575a6(0x22f)](this),this[_0x1575a6(0x783)]();},Scene_Battle[_0x47679c(0x63e)]['createPartyCommandWindowBattleCore']=function(){const _0x5bcdb8=_0x47679c,_0x404b3d=this[_0x5bcdb8(0x3cb)];_0x404b3d[_0x5bcdb8(0x950)](_0x5bcdb8(0x626),this[_0x5bcdb8(0x557)][_0x5bcdb8(0x25d)](this)),_0x404b3d[_0x5bcdb8(0x950)]('options',this['commandOptions']['bind'](this));const _0x1e68df=this[_0x5bcdb8(0x527)]();switch(_0x1e68df){case'xp':case'portrait':return this[_0x5bcdb8(0x3cb)][_0x5bcdb8(0x552)](0x1);break;}},Scene_Battle['prototype'][_0x47679c(0x557)]=function(){const _0x321b5a=_0x47679c;BattleManager[_0x321b5a(0x1b7)]=!![],$gameParty['makeActions'](),this[_0x321b5a(0x915)](),BattleManager[_0x321b5a(0x8ad)]()&&(BattleManager['_inputting']=![]);},Scene_Battle[_0x47679c(0x63e)]['commandOptions']=function(){const _0x447917=_0x47679c;this[_0x447917(0x1ee)]()?(this['_callSceneOptions']=!![],this[_0x447917(0x269)]['push'](_0x447917(0xe0),VisuMZ[_0x447917(0x2b8)][_0x447917(0x1ea)]['PartyCmd']['ActiveTpbOptionsMessage'])):this[_0x447917(0x695)]();},Scene_Battle[_0x47679c(0x63e)]['isQueueOptionsMenu']=function(){const _0x37c775=_0x47679c;return BattleManager[_0x37c775(0x70b)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x695)]=function(){const _0x5f1152=_0x47679c;this[_0x5f1152(0x5df)]=![],this['_spriteset'][_0x5f1152(0x874)](),this[_0x5f1152(0x33c)][_0x5f1152(0x5ec)]=![];if(BattleManager[_0x5f1152(0x669)]())($dataSystem[_0x5f1152(0x6c8)]||$dataSystem[_0x5f1152(0x483)])&&SceneManager[_0x5f1152(0x64f)]();else($gameMap['battleback1Name']()||$gameMap[_0x5f1152(0x483)]())&&SceneManager[_0x5f1152(0x64f)]();SceneManager[_0x5f1152(0x6b4)](Scene_Options),BattleManager[_0x5f1152(0x8ad)]()&&(BattleManager[_0x5f1152(0x86d)]=BattleManager[_0x5f1152(0x84d)]());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x58d)]=Scene_Battle[_0x47679c(0x63e)]['updateBattleProcess'],Scene_Battle['prototype']['updateBattleProcess']=function(){const _0x13439c=_0x47679c;VisuMZ[_0x13439c(0x2b8)][_0x13439c(0x58d)][_0x13439c(0x22f)](this);if(this[_0x13439c(0x5df)]&&!BattleManager[_0x13439c(0x8f5)])this[_0x13439c(0x695)]();this[_0x13439c(0x1de)]();},Scene_Battle[_0x47679c(0x63e)]['createAutoBattleWindow']=function(){const _0x293d44=_0x47679c,_0x53b63b=this[_0x293d44(0x489)]();this[_0x293d44(0x6d0)]=new Window_AutoBattleCancel(_0x53b63b),this[_0x293d44(0x6d0)][_0x293d44(0x50d)](),this[_0x293d44(0x1d2)](this[_0x293d44(0x6d0)]);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x489)]=function(){const _0x34433c=_0x47679c;return VisuMZ[_0x34433c(0x2b8)][_0x34433c(0x1ea)]['AutoBattle']['AutoBattleRect'][_0x34433c(0x22f)](this);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x192)]=function(){const _0x28e26a=_0x47679c;this[_0x28e26a(0x81a)]=[];},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x1de)]=function(){const _0xd1c215=_0x47679c;if(!this[_0xd1c215(0x81a)])return;for(const _0x843d4d of this[_0xd1c215(0x81a)]){_0x843d4d&&_0x843d4d['update']();}},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x1c7)]=function(_0x4f7acb){const _0x5972f0=_0x47679c,_0x271023=$dataCommonEvents[_0x4f7acb];if(!_0x271023)return;const _0x5c811f=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x5c811f),_0x5c811f[_0x5972f0(0x3ce)](_0x4f7acb);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x50f)]=function(_0x54017c){const _0x52f710=_0x47679c;this[_0x52f710(0x81a)]=this[_0x52f710(0x81a)]||[],this[_0x52f710(0x81a)][_0x52f710(0x6b4)](_0x54017c);},Scene_Battle['prototype'][_0x47679c(0x68c)]=function(_0xdbc807){const _0x3e2f5a=_0x47679c;this[_0x3e2f5a(0x81a)]=this[_0x3e2f5a(0x81a)]||[],this[_0x3e2f5a(0x81a)]['remove'](_0xdbc807);};function Game_BattleOnceParallelInterpreter(){const _0x59d90f=_0x47679c;this[_0x59d90f(0x736)](...arguments);}function _0x2ca8(_0x1cbbb4,_0x5e952d){const _0x14933b=_0x1493();return _0x2ca8=function(_0x2ca8d1,_0x4e7002){_0x2ca8d1=_0x2ca8d1-0xdc;let _0x46e602=_0x14933b[_0x2ca8d1];return _0x46e602;},_0x2ca8(_0x1cbbb4,_0x5e952d);}Game_BattleOnceParallelInterpreter['prototype']=Object[_0x47679c(0x2c5)](Game_Interpreter['prototype']),Game_BattleOnceParallelInterpreter[_0x47679c(0x63e)][_0x47679c(0x365)]=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x47679c(0x63e)][_0x47679c(0x3ce)]=function(_0xb380cc){const _0x517f78=_0x47679c,_0x360007=$dataCommonEvents[_0xb380cc];_0x360007?this[_0x517f78(0x629)](_0x360007[_0x517f78(0x926)],0x0):this[_0x517f78(0x5c1)]();},Game_BattleOnceParallelInterpreter['prototype']['terminate']=function(){const _0x430a61=_0x47679c;if(!SceneManager[_0x430a61(0x75d)]())return;SceneManager['_scene'][_0x430a61(0x68c)](this),Game_Interpreter[_0x430a61(0x63e)][_0x430a61(0x5c1)]['call'](this);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x8b9)]=function(){const _0x4ae9a9=_0x47679c;return VisuMZ[_0x4ae9a9(0x2b8)][_0x4ae9a9(0x1ea)][_0x4ae9a9(0x3c8)][_0x4ae9a9(0x396)];},VisuMZ['BattleCore'][_0x47679c(0x73c)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x1d6)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x1d6)]=function(){const _0x2a68a8=_0x47679c;this['isPartyCommandWindowDisabled']()?this[_0x2a68a8(0x2ef)]():VisuMZ[_0x2a68a8(0x2b8)]['Scene_Battle_startPartyCommandSelection'][_0x2a68a8(0x22f)](this);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x2ef)]=function(){const _0x3541ec=_0x47679c;if(BattleManager[_0x3541ec(0x532)]())this[_0x3541ec(0x915)]();else BattleManager[_0x3541ec(0x8ad)]()&&VisuMZ[_0x3541ec(0x2b8)]['Scene_Battle_startPartyCommandSelection']['call'](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x738)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0xf8)],Scene_Battle['prototype'][_0x47679c(0xf8)]=function(){const _0x2fd12c=_0x47679c;BattleManager[_0x2fd12c(0x8ad)]()?(this[_0x2fd12c(0x80c)](),this['startActorCommandSelection']()):VisuMZ['BattleCore'][_0x2fd12c(0x738)][_0x2fd12c(0x22f)](this);},Scene_Battle['prototype'][_0x47679c(0x80c)]=function(){const _0x51308b=_0x47679c;if(!VisuMZ[_0x51308b(0x2b8)][_0x51308b(0x558)])return;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x51308b(0x5af)]())return;const _0x547c20=$gameParty['aliveMembers']()[_0x51308b(0x36c)](_0x37f1ea=>_0x37f1ea['isTpbCharged']()&&_0x37f1ea['canInput']());BattleManager[_0x51308b(0x315)]=_0x547c20[0x0]||null,BattleManager[_0x51308b(0x315)]&&BattleManager['_currentActor'][_0x51308b(0x4df)]('inputting');},VisuMZ[_0x47679c(0x2b8)]['Scene_Battle_createActorCommandWindow']=Scene_Battle['prototype'][_0x47679c(0x471)],Scene_Battle[_0x47679c(0x63e)]['createActorCommandWindow']=function(){const _0x5d4be9=_0x47679c;VisuMZ[_0x5d4be9(0x2b8)][_0x5d4be9(0x54c)]['call'](this),this['createActorCommandWindowBattleCore']();},Scene_Battle[_0x47679c(0x63e)]['createActorCommandWindowBattleCore']=function(){const _0x226fbd=_0x47679c,_0x235e53=this[_0x226fbd(0x6d2)];_0x235e53[_0x226fbd(0x950)](_0x226fbd(0x2a7),this[_0x226fbd(0x2e4)]['bind'](this)),_0x235e53[_0x226fbd(0x950)](_0x226fbd(0x626),this['actorCommandAutoBattle'][_0x226fbd(0x25d)](this)),_0x235e53[_0x226fbd(0x950)](_0x226fbd(0x316),this[_0x226fbd(0x3db)]['bind'](this)),BattleManager['isTpb']()&&(this[_0x226fbd(0x8b9)]()?delete _0x235e53[_0x226fbd(0x7bc)][_0x226fbd(0x3ea)]:_0x235e53[_0x226fbd(0x950)](_0x226fbd(0x3ea),this[_0x226fbd(0x78e)][_0x226fbd(0x25d)](this)));},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x2e4)]=function(){const _0x2e9934=_0x47679c;this[_0x2e9934(0x597)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x727)]=function(){const _0x37f87c=_0x47679c;BattleManager[_0x37f87c(0x84d)]()[_0x37f87c(0x5bd)](),BattleManager['finishActorInput'](),BattleManager['selectNextActor'](),this[_0x37f87c(0x1bf)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x3db)]=function(){const _0x19665b=_0x47679c,_0x2c9db3=BattleManager[_0x19665b(0x541)]();_0x2c9db3[_0x19665b(0x922)](this[_0x19665b(0x6d2)][_0x19665b(0x7ac)]()),this[_0x19665b(0x171)]();},Scene_Battle['prototype'][_0x47679c(0x78e)]=function(){const _0x46178e=_0x47679c;this['tpbActorSwitchConditionsMet']()?this[_0x46178e(0x375)]():this[_0x46178e(0x79c)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x558)]=![],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x2d9)]=function(){const _0x3e5827=_0x47679c;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager['isCTB']())return![];else{if(!VisuMZ['BattleCore']['TpbActiveChangeEnabled'])return![];const _0x4e7f57=$gameParty[_0x3e5827(0x8ef)]()['filter'](_0x57d976=>_0x57d976[_0x3e5827(0x296)]()&&_0x57d976['canInput']());return _0x4e7f57[_0x3e5827(0x42d)]>0x0&&BattleManager['actor']()!==_0x4e7f57[_0x4e7f57['length']-0x1];}},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x375)]=function(){const _0x2fa2c3=_0x47679c,_0x38311e=BattleManager[_0x2fa2c3(0x84d)](),_0x3b2031=_0x38311e[_0x2fa2c3(0x828)]();if(_0x3b2031)_0x3b2031[_0x2fa2c3(0x268)]();const _0x59a3b7=$gameParty['aliveMembers']()['filter'](_0x3f3f79=>_0x3f3f79['isTpbCharged']()&&_0x3f3f79[_0x2fa2c3(0x4d4)]()),_0x3903de=_0x59a3b7[_0x2fa2c3(0x2b9)](_0x38311e),_0x1abc3c=_0x59a3b7[_0x3903de+0x1];BattleManager[_0x2fa2c3(0x315)]=_0x1abc3c||null;if(_0x1abc3c)_0x1abc3c[_0x2fa2c3(0x4df)]('inputting');_0x38311e[_0x2fa2c3(0x4df)](_0x2fa2c3(0x7e9)),this[_0x2fa2c3(0x1bf)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x79c)]=function(){const _0x57853e=_0x47679c;this['_partyCommandWindow'][_0x57853e(0x629)](),this[_0x57853e(0x6d2)][_0x57853e(0x358)]();if(!VisuMZ[_0x57853e(0x2b8)][_0x57853e(0x558)])return;if(Imported[_0x57853e(0x51b)]&&BattleManager[_0x57853e(0x5af)]())return;if(BattleManager[_0x57853e(0x315)]){BattleManager[_0x57853e(0x315)]['setActionState'](_0x57853e(0x7e9));const _0x1a0a7f=BattleManager[_0x57853e(0x315)][_0x57853e(0x828)]();if(_0x1a0a7f)_0x1a0a7f['stepBack']();}BattleManager['_currentActor']=null;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x69a)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x675)],Scene_Battle[_0x47679c(0x63e)]['createHelpWindow']=function(){const _0xa77b30=_0x47679c;VisuMZ['BattleCore'][_0xa77b30(0x69a)]['call'](this),this[_0xa77b30(0x666)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x666)]=function(){const _0x24ec91=_0x47679c;this[_0x24ec91(0x6d2)]['setHelpWindow'](this[_0x24ec91(0x53a)]),this['_partyCommandWindow']['setHelpWindow'](this[_0x24ec91(0x53a)]);},Scene_Battle['prototype']['battleLayoutStyle']=function(){const _0x13bb53=_0x47679c;if($gameTemp[_0x13bb53(0x3bb)]!==undefined)return $gameTemp[_0x13bb53(0x3bb)];if(this[_0x13bb53(0x5d8)])return this[_0x13bb53(0x5d8)];return this['_battleLayoutStyle']=VisuMZ[_0x13bb53(0x2b8)][_0x13bb53(0x1ea)][_0x13bb53(0x7e2)][_0x13bb53(0x3dc)][_0x13bb53(0x6d4)]()[_0x13bb53(0x616)](),this['_battleLayoutStyle']===_0x13bb53(0xfe)&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this['_battleLayoutStyle']=_0x13bb53(0x4e0)),this[_0x13bb53(0x5d8)];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x563)]=Scene_Battle['prototype']['windowAreaHeight'],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x805)]=function(){const _0x29a170=_0x47679c,_0x3974ce=this['battleLayoutStyle']();switch(_0x3974ce){case'list':return this[_0x29a170(0x6ae)](Math[_0x29a170(0x766)](0x1,$gameParty[_0x29a170(0x59d)]()),!![]);break;default:return VisuMZ[_0x29a170(0x2b8)]['Scene_Battle_windowAreaHeight'][_0x29a170(0x22f)](this);break;}},VisuMZ['BattleCore'][_0x47679c(0x32a)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x5cb)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x5cb)]=function(){const _0x54544f=_0x47679c,_0x19de1b=this[_0x54544f(0x527)]();switch(_0x19de1b){case _0x54544f(0x26c):return this[_0x54544f(0x5f2)]();break;case _0x54544f(0x4e0):case _0x54544f(0x926):case'xp':case'portrait':default:return VisuMZ[_0x54544f(0x2b8)][_0x54544f(0x32a)]['call'](this);break;}},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x53b)]=function(){const _0x5e6fed=_0x47679c,_0x1d581e=this[_0x5e6fed(0x527)]();switch(_0x1d581e){case'xp':case _0x5e6fed(0x5d2):return this[_0x5e6fed(0x90f)]();break;case _0x5e6fed(0x26c):return this['statusWindowRectBorderStyle']();break;case _0x5e6fed(0x4e0):case _0x5e6fed(0x926):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6c4)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x89f)],Scene_Battle[_0x47679c(0x63e)]['partyCommandWindowRect']=function(){const _0x30df7e=_0x47679c,_0x7a5a12=this['battleLayoutStyle']();switch(_0x7a5a12){case'xp':case'portrait':return this[_0x30df7e(0x4ff)]();break;case _0x30df7e(0x26c):return this[_0x30df7e(0x42e)]();case'default':case _0x30df7e(0x926):default:return this[_0x30df7e(0x6b9)]();break;}},Scene_Battle['prototype'][_0x47679c(0x6b9)]=function(){const _0x1fd3f3=_0x47679c,_0x291bfb=VisuMZ[_0x1fd3f3(0x2b8)]['Settings'][_0x1fd3f3(0x7e2)],_0x89b8c5=_0x291bfb[_0x1fd3f3(0x639)]||0xc0,_0xe127c4=this[_0x1fd3f3(0x805)](),_0x256aa5=this[_0x1fd3f3(0x6d8)]()?Graphics[_0x1fd3f3(0x75b)]-_0x89b8c5:0x0,_0x5a1b0e=Graphics['boxHeight']-_0xe127c4;return new Rectangle(_0x256aa5,_0x5a1b0e,_0x89b8c5,_0xe127c4);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x135)]=function(){const _0x2ea7df=_0x47679c;return this[_0x2ea7df(0x89f)]();},VisuMZ[_0x47679c(0x2b8)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x47679c(0x63e)]['updateStatusWindowPosition'],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x3cf)]=function(){const _0x28b576=_0x47679c,_0x18cadf=this['battleLayoutStyle']();switch(_0x18cadf){case'xp':case _0x28b576(0x5d2):case'border':break;case'default':case'list':default:VisuMZ[_0x28b576(0x2b8)][_0x28b576(0x3c3)][_0x28b576(0x22f)](this);break;}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x288)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x379)],Scene_Battle['prototype'][_0x47679c(0x379)]=function(){const _0x2aba09=_0x47679c;VisuMZ['BattleCore'][_0x2aba09(0x288)][_0x2aba09(0x22f)](this),this[_0x2aba09(0x445)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x54a)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x326)],Scene_Battle[_0x47679c(0x63e)]['startEnemySelection']=function(){const _0x4e2ac4=_0x47679c;VisuMZ[_0x4e2ac4(0x2b8)][_0x4e2ac4(0x54a)][_0x4e2ac4(0x22f)](this),this[_0x4e2ac4(0x775)][_0x4e2ac4(0x43c)](),this[_0x4e2ac4(0x445)]();},Scene_Battle['prototype'][_0x47679c(0x445)]=function(){const _0x5402d5=_0x47679c,_0x16307d=this[_0x5402d5(0x527)]();['xp',_0x5402d5(0x5d2),_0x5402d5(0x26c)][_0x5402d5(0x3f6)](_0x16307d)&&this['_actorCommandWindow'][_0x5402d5(0x358)](),(_0x16307d===_0x5402d5(0x26c)||this['isSkillItemWindowsMiddle']())&&(this['_skillWindow'][_0x5402d5(0x358)](),this[_0x5402d5(0x197)][_0x5402d5(0x358)]());},VisuMZ['BattleCore'][_0x47679c(0x92c)]=Scene_Battle[_0x47679c(0x63e)]['onActorOk'],Scene_Battle[_0x47679c(0x63e)]['onActorOk']=function(){const _0x1f8878=_0x47679c;VisuMZ['BattleCore'][_0x1f8878(0x92c)][_0x1f8878(0x22f)](this),this['okTargetSelectionVisibility']();},Scene_Battle[_0x47679c(0x63e)]['isNonSubmenuCancel']=function(){const _0xe883d0=_0x47679c;return[_0xe883d0(0x684),'guard',_0xe883d0(0x316)][_0xe883d0(0x3f6)](this[_0xe883d0(0x6d2)]['currentSymbol']());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x284)]=Scene_Battle[_0x47679c(0x63e)]['onActorCancel'],Scene_Battle[_0x47679c(0x63e)]['onActorCancel']=function(){const _0x148b69=_0x47679c;this[_0x148b69(0x529)]()?(this[_0x148b69(0x5cc)][_0x148b69(0x92f)](),this[_0x148b69(0x919)][_0x148b69(0x50d)](),this['_actorCommandWindow'][_0x148b69(0x22b)]()):VisuMZ[_0x148b69(0x2b8)][_0x148b69(0x284)][_0x148b69(0x22f)](this),this[_0x148b69(0xde)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6e6)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x753)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x753)]=function(){const _0x1aefe0=_0x47679c;VisuMZ[_0x1aefe0(0x2b8)][_0x1aefe0(0x6e6)][_0x1aefe0(0x22f)](this),this[_0x1aefe0(0x6d5)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x163)]=Scene_Battle[_0x47679c(0x63e)]['onEnemyCancel'],Scene_Battle[_0x47679c(0x63e)]['onEnemyCancel']=function(){const _0x535932=_0x47679c;this[_0x535932(0x529)]()?(this[_0x535932(0x5cc)][_0x535932(0x92f)](),this['_enemyWindow'][_0x535932(0x50d)](),this['_actorCommandWindow'][_0x535932(0x22b)]()):VisuMZ['BattleCore'][_0x535932(0x163)][_0x535932(0x22f)](this),this[_0x535932(0xde)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x6d5)]=function(){const _0xd2f794=_0x47679c,_0x245378=this[_0xd2f794(0x527)]();(_0x245378===_0xd2f794(0x26c)||this[_0xd2f794(0x768)]())&&(this[_0xd2f794(0x6dd)][_0xd2f794(0x55a)](),this['_skillWindow'][_0xd2f794(0x390)]&&this[_0xd2f794(0x6dd)][_0xd2f794(0x92f)](),this[_0xd2f794(0x197)][_0xd2f794(0x55a)](),this[_0xd2f794(0x197)][_0xd2f794(0x390)]&&this[_0xd2f794(0x197)][_0xd2f794(0x92f)]());},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0xde)]=function(){const _0x133f6a=_0x47679c,_0x4e1380=this['battleLayoutStyle']();['xp',_0x133f6a(0x5d2),_0x133f6a(0x26c)][_0x133f6a(0x3f6)](_0x4e1380)&&this['_actorCommandWindow'][_0x133f6a(0x55a)](),this[_0x133f6a(0x6d5)]();},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x7f9)]=function(){const _0x10ef94=_0x47679c,_0x3afa0a=VisuMZ[_0x10ef94(0x2b8)][_0x10ef94(0x1ea)]['BattleLayout'],_0x19b174=Window_BattleStatus['prototype']['extraHeight'](),_0x18dd4b=Graphics['boxWidth']-(_0x3afa0a[_0x10ef94(0x639)]||0xc0),_0x489092=this[_0x10ef94(0x805)]()+_0x19b174,_0x351f97=this[_0x10ef94(0x6d8)]()?0x0:Graphics['boxWidth']-_0x18dd4b,_0x37500c=Graphics[_0x10ef94(0x113)]-_0x489092+_0x19b174;return new Rectangle(_0x351f97,_0x37500c,_0x18dd4b,_0x489092);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x90f)]=function(){const _0xdf0271=_0x47679c,_0x50aff5=Window_BattleStatus['prototype']['extraHeight'](),_0x35c507=Graphics[_0xdf0271(0x75b)],_0x54e68e=this['windowAreaHeight']()+_0x50aff5,_0x10106e=0x0,_0x196d67=Graphics[_0xdf0271(0x113)]-_0x54e68e+_0x50aff5;return new Rectangle(_0x10106e,_0x196d67,_0x35c507,_0x54e68e);},Scene_Battle['prototype'][_0x47679c(0x4ff)]=function(){const _0x3cd09e=_0x47679c,_0x1bbe00=Graphics[_0x3cd09e(0x75b)]/0x2,_0x58afa0=this[_0x3cd09e(0x6ae)](VisuMZ[_0x3cd09e(0x2b8)]['Settings'][_0x3cd09e(0x7e2)][_0x3cd09e(0x66f)],!![]),_0x2305ad=Math[_0x3cd09e(0x23b)]((Graphics[_0x3cd09e(0x75b)]-_0x1bbe00)/0x2),_0x451d5a=Graphics[_0x3cd09e(0x113)]-_0x58afa0-this['statusWindowRectXPStyle']()[_0x3cd09e(0x170)];return new Rectangle(_0x2305ad,_0x451d5a,_0x1bbe00,_0x58afa0);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x5f2)]=function(){const _0xdfa9b5=_0x47679c,_0x2ae664=Graphics[_0xdfa9b5(0x1ce)],_0x23e603=Math[_0xdfa9b5(0x23b)]((Graphics[_0xdfa9b5(0x75b)]-_0x2ae664)/0x2),_0x2d989b=this[_0xdfa9b5(0x6ac)](),_0x375564=(Graphics[_0xdfa9b5(0x170)]-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x23e603,_0x375564,_0x2ae664,_0x2d989b);},Scene_Battle['prototype'][_0x47679c(0x782)]=function(){const _0x3f071e=_0x47679c,_0x274603=Graphics[_0x3f071e(0x1ce)],_0x1bb46c=Math['round']((Graphics[_0x3f071e(0x75b)]-_0x274603)/0x2),_0x11b1d8=this[_0x3f071e(0x6ae)](0x4,!![]),_0x2413e2=Graphics[_0x3f071e(0x113)]-_0x11b1d8+(Graphics[_0x3f071e(0x170)]-Graphics[_0x3f071e(0x113)])/0x2;return new Rectangle(_0x1bb46c,_0x2413e2,_0x274603,_0x11b1d8);},Scene_Battle[_0x47679c(0x63e)]['partyCommandWindowRectBorderStyle']=function(){const _0x3135d9=_0x47679c,_0x26c6cc=Math[_0x3135d9(0x8c0)](Graphics[_0x3135d9(0x1ce)]/0x3),_0x3ad39c=this[_0x3135d9(0x6d8)]()?(Graphics[_0x3135d9(0x1ce)]+Graphics['boxWidth'])/0x2-_0x26c6cc:(Graphics[_0x3135d9(0x1ce)]-Graphics[_0x3135d9(0x75b)])/-0x2,_0x2e6eb3=this[_0x3135d9(0x5f2)](),_0x5a3e70=_0x2e6eb3['y']+_0x2e6eb3['height'],_0xdc052e=this[_0x3135d9(0x782)](),_0x528b08=_0xdc052e['y']-_0x5a3e70;return new Rectangle(_0x3ad39c,_0x5a3e70,_0x26c6cc,_0x528b08);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x360)]=function(){const _0x581aeb=_0x47679c,_0x3c533a=Math[_0x581aeb(0x802)](Graphics[_0x581aeb(0x1ce)]/0x3),_0x2e97ac=Math[_0x581aeb(0x23b)]((Graphics['boxWidth']-_0x3c533a)/0x2),_0x4c956d=this['partyCommandWindowRectBorderStyle'](),_0x1c3ab4=_0x4c956d['y'],_0x4976ca=_0x4c956d[_0x581aeb(0x170)];return new Rectangle(_0x2e97ac,_0x1c3ab4,_0x3c533a,_0x4976ca);},Scene_Battle[_0x47679c(0x63e)]['repositionCancelButtonBorderStyle']=function(){const _0x26d80a=_0x47679c;this[_0x26d80a(0x149)]['y']=this[_0x26d80a(0x53a)]['y']+this[_0x26d80a(0x53a)][_0x26d80a(0x170)],this[_0x26d80a(0x6d8)]()?this['battleLayoutStyle']()===_0x26d80a(0x26c)?this[_0x26d80a(0x149)]['x']=0x8:this['_cancelButton']['x']=-this[_0x26d80a(0x149)][_0x26d80a(0x1ce)]-0x4:this[_0x26d80a(0x149)]['x']=Graphics[_0x26d80a(0x1ce)]-(Graphics[_0x26d80a(0x1ce)]-Graphics['boxWidth'])/0x2-this[_0x26d80a(0x149)]['width']-0x4;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x12a)]=Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x69c)],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x69c)]=function(){const _0x2dabb7=_0x47679c;if(this[_0x2dabb7(0x527)]()===_0x2dabb7(0x26c))return this[_0x2dabb7(0x360)]();else return this[_0x2dabb7(0x768)]()?this[_0x2dabb7(0x703)]():VisuMZ[_0x2dabb7(0x2b8)][_0x2dabb7(0x12a)][_0x2dabb7(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0xe6)]=Scene_Battle['prototype']['itemWindowRect'],Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x797)]=function(){const _0x9dde1d=_0x47679c;if(this['battleLayoutStyle']()===_0x9dde1d(0x26c))return this[_0x9dde1d(0x360)]();else return this[_0x9dde1d(0x768)]()?this[_0x9dde1d(0x703)]():VisuMZ[_0x9dde1d(0x2b8)][_0x9dde1d(0xe6)][_0x9dde1d(0x22f)](this);},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x768)]=function(){const _0x1fbfc4=_0x47679c;return VisuMZ[_0x1fbfc4(0x2b8)]['Settings']['BattleLayout'][_0x1fbfc4(0x2e8)];},Scene_Battle[_0x47679c(0x63e)][_0x47679c(0x703)]=function(){const _0x1d00c4=_0x47679c,_0x35532c=Sprite_Button[_0x1d00c4(0x63e)][_0x1d00c4(0x1aa)]()*0x2+0x4;let _0x1bd769=Graphics[_0x1d00c4(0x75b)]-_0x35532c;Imported[_0x1d00c4(0x4a7)]&&SceneManager['isSideButtonLayout']()&&(_0x1bd769+=_0x35532c);const _0x240fee=this[_0x1d00c4(0x305)](),_0x1a929f=Graphics[_0x1d00c4(0x113)]-_0x240fee-this[_0x1d00c4(0x53b)]()['height']+Window_BattleStatus['prototype'][_0x1d00c4(0x7b8)](),_0xfaec30=0x0;return new Rectangle(_0xfaec30,_0x240fee,_0x1bd769,_0x1a929f);},Scene_Battle['prototype'][_0x47679c(0x8bb)]=function(){const _0x24fd39=_0x47679c;if(!VisuMZ[_0x24fd39(0x2b8)][_0x24fd39(0x1ea)]['Enemy'][_0x24fd39(0x707)])return;this[_0x24fd39(0x329)]=new Sprite(),this[_0x24fd39(0x329)]['x']=this['_windowLayer']['x'],this['_enemyNameContainer']['y']=this['_windowLayer']['y'];const _0x5100c8=this['children'][_0x24fd39(0x2b9)](this[_0x24fd39(0x33c)]);this[_0x24fd39(0x5ab)](this[_0x24fd39(0x329)],_0x5100c8);for(let _0x233da0=0x0;_0x233da0<0x8;_0x233da0++){const _0x5412f7=new Window_EnemyName(_0x233da0);this[_0x24fd39(0x329)][_0x24fd39(0x1d2)](_0x5412f7);}},Sprite_Battler['_motionSpeed']=VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1ea)][_0x47679c(0x559)][_0x47679c(0x320)],VisuMZ['BattleCore'][_0x47679c(0x5c7)]=Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x6b1)],Sprite_Battler['prototype']['initMembers']=function(){const _0x4c3f12=_0x47679c;VisuMZ[_0x4c3f12(0x2b8)][_0x4c3f12(0x5c7)][_0x4c3f12(0x22f)](this),this[_0x4c3f12(0xfc)]();if(this[_0x4c3f12(0x365)]===Sprite_Enemy)this[_0x4c3f12(0x592)]();this[_0x4c3f12(0x579)]();},Sprite_Battler['prototype'][_0x47679c(0xfc)]=function(){const _0x18bc40=_0x47679c;this[_0x18bc40(0x854)]=0x0,this[_0x18bc40(0x4b2)]=0x0,this[_0x18bc40(0x27a)]=0x0,this['_targetFloatHeight']=0x0,this[_0x18bc40(0x137)]=0x0,this[_0x18bc40(0x2da)]=0x0,this['_floatEasing']='Linear',this[_0x18bc40(0x342)]=0x0,this['_jumpMaxHeight']=0x0,this['_jumpDuration']=0x0,this[_0x18bc40(0x5f4)]=0x0,this[_0x18bc40(0x39d)]=0xff,this[_0x18bc40(0x668)]=0x0,this[_0x18bc40(0x63f)]=0x0,this[_0x18bc40(0x256)]='Linear',this[_0x18bc40(0x11f)]=0x0,this[_0x18bc40(0x4e4)]=0x0,this['_angleDuration']=0x0,this[_0x18bc40(0x511)]=0x0,this['_angleEasing']=_0x18bc40(0x49d),this[_0x18bc40(0x859)]=!![],this[_0x18bc40(0xe4)]=0x0,this[_0x18bc40(0x6c7)]=0x0,this[_0x18bc40(0x378)]=0x0,this[_0x18bc40(0x895)]=0x0,this[_0x18bc40(0x7e5)]=0x0,this[_0x18bc40(0x215)]=0x0,this[_0x18bc40(0x67b)]=_0x18bc40(0x49d),this['_growX']=0x1,this[_0x18bc40(0x1da)]=0x1,this['_targetGrowX']=0x1,this['_targetGrowY']=0x1,this[_0x18bc40(0x5e5)]=0x0,this['_growWholeDuration']=0x0,this[_0x18bc40(0x17f)]=_0x18bc40(0x49d),this[_0x18bc40(0x1a9)]=0x1,this['_targetHomeX']=0x0,this['_targetHomeY']=0x0,this[_0x18bc40(0x30e)]=0x0,this['_homeWholeDuration']=0x0,this[_0x18bc40(0x4b6)]=_0x18bc40(0x49d);},Sprite_Battler['prototype'][_0x47679c(0x592)]=function(){const _0x28e3ec=_0x47679c;this['_shadowSprite']=new Sprite(),this[_0x28e3ec(0x29f)][_0x28e3ec(0x93f)]=ImageManager[_0x28e3ec(0x1cb)](_0x28e3ec(0x913)),this['_shadowSprite'][_0x28e3ec(0x93f)]['smooth']=VisuMZ[_0x28e3ec(0x2b8)][_0x28e3ec(0x1ea)][_0x28e3ec(0x559)][_0x28e3ec(0x138)],this['_shadowSprite'][_0x28e3ec(0x402)]['x']=0.5,this[_0x28e3ec(0x29f)][_0x28e3ec(0x402)]['y']=0.5,this[_0x28e3ec(0x29f)]['y']=-0x2,this[_0x28e3ec(0x29f)][_0x28e3ec(0x5ec)]=![],this[_0x28e3ec(0x1d2)](this['_shadowSprite']);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x579)]=function(){const _0x1ac4c2=_0x47679c;this[_0x1ac4c2(0x5e8)]=new Sprite(),this['_distortionSprite'][_0x1ac4c2(0x402)]['x']=0.5,this[_0x1ac4c2(0x5e8)][_0x1ac4c2(0x402)]['y']=0.5,this['addChild'](this[_0x1ac4c2(0x5e8)]);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x570)]=function(){const _0x216b62=_0x47679c;if(!this[_0x216b62(0x5e8)])return;if(this[_0x216b62(0x29f)]){const _0x3b4d58=this[_0x216b62(0x3c0)](this['_distortionSprite']);this[_0x216b62(0x5ab)](this[_0x216b62(0x29f)],_0x3b4d58),this[_0x216b62(0x26d)]();}this['_svBattlerSprite']&&this[_0x216b62(0x5e8)]['addChild'](this[_0x216b62(0x692)]),this[_0x216b62(0xee)]&&this[_0x216b62(0x5e8)][_0x216b62(0x1d2)](this[_0x216b62(0xee)]),this[_0x216b62(0x1fb)]&&this[_0x216b62(0x5e8)][_0x216b62(0x1d2)](this[_0x216b62(0x1fb)]),this[_0x216b62(0x78a)]&&this[_0x216b62(0x5e8)]['addChild'](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x26d)]=function(){const _0x28b8e0=_0x47679c;if(!this[_0x28b8e0(0x29f)])return;if(this[_0x28b8e0(0x671)]&&this['_battler'][_0x28b8e0(0x4e6)]()){const _0x84749d=this[_0x28b8e0(0x29f)][_0x28b8e0(0x93f)];this[_0x28b8e0(0x29f)]['setFrame'](0x0,0x0,_0x84749d['width'],_0x84749d['height']);}else this[_0x28b8e0(0x29f)][_0x28b8e0(0x61c)](0x0,0x0,0x0,0x0);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x106)]=function(){const _0xb7ef75=_0x47679c;return SceneManager['isSceneBattle']()?SceneManager[_0xb7ef75(0x56c)]['_spriteset'][_0xb7ef75(0x486)]:this[_0xb7ef75(0x868)];},Sprite_Battler[_0x47679c(0x63e)]['setupTextPopup']=function(_0x33c634,_0x2e9b20){const _0x3c4631=_0x47679c;if(!this[_0x3c4631(0x671)][_0x3c4631(0x936)]())return;const _0x567eb5=VisuMZ[_0x3c4631(0x2b8)][_0x3c4631(0x1ea)][_0x3c4631(0x2c7)],_0x34bde8=new Sprite_Damage();_0x34bde8[_0x3c4631(0x243)]=_0x567eb5[_0x3c4631(0x46b)],this[_0x3c4631(0x6ea)](_0x34bde8),_0x34bde8['setupTextPopup'](_0x33c634,_0x2e9b20),this[_0x3c4631(0x339)](_0x34bde8);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x7ad)]=function(_0x197cdd,_0x351650,_0x1aa8da){const _0x1157ad=_0x47679c;if(!this[_0x1157ad(0x671)][_0x1157ad(0x936)]())return;const _0x21548f=VisuMZ[_0x1157ad(0x2b8)][_0x1157ad(0x1ea)][_0x1157ad(0x2c7)],_0x625ed2=new Sprite_Damage();_0x625ed2[_0x1157ad(0x243)]=_0x21548f[_0x1157ad(0x46b)],this[_0x1157ad(0x6ea)](_0x625ed2),_0x625ed2['setupIconTextPopup'](_0x197cdd,_0x351650,_0x1aa8da),this[_0x1157ad(0x339)](_0x625ed2);},Sprite_Battler['prototype'][_0x47679c(0x702)]=function(){const _0x5bd66e=_0x47679c;if(!this[_0x5bd66e(0x671)][_0x5bd66e(0x1f3)]())return;while(this[_0x5bd66e(0x671)][_0x5bd66e(0x1f3)]()){this['_battler'][_0x5bd66e(0x936)]()&&this[_0x5bd66e(0x193)]();}this['_battler'][_0x5bd66e(0x585)](),this[_0x5bd66e(0x671)][_0x5bd66e(0x85b)]();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x193)]=function(){const _0x4831db=_0x47679c,_0x301d58=VisuMZ['BattleCore'][_0x4831db(0x1ea)][_0x4831db(0x2c7)],_0x505bdd=new Sprite_Damage();_0x505bdd[_0x4831db(0x243)]=_0x301d58[_0x4831db(0x46b)],this['sortDamageSprites'](_0x505bdd),_0x505bdd[_0x4831db(0x629)](this[_0x4831db(0x671)]),_0x505bdd[_0x4831db(0x15e)](this[_0x4831db(0x671)]),this[_0x4831db(0x339)](_0x505bdd);},Sprite_Battler[_0x47679c(0x63e)]['addDamageSprite']=function(_0x48b0bb){const _0x545e48=_0x47679c;this[_0x545e48(0x15b)][_0x545e48(0x6b4)](_0x48b0bb);if(this['isShownOnBattlePortrait']())SceneManager[_0x545e48(0x56c)][_0x545e48(0x5cc)][_0x545e48(0x339)](_0x48b0bb,this[_0x545e48(0x671)]);else{this[_0x545e48(0x106)]()[_0x545e48(0x1d2)](_0x48b0bb);if(SceneManager[_0x545e48(0x2c4)]())_0x48b0bb['scale']['x']=-0x1;}},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x548)]=function(){const _0x26ede0=_0x47679c;return!$gameSystem['isSideView']()&&this[_0x26ede0(0x671)]&&this[_0x26ede0(0x671)][_0x26ede0(0xf2)]();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x6ea)]=function(_0x1438a6){const _0x27ec32=_0x47679c;this[_0x27ec32(0x8a3)](_0x1438a6,!![]);const _0x73467b=VisuMZ[_0x27ec32(0x2b8)][_0x27ec32(0x1ea)][_0x27ec32(0x2c7)],_0x4d3510=SceneManager[_0x27ec32(0x2c4)]()?-0x1:0x1;if(_0x73467b[_0x27ec32(0x77e)])for(const _0x84115f of this['_damages']){_0x84115f['x']+=_0x73467b['PopupShiftX']*_0x4d3510,_0x84115f['y']+=_0x73467b['PopupShiftY'];}else{const _0x31830f=this[_0x27ec32(0x15b)][this[_0x27ec32(0x15b)][_0x27ec32(0x42d)]-0x1];_0x31830f&&(_0x1438a6['x']=_0x31830f['x']+_0x73467b[_0x27ec32(0xe2)]*_0x4d3510,_0x1438a6['y']=_0x31830f['y']+_0x73467b[_0x27ec32(0x7b2)]);}},Sprite_Battler[_0x47679c(0x63e)]['alignBattleCoreDamageSprite']=function(_0x18b223,_0x21349a){const _0x434f8a=_0x47679c,_0x1d13f7=SceneManager[_0x434f8a(0x2c4)]()?-0x1:0x1;let _0x43a76f=this['_baseX'];_0x43a76f+=this['extraPositionX']();let _0x5568e9=this['_baseY'];const _0x3b5882=this[_0x434f8a(0x5e8)][_0x434f8a(0x34c)]['y'];_0x5568e9+=this[_0x434f8a(0x7ff)]();const _0x1a59f1=SceneManager['_scene']['_statusWindow'];if(_0x1a59f1&&this['parent']===_0x1a59f1){_0x43a76f+=_0x1a59f1['x']-this[_0x434f8a(0x168)]();const _0x19b307=_0x1a59f1[_0x434f8a(0x663)]()*0x3/0x4;_0x5568e9=_0x1a59f1['y']+_0x19b307,_0x5568e9=Math['min'](_0x5568e9,_0x1a59f1['y']+this['y']-this[_0x434f8a(0x170)]+_0x19b307);}_0x18b223['x']=Math[_0x434f8a(0x23b)](_0x43a76f+this[_0x434f8a(0x168)]()*_0x1d13f7),_0x18b223['y']=Math[_0x434f8a(0x23b)](_0x5568e9+this[_0x434f8a(0x11c)]());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x7e8)]=Sprite_Battler[_0x47679c(0x63e)]['damageOffsetX'],Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x168)]=function(){const _0x1ade5f=_0x47679c;let _0x57aa9b=VisuMZ['BattleCore'][_0x1ade5f(0x7e8)][_0x1ade5f(0x22f)](this),_0x4f0913=VisuMZ[_0x1ade5f(0x2b8)][_0x1ade5f(0x1ea)][_0x1ade5f(0x2c7)][_0x1ade5f(0x928)]||0x0;return Math[_0x1ade5f(0x23b)](_0x57aa9b+_0x4f0913);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x85e)]=Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x11c)],Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x11c)]=function(){const _0x539286=_0x47679c;let _0x36e104=VisuMZ[_0x539286(0x2b8)][_0x539286(0x85e)]['call'](this);switch(VisuMZ[_0x539286(0x2b8)][_0x539286(0x1ea)]['Damage'][_0x539286(0x88d)]){case _0x539286(0x82e):_0x36e104-=this[_0x539286(0x170)]*this[_0x539286(0x34c)]['y'];break;case _0x539286(0x54e):_0x36e104-=this[_0x539286(0x170)]*this[_0x539286(0x34c)]['y']*0.5;break;}let _0x467e12=VisuMZ[_0x539286(0x2b8)][_0x539286(0x1ea)][_0x539286(0x2c7)]['PopupOffsetY']||0x0;return Math[_0x539286(0x23b)](_0x36e104+_0x467e12);},Sprite_Actor['prototype'][_0x47679c(0x168)]=function(){const _0x19f18f=_0x47679c;return Sprite_Battler[_0x19f18f(0x63e)]['damageOffsetX'][_0x19f18f(0x22f)](this);},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x11c)]=function(){const _0x1fcb4d=_0x47679c;return Sprite_Battler[_0x1fcb4d(0x63e)][_0x1fcb4d(0x11c)][_0x1fcb4d(0x22f)](this);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x846)]=function(_0xe92c8f){const _0x1f6d40=_0x47679c;this[_0x1f6d40(0x548)]()?SceneManager[_0x1f6d40(0x56c)][_0x1f6d40(0x5cc)][_0x1f6d40(0x7c2)](_0xe92c8f):(this[_0x1f6d40(0x106)]()[_0x1f6d40(0x70d)](_0xe92c8f),this['_damages'][_0x1f6d40(0x3fc)](_0xe92c8f),_0xe92c8f[_0x1f6d40(0x25f)]());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6e9)]=Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x252)],Sprite_Battler['prototype'][_0x47679c(0x252)]=function(_0x2f3092,_0x2464e8){const _0x3b3d86=_0x47679c,_0x2eef66=VisuMZ[_0x3b3d86(0x2b8)][_0x3b3d86(0x1ea)];if(this[_0x3b3d86(0x365)]===Sprite_Actor)_0x2f3092+=_0x2eef66['Actor'][_0x3b3d86(0x49c)]||0x0,_0x2464e8+=_0x2eef66[_0x3b3d86(0x559)][_0x3b3d86(0x428)]||0x0;else this[_0x3b3d86(0x365)]===Sprite_Enemy&&(_0x2f3092+=_0x2eef66[_0x3b3d86(0x7d1)]['OffsetX']||0x0,_0x2464e8+=_0x2eef66[_0x3b3d86(0x7d1)]['OffsetY']||0x0);this[_0x3b3d86(0x671)]&&(_0x2f3092=this['_battler']['_forcedHomeX']??_0x2f3092,_0x2464e8=this[_0x3b3d86(0x671)][_0x3b3d86(0x12c)]??_0x2464e8),VisuMZ[_0x3b3d86(0x2b8)]['Sprite_Battler_setHome'][_0x3b3d86(0x22f)](this,_0x2f3092,_0x2464e8),this['_targetHomeX']=this['_homeX'],this[_0x3b3d86(0x51f)]=this[_0x3b3d86(0x843)],this[_0x3b3d86(0x30e)]=0x0,this['_homeWholeDuration']=0x0,this[_0x3b3d86(0x4b6)]=_0x3b3d86(0x49d);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x144)]=Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x874)],Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x874)]=function(){const _0x9aaa58=_0x47679c;VisuMZ[_0x9aaa58(0x2b8)][_0x9aaa58(0x144)]['call'](this),!this[_0x9aaa58(0x671)]&&this[_0x9aaa58(0x2bf)]&&(this[_0x9aaa58(0x2bf)][_0x9aaa58(0x5ec)]=![]);},VisuMZ['BattleCore'][_0x47679c(0x3c9)]=Sprite_Battler[_0x47679c(0x63e)]['updateMain'],Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x1a5)]=function(){const _0x12e82e=_0x47679c;this[_0x12e82e(0x346)](),this['updateSkew'](),this[_0x12e82e(0x87b)](),this[_0x12e82e(0x8b6)](),this[_0x12e82e(0x6af)](),VisuMZ[_0x12e82e(0x2b8)][_0x12e82e(0x3c9)][_0x12e82e(0x22f)](this);if(this[_0x12e82e(0x365)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x47679c(0x2b8)]['Sprite_Battler_updatePosition']=Sprite_Battler['prototype']['updatePosition'],Sprite_Battler['prototype'][_0x47679c(0x6e8)]=function(){const _0x142fe=_0x47679c;this[_0x142fe(0x2a9)](),VisuMZ['BattleCore'][_0x142fe(0x582)][_0x142fe(0x22f)](this),this['updatePositionBattleCore'](),this[_0x142fe(0x1e2)]();},Sprite_Battler[_0x47679c(0x63e)]['startHomeMove']=function(_0x893a7f,_0x5003c8,_0x2a704a,_0x22e6af){const _0x5b87bd=_0x47679c;(this[_0x5b87bd(0x32b)]!==_0x893a7f||this['_targetHomeY']!==_0x5003c8)&&(this['_targetHomeX']=_0x893a7f,this[_0x5b87bd(0x51f)]=_0x5003c8,this[_0x5b87bd(0x30e)]=_0x2a704a,this[_0x5b87bd(0x308)]=_0x2a704a,this[_0x5b87bd(0x4b6)]=_0x22e6af,_0x2a704a<=0x0&&this['onHomeMoveEnd']());},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x2a9)]=function(){const _0xe5768e=_0x47679c;if(this[_0xe5768e(0x30e)]<=0x0)return;const _0x55dd33=this[_0xe5768e(0x30e)],_0xde3584=this[_0xe5768e(0x308)],_0x58b366=this[_0xe5768e(0x4b6)];Imported[_0xe5768e(0x4a7)]?(this[_0xe5768e(0x76a)]=this[_0xe5768e(0x90b)](this[_0xe5768e(0x76a)],this[_0xe5768e(0x32b)],_0x55dd33,_0xde3584,_0x58b366),this[_0xe5768e(0x843)]=this['applyEasing'](this[_0xe5768e(0x843)],this['_targetHomeY'],_0x55dd33,_0xde3584,_0x58b366)):(this[_0xe5768e(0x76a)]=(this[_0xe5768e(0x76a)]*(_0x55dd33-0x1)+this[_0xe5768e(0x32b)])/_0x55dd33,this['_homeY']=(this[_0xe5768e(0x843)]*(_0x55dd33-0x1)+this['_targetHomeY'])/_0x55dd33);this[_0xe5768e(0x30e)]--;if(this[_0xe5768e(0x30e)]<=0x0)this[_0xe5768e(0x934)]();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x934)]=function(){const _0x26f9f0=_0x47679c;this['_homeX']=this[_0x26f9f0(0x32b)],this[_0x26f9f0(0x843)]=this['_targetHomeY'];},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x735)]=function(){const _0x453b17=_0x47679c;this[_0x453b17(0x854)]=this['x'],this[_0x453b17(0x4b2)]=this['y'],this['updateFloat'](),this[_0x453b17(0x46e)](),this['x']+=this[_0x453b17(0x57e)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x453b17(0x200)](),this['x']=Math[_0x453b17(0x8c0)](this['x']),this['y']=Math[_0x453b17(0x8c0)](this['y']);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x57e)]=function(){let _0x1fd3b7=0x0;return _0x1fd3b7;},Sprite_Battler['prototype']['extraPositionY']=function(){const _0x5e1e57=_0x47679c;let _0x196797=0x0;return this[_0x5e1e57(0x671)]&&!this['_battler']['isBattlerGrounded']()&&(_0x196797-=this[_0x5e1e57(0x27a)],_0x196797-=this[_0x5e1e57(0x342)]),_0x196797;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x200)]=function(){const _0x1c86bc=_0x47679c;let _0x5496f6=0x0;if(this[_0x1c86bc(0x5e8)]&&this[_0x1c86bc(0x365)]!==Sprite_SvEnemy){const _0x2a8a4f=this[_0x1c86bc(0x5e8)][_0x1c86bc(0x34c)]['y'];_0x5496f6-=(_0x2a8a4f-0x1)*this[_0x1c86bc(0x170)];}return _0x5496f6;},Sprite_Battler['prototype'][_0x47679c(0x8b6)]=function(){const _0x15447c=_0x47679c,_0x5173d4=this[_0x15447c(0x671)]&&this['_battler'][_0x15447c(0x5cf)]();this[_0x15447c(0x1a9)]=(_0x5173d4?-0x1:0x1)*Math[_0x15447c(0x85c)](this[_0x15447c(0x34c)]['x']);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x172)]=function(_0x4f351e,_0x44caae,_0x152b2c){const _0x45e826=_0x47679c;if(!this[_0x45e826(0x8fe)]())return;if(this[_0x45e826(0x429)]===_0x4f351e)return;this['_targetFloatHeight']=_0x4f351e,this['_floatDuration']=_0x44caae,this['_floatWholeDuration']=_0x44caae,this[_0x45e826(0x3ef)]=_0x152b2c||_0x45e826(0x49d);if(_0x44caae<=0x0)this[_0x45e826(0x27a)]=_0x4f351e;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x2e1)]=function(){const _0x1a0a2b=_0x47679c;if(this[_0x1a0a2b(0x137)]<=0x0)return;const _0x88c56c=this[_0x1a0a2b(0x137)],_0x43b4bb=this['_floatWholeDuration'],_0x459280=this[_0x1a0a2b(0x3ef)];Imported[_0x1a0a2b(0x4a7)]?this[_0x1a0a2b(0x27a)]=this[_0x1a0a2b(0x90b)](this[_0x1a0a2b(0x27a)],this[_0x1a0a2b(0x429)],_0x88c56c,_0x43b4bb,_0x459280):this[_0x1a0a2b(0x27a)]=(this[_0x1a0a2b(0x27a)]*(_0x88c56c-0x1)+this[_0x1a0a2b(0x429)])/_0x88c56c;this['_floatDuration']--;if(this['_floatDuration']<=0x0)this[_0x1a0a2b(0x40c)]();},Sprite_Battler['prototype']['onFloatEnd']=function(){const _0x1fdd83=_0x47679c;this[_0x1fdd83(0x27a)]=this['_targetFloatHeight'];},Sprite_Battler['prototype'][_0x47679c(0x6dc)]=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x654)]=function(_0x19920c,_0x102aa6){const _0x574421=_0x47679c;if(!this['canMove']())return;if(_0x102aa6<=0x0)return;this[_0x574421(0x55b)]=_0x19920c,this[_0x574421(0x267)]=_0x102aa6,this[_0x574421(0x5f4)]=_0x102aa6;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x46e)]=function(){const _0x45343b=_0x47679c;if(this[_0x45343b(0x267)]<=0x0)return;const _0x2ebd94=this['_jumpWholeDuration']-this[_0x45343b(0x267)],_0x3fec7b=this[_0x45343b(0x5f4)]/0x2,_0x111b94=this['_jumpMaxHeight'],_0x510cc4=-_0x111b94/Math[_0x45343b(0x397)](_0x3fec7b,0x2);this[_0x45343b(0x342)]=_0x510cc4*Math[_0x45343b(0x397)](_0x2ebd94-_0x3fec7b,0x2)+_0x111b94,this[_0x45343b(0x267)]--;if(this['_jumpDuration']<=0x0)return this[_0x45343b(0x71a)]();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x71a)]=function(){const _0x4aa3cc=_0x47679c;this[_0x4aa3cc(0x342)]=0x0;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x853)]=function(){return this['_jumpDuration']>0x0;},Sprite_Battler[_0x47679c(0x63e)]['startOpacity']=function(_0x140e62,_0x5dc81d,_0x296514){const _0x3c08ed=_0x47679c;if(this['_targetOpacity']===_0x140e62)return;this['_targetOpacity']=_0x140e62,this[_0x3c08ed(0x668)]=_0x5dc81d,this[_0x3c08ed(0x63f)]=_0x5dc81d,this[_0x3c08ed(0x256)]=_0x296514||'Linear';if(_0x5dc81d<=0x0)this[_0x3c08ed(0x38c)]=_0x140e62;},Sprite_Battler[_0x47679c(0x63e)]['updateOpacity']=function(){const _0x30cb86=_0x47679c;if(this[_0x30cb86(0x365)][_0x30cb86(0x620)]===_0x30cb86(0x494))return;if(this[_0x30cb86(0x668)]<=0x0)return;const _0x448966=this[_0x30cb86(0x668)],_0x12c59b=this['_opacityWholeDuration'],_0x49568a=this[_0x30cb86(0x256)];Imported[_0x30cb86(0x4a7)]?this[_0x30cb86(0x38c)]=this[_0x30cb86(0x90b)](this[_0x30cb86(0x38c)],this[_0x30cb86(0x39d)],_0x448966,_0x12c59b,_0x49568a):this[_0x30cb86(0x38c)]=(this['opacity']*(_0x448966-0x1)+this[_0x30cb86(0x39d)])/_0x448966;this[_0x30cb86(0x668)]--;if(this['_opacityDuration']<=0x0)this[_0x30cb86(0x418)]();},Sprite_Battler[_0x47679c(0x63e)]['onOpacityEnd']=function(){const _0x349d0a=_0x47679c;this[_0x349d0a(0x38c)]=this[_0x349d0a(0x39d)];},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x756)]=function(){const _0x344ba9=_0x47679c;return this[_0x344ba9(0x668)]>0x0;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x599)]=function(){const _0x3d398c=_0x47679c;this[_0x3d398c(0x29f)][_0x3d398c(0x5ec)]=this['_battler'][_0x3d398c(0x8de)](),this['updateShadowPosition']();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x57c)]=function(){const _0x2a652b=_0x47679c;if(!this[_0x2a652b(0x29f)])return;this['_shadowSprite']['y']=this[_0x2a652b(0x4b2)]-this['y']-0x2;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x39c)]=function(){const _0x558d52=_0x47679c;if(!this[_0x558d52(0x671)])return;this[_0x558d52(0x6db)]=this['_battler'][_0x558d52(0x5dc)](),this['_shadowScaleY']=this[_0x558d52(0x671)][_0x558d52(0x232)]();},Game_BattlerBase[_0x47679c(0x63e)][_0x47679c(0x5dc)]=function(){const _0x539588=_0x47679c,_0xc7293d=this[_0x539588(0xf2)]()?this['actor']():this[_0x539588(0xdc)]();if(_0xc7293d){const _0x4dd7b7=_0xc7293d[_0x539588(0x4d1)];if(_0x4dd7b7[_0x539588(0x503)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x4dd7b7[_0x539588(0x503)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase['prototype'][_0x47679c(0x232)]=function(){const _0x422acf=_0x47679c,_0x1da85b=this[_0x422acf(0xf2)]()?this[_0x422acf(0x84d)]():this['enemy']();if(_0x1da85b){const _0x470d54=_0x1da85b[_0x422acf(0x4d1)];if(_0x470d54[_0x422acf(0x503)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x470d54[_0x422acf(0x503)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x346)]=function(){const _0x3e9b34=_0x47679c;if(this['constructor']===Sprite_SvEnemy)return;this['updateGrow'](),this[_0x3e9b34(0x6b5)]();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x6b5)]=function(){const _0x2e5399=_0x47679c,_0x2ecd2f=this['_distortionSprite'];_0x2ecd2f&&(_0x2ecd2f['scale']['x']=this[_0x2e5399(0x2a0)](),_0x2ecd2f['scale']['y']=this['mainSpriteScaleY']());},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x2a0)]=function(){const _0x200fe0=_0x47679c;let _0x146ab3=0x1;return _0x146ab3*=this[_0x200fe0(0x1a9)],_0x146ab3*=this[_0x200fe0(0x403)],_0x146ab3;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x212)]=function(){const _0x19c20f=_0x47679c;return 0x1*this[_0x19c20f(0x1da)];},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x4e3)]=function(){const _0x1d0428=_0x47679c;return this[_0x1d0428(0x1ce)]*this[_0x1d0428(0x2a0)]();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x8f8)]=function(){const _0x10cb9d=_0x47679c;return this['height']*this[_0x10cb9d(0x212)]();},Sprite_Battler[_0x47679c(0x63e)]['startGrow']=function(_0x3530bf,_0x5b2ecd,_0x5b7e5f,_0x4df612){const _0x1106da=_0x47679c;if(!this[_0x1106da(0x8fe)]())return;if(!this[_0x1106da(0x5e8)])return;if(this['_targetGrowX']===_0x3530bf&&this[_0x1106da(0x659)]===_0x5b2ecd)return;this[_0x1106da(0x127)]=_0x3530bf,this[_0x1106da(0x659)]=_0x5b2ecd,this['_growDuration']=_0x5b7e5f,this[_0x1106da(0x259)]=_0x5b7e5f,this[_0x1106da(0x17f)]=_0x4df612||_0x1106da(0x49d),_0x5b7e5f<=0x0&&(this[_0x1106da(0x403)]=this[_0x1106da(0x127)],this['_growY']=this['_targetGrowY']);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x42a)]=function(){const _0x3acf7d=_0x47679c;if(this[_0x3acf7d(0x5e5)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x305adc=this[_0x3acf7d(0x5e5)],_0x2998c1=this[_0x3acf7d(0x259)],_0x57c9a2=this[_0x3acf7d(0x17f)];Imported['VisuMZ_0_CoreEngine']?(this[_0x3acf7d(0x403)]=this[_0x3acf7d(0x90b)](this[_0x3acf7d(0x403)],this[_0x3acf7d(0x127)],_0x305adc,_0x2998c1,_0x57c9a2),this[_0x3acf7d(0x1da)]=this[_0x3acf7d(0x90b)](this[_0x3acf7d(0x1da)],this[_0x3acf7d(0x659)],_0x305adc,_0x2998c1,_0x57c9a2)):(this[_0x3acf7d(0x403)]=(this[_0x3acf7d(0x403)]*(_0x305adc-0x1)+this[_0x3acf7d(0x127)])/_0x305adc,this['_growY']=(this[_0x3acf7d(0x1da)]*(_0x305adc-0x1)+this['_targetGrowY'])/_0x305adc);this[_0x3acf7d(0x5e5)]--;if(this['_growDuration']<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x47679c(0x63e)]['onGrowEnd']=function(){const _0x518ab8=_0x47679c;this[_0x518ab8(0x403)]=this['_targetGrowX'],this['_growY']=this['_targetGrowY'];},Sprite_Battler['prototype'][_0x47679c(0x364)]=function(){const _0x30bc25=_0x47679c;return this[_0x30bc25(0x5e5)]>0x0;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x545)]=function(_0x75dbb6,_0x16c6d7,_0x573e26,_0x1a2acd){const _0x185f85=_0x47679c;if(!this[_0x185f85(0x8fe)]())return;if(!this[_0x185f85(0x5e8)])return;if(this['_targetSkewX']===_0x75dbb6&&this[_0x185f85(0x895)]===_0x16c6d7)return;this[_0x185f85(0x378)]=_0x75dbb6,this[_0x185f85(0x895)]=_0x16c6d7,this[_0x185f85(0x7e5)]=_0x573e26,this['_skewWholeDuration']=_0x573e26,this[_0x185f85(0x67b)]=_0x1a2acd||_0x185f85(0x49d),_0x573e26<=0x0&&(this[_0x185f85(0x5e8)][_0x185f85(0x751)]['x']=this['_targetSkewX'],this['_distortionSprite'][_0x185f85(0x751)]['y']=this[_0x185f85(0x895)]);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x101)]=function(){const _0x4222d2=_0x47679c;if(this[_0x4222d2(0x7e5)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x24861d=this[_0x4222d2(0x7e5)],_0x1f5990=this[_0x4222d2(0x215)],_0x32c507=this['_skewEasing'],_0x23aaad=this[_0x4222d2(0x5e8)];Imported[_0x4222d2(0x4a7)]?(_0x23aaad[_0x4222d2(0x751)]['x']=this['applyEasing'](_0x23aaad[_0x4222d2(0x751)]['x'],this[_0x4222d2(0x378)],_0x24861d,_0x1f5990,_0x32c507),_0x23aaad[_0x4222d2(0x751)]['y']=this[_0x4222d2(0x90b)](_0x23aaad[_0x4222d2(0x751)]['y'],this[_0x4222d2(0x895)],_0x24861d,_0x1f5990,_0x32c507)):(_0x23aaad[_0x4222d2(0x751)]['x']=(_0x23aaad[_0x4222d2(0x751)]['x']*(_0x24861d-0x1)+this[_0x4222d2(0x378)])/_0x24861d,_0x23aaad[_0x4222d2(0x751)]['y']=(_0x23aaad[_0x4222d2(0x751)]['y']*(_0x24861d-0x1)+this['_targetSkewY'])/_0x24861d);this[_0x4222d2(0x7e5)]--;if(this[_0x4222d2(0x7e5)]<=0x0)this[_0x4222d2(0x300)]();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x300)]=function(){const _0x590620=_0x47679c;this['_distortionSprite'][_0x590620(0x751)]['x']=this[_0x590620(0x378)],this[_0x590620(0x5e8)][_0x590620(0x751)]['y']=this[_0x590620(0x895)];},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x781)]=function(){return this['_skewDuration']>0x0;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x3bd)]=function(_0xc2e8e,_0x445675,_0x625bc6,_0x1d9dc5){const _0x128fdd=_0x47679c;if(!this[_0x128fdd(0x8fe)]())return;if(!this[_0x128fdd(0x5e8)])return;if(this[_0x128fdd(0x4e4)]===_0xc2e8e)return;this[_0x128fdd(0x4e4)]=_0xc2e8e,this[_0x128fdd(0x56a)]=_0x445675,this[_0x128fdd(0x511)]=_0x445675,this[_0x128fdd(0x8a6)]=_0x625bc6||_0x128fdd(0x49d),this[_0x128fdd(0x859)]=_0x1d9dc5,this[_0x128fdd(0x859)]===undefined&&(this[_0x128fdd(0x859)]=!![]),_0x445675<=0x0&&(this['_currentAngle']=_0xc2e8e,this[_0x128fdd(0x859)]&&(this[_0x128fdd(0x4e4)]=0x0,this['_currentAngle']=0x0));},Sprite_Battler['prototype'][_0x47679c(0x87b)]=function(){const _0x14b66d=_0x47679c;this[_0x14b66d(0x2bc)](),this[_0x14b66d(0x1b4)]();},Sprite_Battler['prototype'][_0x47679c(0x2bc)]=function(){const _0x277625=_0x47679c;if(this[_0x277625(0x56a)]<=0x0)return;const _0x4e56a6=this['_angleDuration'],_0x14931e=this[_0x277625(0x511)],_0x209974=this['_angleEasing'];Imported['VisuMZ_0_CoreEngine']?this[_0x277625(0x11f)]=this['applyEasing'](this['_currentAngle'],this[_0x277625(0x4e4)],_0x4e56a6,_0x14931e,_0x209974):this['_currentAngle']=(this[_0x277625(0x11f)]*(_0x4e56a6-0x1)+this[_0x277625(0x4e4)])/_0x4e56a6;this[_0x277625(0x56a)]--;if(this[_0x277625(0x56a)]<=0x0)this[_0x277625(0x6d1)]();},Sprite_Battler['prototype'][_0x47679c(0x6d1)]=function(){const _0x538619=_0x47679c;this['_currentAngle']=this[_0x538619(0x4e4)],this[_0x538619(0x859)]&&(this['_targetAngle']=0x0,this[_0x538619(0x11f)]=0x0);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x239)]=function(){const _0x5bb09b=_0x47679c;return this[_0x5bb09b(0x56a)]>0x0;},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x1b4)]=function(){const _0x448d2d=_0x47679c;if(!this[_0x448d2d(0x5e8)])return;const _0x26299f=this[_0x448d2d(0x11f)],_0x595f01=this['scale']['x'],_0x5bd1c9=this['_battler']['isActor']()?-0x1:0x1;this[_0x448d2d(0x5e8)][_0x448d2d(0x879)]=_0x26299f*_0x595f01*_0x5bd1c9;const _0x5d4d66=this[_0x448d2d(0x5e8)][_0x448d2d(0x34c)]['y'];this['_distortionSprite']['y']=this[_0x448d2d(0x170)]*-0.5*(0x2-_0x5d4d66),this[_0x448d2d(0x5e8)]['y']=Math[_0x448d2d(0x802)](this[_0x448d2d(0x5e8)]['y']);const _0x423291=[this[_0x448d2d(0x1fb)],this[_0x448d2d(0x692)],this[_0x448d2d(0x78a)]];for(const _0x5eea75 of _0x423291){if(!_0x5eea75)continue;_0x5eea75['y']=this[_0x448d2d(0x170)]*0.5;}this[_0x448d2d(0x29f)]&&(this[_0x448d2d(0x6db)]=this[_0x448d2d(0x6db)]??0x1,this[_0x448d2d(0x4ef)]=this[_0x448d2d(0x4ef)]??0x1,this[_0x448d2d(0x29f)][_0x448d2d(0x34c)]['x']=this[_0x448d2d(0x5e8)][_0x448d2d(0x34c)]['x']*this[_0x448d2d(0x6db)],this[_0x448d2d(0x29f)][_0x448d2d(0x34c)]['y']=this[_0x448d2d(0x5e8)][_0x448d2d(0x34c)]['y']*this[_0x448d2d(0x4ef)]);},VisuMZ[_0x47679c(0x2b8)]['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x47679c(0x63e)]['createStateSprite'],Sprite_Actor['prototype'][_0x47679c(0x28e)]=function(){const _0xf30b6d=_0x47679c;VisuMZ['BattleCore'][_0xf30b6d(0x78b)][_0xf30b6d(0x22f)](this),VisuMZ[_0xf30b6d(0x2b8)]['Settings']['HpGauge'][_0xf30b6d(0x104)]&&this[_0xf30b6d(0x487)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x4b3)]=Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x2f9)],Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x2f9)]=function(){const _0x4bbd3a=_0x47679c;VisuMZ['BattleCore'][_0x4bbd3a(0x1ea)][_0x4bbd3a(0x84a)][_0x4bbd3a(0x76f)]&&this[_0x4bbd3a(0x487)](),VisuMZ[_0x4bbd3a(0x2b8)][_0x4bbd3a(0x4b3)][_0x4bbd3a(0x22f)](this);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x487)]=function(){const _0x217556=_0x47679c;if(!ConfigManager[_0x217556(0x1e4)])return;if(this[_0x217556(0x365)]===Sprite_SvEnemy)return;const _0x37a0fd=VisuMZ[_0x217556(0x2b8)]['Settings']['HpGauge'],_0x1bc365=new Sprite_HpGauge();_0x1bc365[_0x217556(0x402)]['x']=_0x37a0fd[_0x217556(0x65d)],_0x1bc365[_0x217556(0x402)]['y']=_0x37a0fd[_0x217556(0x134)],_0x1bc365[_0x217556(0x34c)]['x']=_0x1bc365[_0x217556(0x34c)]['y']=_0x37a0fd['Scale'],this[_0x217556(0x2bf)]=_0x1bc365,this[_0x217556(0x1d2)](this['_hpGaugeSprite']),Spriteset_Battle[_0x217556(0x6f7)]&&BattleManager['addChildToUiContainer'](this[_0x217556(0x2bf)]);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x785)]=Sprite_Battler['prototype'][_0x47679c(0x890)],Sprite_Battler['prototype']['setBattler']=function(_0x93d94c){const _0x2fb4f3=_0x47679c,_0x123a94=this[_0x2fb4f3(0x671)];VisuMZ[_0x2fb4f3(0x2b8)]['Sprite_Battler_setBattler'][_0x2fb4f3(0x22f)](this,_0x93d94c),this['setupHpGaugeSprite'](_0x93d94c);if(_0x123a94!==_0x93d94c)this['updateShadowScale']();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x2d2)]=function(_0x8f6b7e){const _0x2a292c=_0x47679c;if(!_0x8f6b7e)return;if(!this[_0x2a292c(0x2bf)])return;if(_0x8f6b7e[_0x2a292c(0xf2)]()){}else{if(_0x8f6b7e['isEnemy']()){if(this[_0x2a292c(0x365)]===Sprite_SvEnemy&&!_0x8f6b7e[_0x2a292c(0x8de)]())return;}}this['_hpGaugeSprite'][_0x2a292c(0x629)](_0x8f6b7e,'hp');},Sprite_Battler[_0x47679c(0x63e)]['updateHpGaugePosition']=function(){const _0xec690c=_0x47679c;if(!this[_0xec690c(0x671)])return;if(!this['_hpGaugeSprite'])return;const _0xa797b2=VisuMZ[_0xec690c(0x2b8)][_0xec690c(0x1ea)][_0xec690c(0x84a)],_0x596da9=this[_0xec690c(0x2bf)];_0x596da9['visible']=this[_0xec690c(0x370)]();const _0x21fb83=_0xa797b2['OffsetX'],_0x365178=_0xa797b2['OffsetY'];_0x596da9['x']=_0x21fb83,_0x596da9['x']+=this[_0xec690c(0x671)]['battleUIOffsetX'](),_0x596da9['y']=-this[_0xec690c(0x170)]+_0x365178,_0x596da9['y']+=this['_battler'][_0xec690c(0x5f1)](),Spriteset_Battle[_0xec690c(0x6f7)]&&SceneManager[_0xec690c(0x56c)][_0xec690c(0x610)]&&(_0x596da9['x']+=this['x'],_0x596da9['y']+=this['y']);},Sprite_Battler['prototype'][_0x47679c(0x370)]=function(){const _0x521c15=_0x47679c;if(!this[_0x521c15(0x671)])return![];if(this[_0x521c15(0x671)][_0x521c15(0xf2)]())return!![];if(this[_0x521c15(0x671)]['isHidden']())return![];if(this[_0x521c15(0x38c)]<=0x0)return![];const _0x27d227=this[_0x521c15(0x671)][_0x521c15(0xdc)]()[_0x521c15(0x4d1)];if(_0x27d227[_0x521c15(0x503)](/<SHOW HP GAUGE>/i))return!![];if(_0x27d227['match'](/<HIDE HP GAUGE>/i))return![];const _0x3086b3=VisuMZ[_0x521c15(0x2b8)][_0x521c15(0x1ea)][_0x521c15(0x84a)];if(_0x3086b3['RequiresDefeat']){if(_0x3086b3[_0x521c15(0x72e)]&&BattleManager[_0x521c15(0x669)]())return!![];if(this[_0x521c15(0x671)][_0x521c15(0x58a)])return![];return this[_0x521c15(0x671)][_0x521c15(0x42c)]();}return!![];},VisuMZ[_0x47679c(0x2b8)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x47679c(0x63e)]['isMoving'],Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x864)]=function(){const _0xab9527=_0x47679c;if(!this[_0xab9527(0x671)])return![];if(this[_0xab9527(0x30e)]>0x0)return!![];return VisuMZ['BattleCore'][_0xab9527(0x467)]['call'](this);},VisuMZ['BattleCore'][_0x47679c(0x24f)]=Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x576)],Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x576)]=function(_0xc730b5,_0x325996,_0x46ef98){const _0x5b68d1=_0x47679c;this['canMove']()&&VisuMZ[_0x5b68d1(0x2b8)][_0x5b68d1(0x24f)][_0x5b68d1(0x22f)](this,_0xc730b5,_0x325996,_0x46ef98);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x8fe)]=function(){const _0x6976f2=_0x47679c;if(this['_battler']&&this[_0x6976f2(0x671)]['isDead']())return![];if(this[_0x6976f2(0x671)]&&!this[_0x6976f2(0x671)][_0x6976f2(0x6de)]())return![];return $gameSystem['isSideView']();},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x83e)]=function(){},Sprite_Battler[_0x47679c(0x63e)]['stepBack']=function(){const _0x5cd0e9=_0x47679c;this[_0x5cd0e9(0x576)](0x0,0x0,0xc);},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x1fc)]=function(){},Sprite_Battler[_0x47679c(0x63e)][_0x47679c(0x8a4)]=function(){const _0x15f03e=_0x47679c,_0x4fc97c=VisuMZ['BattleCore'][_0x15f03e(0x1ea)]['Actor'],_0x57f4b2=this[_0x15f03e(0x671)]&&this[_0x15f03e(0x671)][_0x15f03e(0xf2)]()?0x1:-0x1,_0xa75700=this[_0x15f03e(0x854)]-this[_0x15f03e(0x76a)]+_0x57f4b2*_0x4fc97c[_0x15f03e(0x5d0)],_0x16778e=this[_0x15f03e(0x4b2)]-this['_homeY']+_0x57f4b2*_0x4fc97c['FlinchDistanceY'],_0x1b58cf=_0x4fc97c['FlinchDuration'];this['startMove'](_0xa75700,_0x16778e,_0x1b58cf);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3be)]=Sprite_Actor['prototype'][_0x47679c(0x6b1)],Sprite_Actor['prototype'][_0x47679c(0x6b1)]=function(){const _0x3c05dd=_0x47679c;VisuMZ[_0x3c05dd(0x2b8)][_0x3c05dd(0x3be)]['call'](this),this[_0x3c05dd(0x570)]();},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x838)]=function(){const _0x4fbbb7=_0x47679c;return this[_0x4fbbb7(0x5e8)]||this[_0x4fbbb7(0x1fb)]||this;},VisuMZ['BattleCore'][_0x47679c(0x26f)]=Sprite_Actor['prototype'][_0x47679c(0x657)],Sprite_Actor['prototype'][_0x47679c(0x657)]=function(){},Sprite_Actor[_0x47679c(0x63e)]['moveToStartPositionBattleCore']=function(_0xd603a6){const _0x2608ab=_0x47679c;if(SceneManager[_0x2608ab(0x33a)]())return;if(!_0xd603a6)return;if(!_0xd603a6[_0x2608ab(0x8fe)]())return;VisuMZ['BattleCore'][_0x2608ab(0x26f)]['call'](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x767)]=Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x4a1)],Sprite_Actor[_0x47679c(0x63e)]['setActorHome']=function(_0x3c9ab4){const _0x5121dd=_0x47679c;VisuMZ[_0x5121dd(0x2b8)]['Settings'][_0x5121dd(0x559)][_0x5121dd(0x207)]?VisuMZ[_0x5121dd(0x2b8)]['Settings'][_0x5121dd(0x559)][_0x5121dd(0x207)][_0x5121dd(0x22f)](this,_0x3c9ab4):VisuMZ['BattleCore'][_0x5121dd(0x767)][_0x5121dd(0x22f)](this,_0x3c9ab4);},VisuMZ[_0x47679c(0x2b8)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x890)],Sprite_Actor['prototype'][_0x47679c(0x890)]=function(_0x29f297){const _0xe75e77=_0x47679c;VisuMZ[_0xe75e77(0x2b8)]['Sprite_Actor_setBattler'][_0xe75e77(0x22f)](this,_0x29f297),this[_0xe75e77(0x347)](_0x29f297);},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x347)]=function(_0x4f406b){const _0x44421f=_0x47679c;if(!_0x4f406b)return;if(!this[_0x44421f(0x1fb)])return;this[_0x44421f(0x1fb)]['anchor']['x']=this[_0x44421f(0x5ac)][_0x44421f(0x8a7)](),this[_0x44421f(0x1fb)][_0x44421f(0x402)]['y']=this[_0x44421f(0x5ac)][_0x44421f(0x287)](),this['updateShadowVisibility']();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x7eb)]=Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x874)],Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x874)]=function(){const _0x1074a0=_0x47679c;VisuMZ[_0x1074a0(0x2b8)][_0x1074a0(0x7eb)][_0x1074a0(0x22f)](this),this[_0x1074a0(0x5ac)]&&(this[_0x1074a0(0x19b)](),this[_0x1074a0(0x11b)]());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x5ae)]=Sprite_Actor['prototype'][_0x47679c(0x90d)],Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x90d)]=function(){const _0x45d124=_0x47679c;VisuMZ['BattleCore'][_0x45d124(0x5ae)][_0x45d124(0x22f)](this),this[_0x45d124(0x1fb)]&&this[_0x45d124(0x1fb)][_0x45d124(0x93f)]&&this[_0x45d124(0x671)]&&(this[_0x45d124(0x1fb)]['bitmap'][_0x45d124(0x2ca)]!==this[_0x45d124(0x671)][_0x45d124(0x5de)]()&&(this[_0x45d124(0x1fb)][_0x45d124(0x93f)][_0x45d124(0x2ca)]=this['_battler'][_0x45d124(0x5de)]()));},VisuMZ['BattleCore'][_0x47679c(0x521)]=Sprite_Actor[_0x47679c(0x63e)]['updateShadow'],Sprite_Actor[_0x47679c(0x63e)]['updateShadow']=function(){const _0x185b62=_0x47679c;VisuMZ[_0x185b62(0x2b8)]['Sprite_Actor_updateShadow'][_0x185b62(0x22f)](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x419)]=function(){const _0x19ad44=_0x47679c;if(!this[_0x19ad44(0x1fb)])return;if(!this[_0x19ad44(0x29f)])return;this['updateShadowVisibility'](),this[_0x19ad44(0x57c)]();},Sprite_Actor['prototype'][_0x47679c(0x19b)]=function(){const _0x409b0d=_0x47679c;this[_0x409b0d(0x683)][_0x409b0d(0x34c)]['x']=0x1/(this['scale']['x']||0.001),this[_0x409b0d(0x683)]['scale']['y']=0x1/(this['scale']['y']||0.001);},Sprite_Actor[_0x47679c(0x63e)]['updateStyleOpacity']=function(){const _0x404a0e=_0x47679c;if(!$gameSystem['isSideView']()&&this['constructor']===Sprite_Actor){const _0x21eb50=Scene_Battle[_0x404a0e(0x63e)][_0x404a0e(0x527)]();['default',_0x404a0e(0x926),_0x404a0e(0x5d2),_0x404a0e(0x26c)]['includes'](_0x21eb50)&&(this['opacity']=0x0);}},Sprite_Actor['prototype'][_0x47679c(0x8af)]=function(){const _0x59ece5=_0x47679c,_0x7bd1b=this[_0x59ece5(0x5ac)];if(_0x7bd1b){const _0x48a5ce=_0x7bd1b[_0x59ece5(0x4ad)]();if(_0x7bd1b[_0x59ece5(0x770)]()||_0x7bd1b[_0x59ece5(0x147)]())this[_0x59ece5(0x191)](_0x59ece5(0x7d4));else{if(_0x48a5ce===0x3)this[_0x59ece5(0x191)](_0x59ece5(0x368));else{if(_0x48a5ce===0x2)this[_0x59ece5(0x191)](_0x59ece5(0x627));else{if(this[_0x59ece5(0x755)])this[_0x59ece5(0x191)](_0x59ece5(0x2a7));else{if(_0x7bd1b['isCharging']())this['startMotion'](_0x59ece5(0x4f7));else{if(_0x7bd1b[_0x59ece5(0x34b)]())this['startMotion'](_0x59ece5(0x863));else{if(_0x7bd1b['isGuard']()||_0x7bd1b['isGuardWaiting']())this[_0x59ece5(0x191)](_0x59ece5(0x878));else{if(_0x48a5ce===0x1)this[_0x59ece5(0x191)](_0x59ece5(0x717));else{if(_0x7bd1b[_0x59ece5(0x401)]())this['startMotion'](_0x59ece5(0x4f0));else{if(_0x7bd1b[_0x59ece5(0x62a)]())this[_0x59ece5(0x191)](_0x59ece5(0x7d4));else _0x7bd1b[_0x59ece5(0x581)]()?this[_0x59ece5(0x191)]('wait'):this[_0x59ece5(0x191)](_0x59ece5(0x7d4));}}}}}}}}}}},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x1fc)]=function(){const _0x5f564a=0xa,_0x498a31=0x12c*_0x5f564a,_0x3473c6=0x1e*_0x5f564a;this['startMove'](_0x498a31,0x0,_0x3473c6);},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x2b2)]=function(){const _0x4188ca=_0x47679c;Sprite_Battler[_0x4188ca(0x63e)][_0x4188ca(0x2b2)][_0x4188ca(0x22f)](this);},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x8bd)]=function(){return Sprite_Battler['_motionSpeed'];},Sprite_Weapon[_0x47679c(0x63e)][_0x47679c(0x35c)]=function(){const _0x3abf4a=_0x47679c;return Sprite_Battler[_0x3abf4a(0x701)];},Sprite_Actor[_0x47679c(0x63e)]['setupMotion']=function(){},Sprite_Actor[_0x47679c(0x63e)]['setupWeaponAnimation']=function(){},Sprite_Actor['prototype'][_0x47679c(0x749)]=function(){const _0x5cf3ce=_0x47679c;if(this['_motion']&&++this[_0x5cf3ce(0x7cc)]>=this[_0x5cf3ce(0x8bd)]()){if(this[_0x5cf3ce(0x16c)][_0x5cf3ce(0x634)])this[_0x5cf3ce(0x6fc)]=(this[_0x5cf3ce(0x6fc)]+0x1)%0x4;else this[_0x5cf3ce(0x6fc)]<0x2?this[_0x5cf3ce(0x6fc)]++:this[_0x5cf3ce(0x8af)]();this[_0x5cf3ce(0x7cc)]=0x0;}},Sprite_Actor[_0x47679c(0x63e)]['forceMotion']=function(_0x36243a){const _0x5c26a6=_0x47679c;if(_0x36243a===_0x5c26a6(0x94e))this['_checkOn']=!![];if(this[_0x5c26a6(0x671)]&&this[_0x5c26a6(0x671)][_0x5c26a6(0x40e)]()){this['_motion']=Sprite_Actor[_0x5c26a6(0x314)][_0x5c26a6(0x368)];return;}const _0x246215=Sprite_Actor[_0x5c26a6(0x314)][_0x36243a];this[_0x5c26a6(0x16c)]=_0x246215,this['_motionCount']=0x0,this[_0x5c26a6(0x6fc)]=0x0;},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x862)]=function(_0x2cac1d){const _0x40ffc5=_0x47679c;this['adjustWeaponSpriteOffset'](),this['_weaponSprite'][_0x40ffc5(0x629)](_0x2cac1d),this[_0x40ffc5(0x5ac)][_0x40ffc5(0x52b)]();},Sprite_Actor[_0x47679c(0x63e)]['adjustWeaponSpriteOffset']=function(){const _0x259e6d=_0x47679c;let _0xb55d4b=-0x10,_0x3fb86c=this[_0x259e6d(0x170)]*0.5;const _0x1e3ce1=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x1f3020=this[_0x259e6d(0x671)][_0x259e6d(0x891)]()[_0x259e6d(0x261)](_0x5b9f0b=>_0x5b9f0b&&_0x5b9f0b[_0x259e6d(0x4d1)][_0x259e6d(0x503)](_0x1e3ce1)?Number(RegExp['$1']):0x0),_0x1859e2=this[_0x259e6d(0x671)][_0x259e6d(0x891)]()[_0x259e6d(0x261)](_0x362e44=>_0x362e44&&_0x362e44[_0x259e6d(0x4d1)][_0x259e6d(0x503)](_0x1e3ce1)?Number(RegExp['$2']):0x0);_0xb55d4b=_0x1f3020[_0x259e6d(0x836)]((_0x5704c3,_0x363d2e)=>_0x5704c3+_0x363d2e,_0xb55d4b),_0x3fb86c=_0x1859e2['reduce']((_0x37425c,_0x5c11e5)=>_0x37425c+_0x5c11e5,_0x3fb86c),this['_weaponSprite']['x']=_0xb55d4b,this['_weaponSprite']['y']=_0x3fb86c,this[_0x259e6d(0xee)][_0x259e6d(0x874)]();},Sprite_Weapon[_0x47679c(0x63e)][_0x47679c(0x629)]=function(_0xa3f425){const _0x5b3483=_0x47679c;this[_0x5b3483(0x7dd)]=_0xa3f425,this[_0x5b3483(0x22c)]=-0x1,this[_0x5b3483(0x6fc)]=0x0,this[_0x5b3483(0x883)](),this[_0x5b3483(0x792)]();},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x82d)]=function(){},Sprite_Actor['prototype']['stepForward']=function(){const _0x404689=_0x47679c,_0x8e22fa=VisuMZ[_0x404689(0x2b8)][_0x404689(0x1ea)][_0x404689(0x943)],_0x19f2e9=_0x8e22fa[_0x404689(0x7f2)],_0x3c9a3b=_0x8e22fa[_0x404689(0x5b8)],_0xf4c814=_0x8e22fa['StepDuration'];this['startMove'](-_0x19f2e9,-_0x3c9a3b,_0xf4c814);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x8f0)]=Sprite_Actor['prototype'][_0x47679c(0x792)],Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x792)]=function(){const _0x487276=_0x47679c;this['applyFreezeMotionFrames'](),VisuMZ[_0x487276(0x2b8)]['Sprite_Actor_updateFrame'][_0x487276(0x22f)](this);},Sprite_Actor[_0x47679c(0x63e)][_0x47679c(0x2c0)]=function(){const _0x29c506=_0x47679c;if(this[_0x29c506(0x671)]&&this['_battler'][_0x29c506(0x6bc)]){const _0x404cc0=this[_0x29c506(0x671)][_0x29c506(0x6bc)];this[_0x29c506(0x16c)]=Sprite_Actor[_0x29c506(0x314)][_0x404cc0[_0x29c506(0x8cd)]],this['_pattern']=_0x404cc0[_0x29c506(0x8bf)];const _0x239b81=this[_0x29c506(0xee)];_0x239b81[_0x29c506(0x59b)](_0x404cc0[_0x29c506(0x85d)],_0x404cc0['pattern']),this[_0x29c506(0x11e)]();}},Sprite_Weapon[_0x47679c(0x63e)][_0x47679c(0x59b)]=function(_0x11a955,_0x18f388){const _0x280134=_0x47679c;this[_0x280134(0x7dd)]=_0x11a955,this[_0x280134(0x22c)]=-Infinity,this['_pattern']=_0x18f388,this['loadBitmap'](),this[_0x280134(0x792)]();},Sprite_Enemy['prototype'][_0x47679c(0x6b1)]=function(){const _0x5b66cc=_0x47679c;Sprite_Battler['prototype'][_0x5b66cc(0x6b1)]['call'](this),this[_0x5b66cc(0x2af)]=null,this['_appeared']=![],this['_battlerName']='',this[_0x5b66cc(0x64a)]=0x0,this['_effectType']=null,this[_0x5b66cc(0x5f7)]=0x0,this[_0x5b66cc(0x6ab)]=0x0,this[_0x5b66cc(0x50e)](),this[_0x5b66cc(0x2f9)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6f4)]=Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x874)],Sprite_Enemy['prototype'][_0x47679c(0x874)]=function(){const _0x3d4ab9=_0x47679c;VisuMZ[_0x3d4ab9(0x2b8)]['Sprite_Enemy_update'][_0x3d4ab9(0x22f)](this),this[_0x3d4ab9(0x26d)]();},Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x50e)]=function(){const _0x2f91b2=_0x47679c;this[_0x2f91b2(0x1fb)]=new Sprite(),this['_mainSprite']['anchor']['x']=0.5,this[_0x2f91b2(0x1fb)][_0x2f91b2(0x402)]['y']=0x1,this['addChild'](this['_mainSprite']),this[_0x2f91b2(0x570)]();},Sprite_Enemy[_0x47679c(0x63e)]['mainSprite']=function(){const _0x55d4ca=_0x47679c;return this['_distortionSprite']||this[_0x55d4ca(0x1fb)]||this;},Sprite_Enemy[_0x47679c(0x63e)]['loadBitmap']=function(_0x41bf7e){const _0x92671a=_0x47679c;this['bitmap']=new Bitmap(0x1,0x1);if(this[_0x92671a(0x8de)]()){const _0xa320d5=this[_0x92671a(0x2af)]['svBattlerData']();this['bitmap']=new Bitmap(_0xa320d5[_0x92671a(0x1ce)],_0xa320d5[_0x92671a(0x170)]),this[_0x92671a(0x1fb)][_0x92671a(0x93f)]=new Bitmap(0x1,0x1);}else $gameSystem[_0x92671a(0x30b)]()?(this[_0x92671a(0x1fb)][_0x92671a(0x93f)]=ImageManager['loadSvEnemy'](_0x41bf7e),this['_mainSprite'][_0x92671a(0x93f)][_0x92671a(0x6a2)](this['createEmptyBitmap']['bind'](this))):(this[_0x92671a(0x1fb)][_0x92671a(0x93f)]=ImageManager[_0x92671a(0x3b8)](_0x41bf7e),this[_0x92671a(0x1fb)]['bitmap']['addLoadListener'](this[_0x92671a(0x837)][_0x92671a(0x25d)](this)));},Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x837)]=function(){const _0x1080d5=_0x47679c,_0x275019=this[_0x1080d5(0x1fb)]['bitmap'];_0x275019&&(this[_0x1080d5(0x93f)]=new Bitmap(_0x275019['width'],_0x275019[_0x1080d5(0x170)]));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1b3)]=Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x534)],Sprite_Enemy[_0x47679c(0x63e)]['setHue']=function(_0x44d6b8){const _0x3f005d=_0x47679c;this[_0x3f005d(0x1fb)]&&this['_mainSprite'][_0x3f005d(0x534)](_0x44d6b8);},VisuMZ['BattleCore'][_0x47679c(0x733)]=Sprite_Enemy[_0x47679c(0x63e)]['initVisibility'],Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x6bd)]=function(){const _0x520429=_0x47679c;this[_0x520429(0x3cc)]()?VisuMZ[_0x520429(0x2b8)][_0x520429(0x733)][_0x520429(0x22f)](this):(this[_0x520429(0x278)]=!this[_0x520429(0x2af)][_0x520429(0x7aa)](),!this['_appeared']&&(this[_0x520429(0x38c)]=0x0));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x567)]=Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x1bd)],Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x1bd)]=function(){const _0x2e4bbe=_0x47679c;if(this[_0x2e4bbe(0x3cc)]())VisuMZ[_0x2e4bbe(0x2b8)]['Sprite_Enemy_updateCollapse'][_0x2e4bbe(0x22f)](this);},Sprite_Enemy[_0x47679c(0x63e)]['updateFrame']=function(){const _0x25acfc=_0x47679c;Sprite_Battler[_0x25acfc(0x63e)][_0x25acfc(0x792)][_0x25acfc(0x22f)](this);const _0x399862=this[_0x25acfc(0x838)]()||this;if(!_0x399862)return;!_0x399862[_0x25acfc(0x93f)]&&(_0x399862[_0x25acfc(0x93f)]=new Bitmap(this[_0x25acfc(0x1ce)],this[_0x25acfc(0x170)])),this[_0x25acfc(0x291)]===_0x25acfc(0x5a3)?this[_0x25acfc(0x1fb)][_0x25acfc(0x61c)](0x0,0x0,this['_mainSprite']['width'],this[_0x25acfc(0x5f7)]):_0x399862['setFrame'](0x0,0x0,_0x399862['bitmap'][_0x25acfc(0x1ce)],this['bitmap'][_0x25acfc(0x170)]);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x7ea)]=Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x39b)],Sprite_Enemy['prototype']['updateBossCollapse']=function(){const _0x306e74=_0x47679c;if(this[_0x306e74(0x3cc)]())VisuMZ[_0x306e74(0x2b8)]['Sprite_Enemy_updateBossCollapse']['call'](this);},Sprite_Enemy['prototype'][_0x47679c(0x864)]=function(){const _0x4d14c5=_0x47679c;return Sprite_Battler[_0x4d14c5(0x63e)]['isMoving'][_0x4d14c5(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0xea)]=Sprite_Enemy[_0x47679c(0x63e)]['updateStateSprite'],Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x19b)]=function(){const _0x3cf94e=_0x47679c;VisuMZ['BattleCore'][_0x3cf94e(0xea)]['call'](this),this['updateStateSpriteBattleCore']();},Sprite_Enemy['prototype'][_0x47679c(0x4e5)]=function(){const _0x3d0947=_0x47679c,_0x168776=VisuMZ['BattleCore'][_0x3d0947(0x1ea)][_0x3d0947(0x7d1)];if(_0x168776['NameAttachStateIcon']&&!_0x168776[_0x3d0947(0x707)]){this[_0x3d0947(0xec)][_0x3d0947(0x38c)]=0x0;return;}this[_0x3d0947(0xec)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x3d0947(0x671)][_0x3d0947(0x3d6)](),this[_0x3d0947(0xec)]['y']=-this['bitmap'][_0x3d0947(0x170)]-this['_stateIconSprite'][_0x3d0947(0x170)],this[_0x3d0947(0xec)]['y']+=this[_0x3d0947(0x671)][_0x3d0947(0x5f1)](),this['_stateIconSprite']['scale']['x']=0x1/(this[_0x3d0947(0x34c)]['x']||0.001),this['_stateIconSprite'][_0x3d0947(0x34c)]['y']=0x1/(this['scale']['y']||0.001),this[_0x3d0947(0x8de)]()&&(this['_svBattlerSprite'][_0x3d0947(0x683)]['scale']['x']=-0x1/(this[_0x3d0947(0x34c)]['x']||0.001),this['_svBattlerSprite'][_0x3d0947(0x683)]['scale']['y']=0x1/(this[_0x3d0947(0x34c)]['y']||0.001));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x847)]=Sprite_Enemy['prototype'][_0x47679c(0x890)],Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x890)]=function(_0x961573){const _0x4b5585=_0x47679c;VisuMZ[_0x4b5585(0x2b8)]['Sprite_Enemy_setBattler'][_0x4b5585(0x22f)](this,_0x961573),this['setSvBattlerSprite'](_0x961573);},Sprite_Enemy['prototype']['setSvBattlerSprite']=function(_0x3b8147){const _0x582343=_0x47679c;!this[_0x582343(0x692)]&&(this[_0x582343(0x692)]=new Sprite_SvEnemy(_0x3b8147),this[_0x582343(0x570)]()),this[_0x582343(0x692)]['setBattler'](_0x3b8147);},Sprite_Enemy['prototype'][_0x47679c(0x8de)]=function(){const _0x6ee52e=_0x47679c;return this[_0x6ee52e(0x2af)]&&this[_0x6ee52e(0x2af)][_0x6ee52e(0x8de)]();},Sprite_Enemy['prototype'][_0x47679c(0x3cc)]=function(){const _0x172056=_0x47679c;return this[_0x172056(0x8de)]()?this[_0x172056(0x2af)]['allowCollapse']():!![];},Sprite_Enemy['prototype'][_0x47679c(0x8af)]=function(){const _0x504caa=_0x47679c;this[_0x504caa(0x8de)]()&&this[_0x504caa(0x692)][_0x504caa(0x8af)]();},Sprite_Enemy[_0x47679c(0x63e)][_0x47679c(0x468)]=function(_0x562fb9){const _0x4306a9=_0x47679c;if(this[_0x4306a9(0x8de)]())this[_0x4306a9(0x692)]['forceMotion'](_0x562fb9);},Sprite_Enemy[_0x47679c(0x63e)]['forceWeaponAnimation']=function(_0x2cf315){const _0x257560=_0x47679c;if(this[_0x257560(0x8de)]())this[_0x257560(0x692)]['forceWeaponAnimation'](_0x2cf315);},Sprite_Enemy['prototype'][_0x47679c(0x83e)]=function(){const _0x1aa067=_0x47679c,_0x308a38=VisuMZ[_0x1aa067(0x2b8)][_0x1aa067(0x1ea)][_0x1aa067(0x943)],_0x218317=_0x308a38[_0x1aa067(0x7f2)],_0x505acc=_0x308a38[_0x1aa067(0x5b8)],_0xf7227b=_0x308a38['StepDuration'];this[_0x1aa067(0x576)](_0x218317,_0x505acc,_0xf7227b);};function Sprite_SvEnemy(){const _0x4ae64c=_0x47679c;this[_0x4ae64c(0x736)](...arguments);}function _0x1493(){const _0x56f7fb=['_animationSprites','ShowPopup','WaitForZoom','displayReflection','process_VisuMZ_BattleCore_jsFunctions','statusTextAutoBattleStyle','dataId','MDF','globalAlpha','hasSvBattler','STR','WaitComplete','Spriteset_Battle_createBattleField','_baseTexture','subject','Enemy-%1-%2','updateHelp','ParseActorNotetags','_inputting','isAlive','updateCustomActionSequence','ActSeq_Camera_FocusTarget','textWidth','logActionList','States','getAttackMotion','aliveMembers','Sprite_Actor_updateFrame','battleFloat','changeBattlebacks','COMBATLOG','ActSeq_DB_DragonbonesTimeScale','_subject','CommandAddOptions','svAnchorX','mainSpriteHeight','status','_indent','isAutoBattle','Window_BattleLog_popupDamage','MIN_SAFE_INTEGER','canMove','isForFriendBattleCore','useDigitGrouping','PostApplyAsUserJS','createString','makeBattleCommand','ActSeq_Mechanics_BreakShieldChange','min','rowSpacing','showHelpWindow','FocusY','numTargets','ActSeq_Camera_WaitForCamera','applyEasing','drawItemStyleIconText','updateBitmap','Targets1','statusWindowRectXPStyle','ForceExploited','Post','DistanceAdjust','Shadow2','createBattleUIOffsetX','selectNextCommand','DualWield','addFightCommand','battleProjectiles','_actorWindow','_multipliers','FaceAway','ActSeq_Motion_RefreshMotion','all\x20targets','missle','ConvertParams','Height','AGI','setSkill','TpGaugeOffsetX','maxItems','loadBattleback1','list','power','PopupOffsetX','Window_BattleLog_displayMpDamage','getNextDamagePopup','canAddSkillCommand','Scene_Battle_onActorOk','Scene_Map_updateCallMenu','adjustFlippedBattlefield','show','isFightCommandEnabled','process_VisuMZ_BattleCore_CreateRegExp','dimColor1','StateIconOffsetY','onHomeMoveEnd','setText','isSpriteVisible','performJump','AllowRandomSpeed','BattleStartEvent','drawItemImageXPStyle','setupZoomBlurImpactFilter','Scene_ItemBase_applyItem','backColor','text','bitmap','Window_Options_addGeneralOptions','flashDuration','isAnimationShownOnBattlePortrait','ActionSequence','onEncounter','Window_BattleEnemy_initialize','ActSeq_BattleLog_WaitForBattleLog','_methods','AutoNotetag','okButtonText','battleSpriteSkew','ActSeq_Movement_WaitForSpin','VisuMZ_3_ActSeqCamera','battleGrow','victory','Duration','setHandler','_flashColor','enemy','%1EndActionJS','cancelTargetSelectionVisibility','ActSeq_Target_NextTarget','addText','removeImmortal','PopupShiftX','addSkillCommands','_skewX','isFrameVisible','Scene_Battle_itemWindowRect','startDamagePopup','process_VisuMZ_BattleCore_CommonEventKeys','BattleManager_isTpbMainPhase','Sprite_Enemy_updateStateSprite','battleAngle','_stateIconSprite','softDamageCapRate','_weaponSprite','updateUiContainerPosition','randomTargets','setMoveEasingType','isActor','DamageStyles','optDisplayTp','hpDamage','addAutoBattleCommands','_additionalSprites','commandFight','magicSkills','damageStyle','setBattleAngle','initMembersBattleCore','alive\x20opponents\x20not\x20target','sideview_ui','AntiTintUiElements','reverse','updateSkew','_effectsContainer','ActSeq_Movement_HomeMoveToPoint','ShowActorGauge','displayBattleCoreTransitionErrorMsg','damageContainer','code','ActSeq_BattleLog_Refresh','ActionStart','onEncounterBattleCore','resize','pushBaseLine','clearBattleRefreshRequest','drawItemStatusListStyle','isCustomBattleScope','updatePadding','refreshStatusWindow','eraseState','boxHeight','DamageType%1','Game_Action_numRepeats','_lastPluginCommandInterpreter','uiInputPosition','Game_Temp_requestAnimation','_backAttachmentSprite','_escapeRatio','updateStyleOpacity','damageOffsetY','<CENTER>%1','adjustWeaponSpriteOffset','_currentAngle','ActSeq_Horror_TVRemove','JS\x20%1START\x20BATTLE','regenerateAllBattleCore','action','PreDamageAsUserJS','PARTY','updateWeather','_targetGrowX','setBattlerFacePoint','CalcEscapeRatioJS','Scene_Battle_skillWindowRect','Game_Action_apply','_forcedHomeY','_skillIDs','battleCoreResumeLaunchBattle','Window_BattleLog_performMiss','Opacity','DamageFlat','LUK','clearHorrorEffects','AnchorY','actorCommandWindowRect','CreateCommonEventKeys','_floatDuration','SmoothImage','isAffectedByBreakShield','displayMpDamage','checkShowHideSwitchNotetags','useItem','attackAnimationId1','getHalfActionsPTB','MotionAni','PostEndTurnJS','Scene_Boot_onDatabaseLoaded','getWtypeIdWithName','createActionSequenceProjectile','Sprite_Battler_update','startWeaponAnimation','getConfigValue','isActing','removeAnimationFromContainer','_cancelButton','Window_BattleLog_displayFailure','commandNameWindowDrawText','_iconIndex','Game_Battler_performActionStart','Scene_Options','blt','magicReflection','format','applyItem','displayAffectedStatus','ParseWeaponNotetags','Game_BattlerBase_eraseState','effects','parameters','VisuMZ_2_PartySystem','focus','_active','_damages','charging','drawItemBackground','setupBattleCore','_padding','_lastAction','float','placeStateIcon','Scene_Battle_onEnemyCancel','delay','_item','displayReflectionPlayBack','Game_Battler_performEvasion','damageOffsetX','addEscapeCommand','setCustomDamageFormula','Game_Action_evalDamageFormula','_motion','preparePartyRefresh','createBattleFieldBattleCore','_phase','height','onSelectAction','startFloat','cameraOffsetDuration','isFriendly','JS\x20%1APPLY\x20%2','updateCancel','sort','Window_BattleEnemy_show','adjustPosition','performMoveToPoint','CmdStyle','processEscape','occasion','StateIconOffsetX','_growEasing','iterateBattler','_deathStateApplied','updateBorderSprite','getStypeIdWithName','Sprite_AnimationMV_updatePosition','VisuMZ_1_ElementStatusCore','children','flashColor','STYPES','filterArea','selectNextActor','chantStyle','AutoBattle','mmp','bgType','commandName','applyGlobal','startMotion','clearOnceParallelInterpreters','createDamageSprite','createDamageContainer','alive\x20actors\x20not\x20target','+%1\x20MP','_itemWindow','createBattleUIOffsetY','AS\x20TARGET','isOptionsCommandAdded','updateStateSprite','onBattleEndBattleCore','Scale','createAnimationContainer','centerFrontViewSprite','updateForceAction','HelpItem','PreApplyAsTargetJS','Width','_target','updateMain','showPortraits','jumpBattler','log','_flipScaleX','blockWidth','SvMotionIdleSolo-%1-%2','createWeather','command339','_battlePortrait','alive\x20battlers\x20not\x20user','QoL','ParseStateNotetags','performAttack','Sprite_Enemy_setHue','applyAngleChange','placeGauge','itemHit','_autoBattle','itemRect','bitmapHeight','updateEffectContainers','TpbGaugeOffsetY','_battlerName','updateCollapse','Window_BattleLog_displayActionResults','changeInputWindow','Game_Map_encounterList','canGuardBattleCore','BattleEndEvent','JS\x20%1END\x20ACTION','setBattlePortrait','Game_BattlerBase_die','addAttackCommand','playOnceParallelInterpreter','drawItemImageListStyle','setValue','actions','loadSystem','ParseItemNotetags','targetSpritePosition','width','addCommand','updateCallMenu','AlphaFilter','addChild','toUpperCase','initBattlePortrait','createKeyJS','startPartyCommandSelection','die','result','PostDamageJS','_growY','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','getColor','-%1\x20MP','updateOnceParallelInterpreters','addDebuff','ActSeq_Set_TargetActionSet','addChildToBack','updateOpacity','battleSkew','visualHpGauge','PRE-','damage','setSTBExploited','CastMagical','Window_BattleLog_performActionStart','Settings','canAlterActionCostPTB','ActSeq_Movement_Scale','ActSeq_Zoom_Reset','isQueueOptionsMenu','slices','_tpbState','WaitForAngle','SvWeaponMass-%1-%2','isDamagePopupRequested','processBorderActor','opponentsUnit','730225zMtasI','startInput','Window_BattleLog_performCounter','#%1','makeSuccess','_mainSprite','retreat','PreStartTurnJS','base','_stypeIDs','extraPositionScaledY','deathStateId','CastAnimation','ActSeq_Mechanics_AtbGauge','PostStartTurnJS','command301','isTriggered','HomePosJS','alterType','isPlaytest','_createCursorArea','UNTITLED','unshift','getMenuImage','HalfActions','addOptionsCommand','ClearBattleLog','changeBattlerOpacity','mainSpriteScaleY','frameCount','Game_Battler_onBattleEnd','_skewWholeDuration','loadBattleback2','Window_BattleStatus_initialize','Game_Action_isForOpponent','isAttack','isDebuffAffected','hpAffected','ATK','CurrentTurn','actionBattleCoreJS','priority','setupMotionBlurImpactFilter','prepareCustomActionSequence','getItemDamageAmountLabelOriginal','performActionStart','ActSeq_BattleLog_WaitForNewLine','DefaultSoftCap','Window_BattleLog_popBaseLine','Window_BattleLog_performCollapse','isTpbMainPhase','displayStartMessages','gainTp','activate','_animationCount','makeActionOrders','Parse_Notetags_TraitObjects','call','ArPenRate','dead\x20battlers','battlerShadowScaleY','isCommandEnabled','CombatLogIcon','_waitCount','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','repositionCancelButtonBorderStyle','BattleManager_inputtingAction','isSpinning','needsSelectionBattleCore','round','drawEnemyName','_enemyId','Targets2','repeatTargets','equipSlots','applyGlobalCommonEventNotetags','createTargetsJS','_duration','version','Rate','Point','ActSeq_Impact_ShockwavePoint','selectNextCommandTpb','SvWeaponSolo-%1-%2','drawGauge','ActSeq_Set_SetupAction','ActSeq_Movement_WaitForSkew','HP_Flat','Game_Party_addActor','Sprite_Battler_startMove','makeDamageValue','registerDefeatedEnemy','setHome','emerge','command357','requestPointAnimation','_opacityEasing','unchanged','_battlerContainer','_growWholeDuration','mainFontSize','ActorCmd','actor%1-portrait','bind','isOptionsCommandEnabled','destroy','ActSeq_Horror_GlitchCreate','map','_customDamageFormula','displayMiss','createMiss','addAutoBattleCommand','ParseSkillNotetags','_jumpDuration','stepBack','_logWindow','displayEvasion','applyGuard','border','updateShadowVisibility','TPB','Sprite_Actor_moveToStartPosition','isTeamBased','PostDamage%1JS','Game_Battler_makeSpeed','Game_Interpreter_command283','Game_Actor_makeActionList','ActSeq_Mechanics_Immortal','createInnerPortrait','changePaintOpacity','_appeared','numRepeats','_floatHeight','isImmortal','isForOpponent','turnCount','ActSeq_Mechanics_ArmorPenetration','shadow','removedStateObjects','_branch','ActionItemMsg','_frontAttachmentSprite','Scene_Battle_onActorCancel','anchorY','PostEndActionJS','svBattlerAnchorY','Scene_Battle_startActorSelection','autoBattleUseSkills','ActSeq_Impact_MotionBlurTarget','24521519DvhPYT','hitFlat','PostApply%1JS','createStateSprite','Shadow','windowskin','_effectType','BattleLogRectJS','_cacheTextWidth','EVAL','getFullActionsPTB','isTpbCharged','WaitForOpacity','+%1','SkillItemStandardCols','ActSeq_Animation_AttackAnimation2','refresh','COMBAT\x20LOG','ChangeOrderBy','skillId','_shadowSprite','mainSpriteScaleX','string','applyDamageCaps','fontSize','shift','onBattleStart','isForRandom','escape','moveBattlerToPoint','updateHomeMove','Scene_Battle_createPartyCommandWindow','EscapeFailureJS','CriticalDmgFlat','Direction','ArRedFlat','_enemy','isPhysical','PreApply%1JS','onMoveEnd','stateRate','IconStypeMagic','motionIdle','VisuMZ_1_SkillsStatesCore','BattleManager_initMembers','BattleCore','indexOf','getItemDamageAmountTextBattleCore','getAttackWeaponAnimationId','updateAngleCalculations','message2','visibilityState','_hpGaugeSprite','applyFreezeMotionFrames','makeTargets','checkShowHideBattleNotetags','startTpbTurn','isBattleFlipped','create','requestDragonbonesAnimation','Damage','PortraitScaleBorderStyle','Window_BattleLog_performSubstitute','smooth','JS\x20BATTLE\x20VICTORY','isOnCurrentMap','setupCriticalEffect','MAXHP','ActSeq_Impact_MotionBlurScreen','BreakShields','DamageRate','setupHpGaugeSprite','ForceRandom','performMiss','bitmapWidth','PreDamage%1JS','isHiddenSkill','isDuringNonLoopingMotion','tpbActorSwitchConditionsMet','_floatWholeDuration','current\x20target','wholeActionSet','ActSeq_Mechanics_StbRemoveExcessActions','inBattle','_text','ActionEffect','updateFloat','createUIContainer','TpGaugeOffsetY','actorCommandEscape','hitRate','setEventCallback','skewDuration','SkillItemMiddleLayout','ActSeq_Motion_PerformAction','isBuffAffected','BattleManager_onEncounter','PerformAction','process_VisuMZ_BattleCore_Notetags','hasSkill','onDisabledPartyCommandSelection','alive\x20battlers','windowPadding','setHelpWindowItem','isMeleeMultiTargetAction','isMeleeSingleTargetAction','processDefeat','maxCols','drawItemStatus','StyleON','createStateIconSprite','_weather','Interrupt','addedDebuffs','textSizeEx','_executedValue','arPenFlat','onSkewEnd','stypeId','Mechanics','startAction','ActSeq_Projectile_Animation','helpAreaBottom','updateEffectsContainer','getItemDamageAmountLabelBattleCore','_homeWholeDuration','745QdfQSf','isAnyoneChangingOpacity','isSideView','setBattleCameraOffset','_forcedBattlers','_homeDuration','_commonEventKey','setFullActionsPTB','battleOpacity','waitForOpacity','isClicked','MOTIONS','_currentActor','singleSkill','Game_Map_battleback1Name','PostDamageAsUserJS','BattleManager_processVictory','ActSeq_Set_FinishAction','ActionEnd','ActSeq_Target_CurrentIndex','battleAnimation','clearForcedGameTroopSettingsBattleCore','drawIcon','MotionSpeed','animationShouldMirror','isEscapeCommandEnabled','Actor-%1-%2','Window_BattleLog_performReflection','switchToWeaponType','startEnemySelection','ActSeq_Impact_ZoomBlurTargetCenter','isAlwaysVisible','_enemyNameContainer','Scene_Battle_helpWindowRect','_targetHomeX','_actorSprites','performCastAnimation','VarianceFormulaJS','PreDamageJS','isMagical','JS\x20BATTLE\x20DEFEAT','options','battleCamera','command283','Game_Troop_setup','Scene_Battle_startActorCommandSelection','addGuardCommand','BattleCmdList','addDamageSprite','isPreviousSceneBattleTransitionable','clearElementChanges','_windowLayer','removeHorrorEffect','removeBuff','_battleCoreNoElement','ActSeq_Skew_Reset','_actions','_jumpHeight','updateWaitMode','Sprite_StateIcon_updateFrame','DTB','updateScale','setBattlerBattleCore','processBattleCoreJS','ActSeq_Zoom_Scale','_armorPenetration','isChanting','scale','StatusWindowAttachmentFront','createJS','changeCtbChargeTime','AttackAnimation','DefeatEvent','join','gainFullActionsPTB','addItemCommand','ActSeq_Mechanics_AddBuffDebuff','ShowFailure','isOTB','close','VisuMZ_2_BattleSystemFTB','displayBuffs','applyData','animationWait','setBattleSkew','exit','PreStartBattleJS','skillItemWindowRectBorderStyle','transform','WaitForMovement','ActSeq_Skew_WaitForSkew','isGrowing','constructor','Slot','MAT','dead','battleEnd','ShowCounter','AsUser','filter','slice','textBaseline','friendsUnit','isVisualHpGaugeDisplayed','_lines','alive\x20enemies','Window_PartyCommand_initialize','applyImmortal','performTpbActiveCheckSwitch','StatusWindowAttachmentBack','drawTextTopAligned','_targetSkewX','startActorSelection','parse','prepareBorderActor','clearFreezeMotionForWeapons','ReflectPlayback','applyForcedGameTroopSettingsBattleCore','setupTextPopup','autoBattleStyle','ActSeq_Movement_HomeMoveBy','MotionType','isTurnBased','ScaleY','CmdIconEscape','displayType','guardSkillId','WaitForEffect','AddOption','MpGaugeOffsetX','criticalDmgFlat','opacity','32YrpAgY','innerHeight','setImmortal','active','_damagePopupArray','_cache','autoSelectPriority','createAutoBattleWindow','Game_BattlerBase_canAttack','DisablePartyCmd','pow','CmdIconItem','Window_BattleLog_performRecovery','PostRegenerateJS','updateBossCollapse','updateShadowScale','_targetOpacity','_battleField','ActSeq_Impact_ShockwaveEachTargets','HpGaugeOffsetX','evade','redraw','setBattleCameraPoint','Scene_Battle_terminate','statusText','Game_System_initialize','targetObjects','swing','HitFlat','Window_BattleLog_performActionEnd','mpHealingFmt','makeCommandList','needsSelection','waitForJump','%1Damage%2JS','iconWidth','EscapeSuccessJS','MotionIdle','alterPriority','_interpreter','maxCommands','type','ApplyImmortal','loadEnemy','performRecovery','displayCounter','_forcedBattleLayout','Game_Action_makeTargets','startSpin','Sprite_Actor_initMembers','waitForAnimation','getChildIndex','drawLineText','CriticalColor','Scene_Battle_updateStatusWindowPosition','Sprite_Battleback_adjustPosition','ActSeq_Animation_ShowAnimation','_battleCoreBattleStartEvent','Window_BattleLog_displayCritical','PartyCmd','Sprite_Battler_updateMain','getTraitSetKeys','_partyCommandWindow','allowCollapse','actorId','setCommonEvent','updateStatusWindowPosition','_regionBattleback1','ShowPortraitsBorderStyle','Game_Action_isForRandom','SlotID','TpbGaugeOffsetX','iconIndex','battleUIOffsetX','WaitCount1','spriteId','ActSeq_Movement_WaitForOpacity','Game_Map_setupBattleback','actorCommandSingleSkill','Style','WaitForScale','isActionSelectionValid','gainStoredBoostPoints','Window_BattleLog_performDamage','Window_Options_statusText','drawSingleSkillCost','Game_Action_isForFriend','VisuMZ_2_DragonbonesUnion','BattleManager_startInput','linkSprite','maxTp','Scene_Battle_start','commandStyleCheck','cancel','_lineHeight','nextActiveWeaponSlot','ChargeRate','hardDamageCap','_floatEasing','setupFont','ActSeq_Movement_WaitForScale','ShowHpDmg','_updateFilterArea','pop','EasingType','includes','VisuMZ_3_ActSeqProjectiles','expRate','AttachStateOffsetY','SKILLS','members','remove','needsActorInputCancel','left','HpGaugeOffsetY','_animation','isDying','anchor','_growX','changeAtbChargeTime','VisuMZ_2_BattleSystemSTB','updateVisibility','CriticalDuration','ActSeq_Movement_WaitForMovement','StatusWindowSelectableBackHide','isAtbChargingState','setBattleCameraTargets','onFloatEnd','WaitForAnimation','isDead','BattleManager_checkSubstitute','_emptyBitmap','clearRect','PostApplyAsTargetJS','35apuTOC','2188VDlrad','isEnemy','Game_Action_needsSelection','_back2Sprite','onOpacityEnd','updateShadowBattleCore','BattleManager_startBattle','BattleManager_endBattle','split','displayChangedStates','gainHp','isItem','stop','BattleManager_cancelActorInput','isBorderStylePortraitShown','reserveCommonEvent','Game_Interpreter_command301','Window_SkillList_maxCols','EnableDamageCap','isPartyTpbInputtable','OffsetY','_targetFloatHeight','updateGrow','Override','hasBeenDefeatedBefore','length','partyCommandWindowRectBorderStyle','requestFauxAnimation','fight','createChildSprite','commandNameWindowDrawBackground','AS\x20USER','ActSeq_Animation_CastAnimation','duration','_ptbActionCost','ActSeq_Mechanics_DeathBreak','Armor-%1-%2','TargetLocation','addShowHpGaugeCommand','EFFECT_COMMON_EVENT','autoSelect','criticalDmgRate','ParseEnemyNotetags','auto','_svBattlerData','formula','DigitGroupingDamageSprites','addState','animation','makeTargetSelectionMoreVisible','position','CriticalHitFlat','isBattleCoreTargetScope','isAnyoneFloating','ActSeq_Mechanics_CtbSpeed','Game_Battler_startTpbTurn','setVisibleUI','freezeMotion','ShuffleArray','processRandomizedData','createCancelButton','makeSpeed','createAllWindows','ActSeq_Element_Clear','battleDisplayText','Debuffs','getDamageStyle','updateBorderStyle','ActSeq_Movement_WaitForFloat','VisuMZ_3_BoostAction','CheckMapBattleEventValid','Weapon-%1-%2','noise','mhp','turn','battleEffect','iconText','VariableID','move','drawBackgroundRect','ShowCurrentState','Scene_Map_launchBattle','compareEnemySprite','Sprite_Battler_isMoving','forceMotion','loadSvActor','fnordRemovedStates','PopupDuration','moveBattlerHomeToPoint','SkipPartyCmd','updateJump','Frame','onBattleStartBattleCore','createActorCommandWindow','BattleManager_makeActionOrders','waitCount','setupBattlebackBattleCore','ActSeq_Weapon_ClearActiveWeapon','createCommandNameWindow','PreRegenerateJS','isAnyoneSpinning','playEnemyAttack','getLastPluginCommandInterpreter','Scene_Options_maxCommands','VisuMZ_2_WeaponSwapSystem','svBattlerName','battleCommandName','random','refreshRequest','updateBattleProcess','_flinched','battleback2Name','timeScale','findTargetSprite','_damageContainer','createHpGaugeSprite','faceWidth','autoBattleWindowRect','commandStyle','drawSkillCost','AutoMeleeSolo','1:1','value','setupChild','Spriteset_Battle_update','softDamageCap','Game_Action_itemEffectAddAttackState','missed','Sprite_SvEnemy','Game_Battler_forceAction','_tempActor','_isBattlerFlipped','makeActionListAutoAttack','createActors','ActSeq_Set_WholeActionSet','Window_BattleLog_displayEvasion','OffsetX','Linear','createBattleFieldContainer','CastCertain','WaitCount','setActorHome','Game_Battler_clearDamagePopup','battleCameraData','itemHeight','isDisplayEmergedEnemies','_updateClientArea','VisuMZ_0_CoreEngine','performFlinch','battlelog','EscapeFail','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','frontviewSpriteY','stateMotionIndex','BattleManager_processDefeat','addSingleSkillCommand','_drawTextBody','BattleManager_onEscapeSuccess','_baseY','Sprite_Enemy_createStateIconSprite','_back1Sprite','HelpOptions','_homeEasing','description','ActSeq_Movement_Float','ActSeq_Movement_Spin','JS\x20%1START\x20ACTION','isGuard','BackColor','alive\x20friends\x20not\x20user','inHomePosition','growBattler','customDamageFormula','performMagicEvasion','RevertAngle','ActSeq_Movement_Opacity','ARRAYSTRUCT','DisplayAction','displayChangedBuffs','_action','CalcEscapeRaiseJS','Scene_Battle_logWindowRect','animationBaseDelay','isMVAnimation','waitForMovement','_makeFontNameText','performMoveToTargets','updateLink','attackStatesRate','note','getHardDamageCap','message1','canInput','ActSeq_Mechanics_VariablePopup','isBTB','Game_Action_setGuard','updateBattlebackBitmap1','physical','GUARD','getAttackMotionSlot','commandSymbol','SceneManager_isSceneChanging','jump','setActionState','default','makeHpDamageText','ActSeq_Mechanics_OtbOrder','mainSpriteWidth','_targetAngle','updateStateSpriteBattleCore','svBattlerShadowVisible','mpDamage','regionId','process_VisuMZ_BattleCore_BaseTroops','text\x20target','isAnyoneSkewing','floatBattler','performActionEndMembers','_updateCursorFilterArea','_shadowScaleY','dying','process_VisuMZ_BattleCore_TraitObject_Notetags','arPenRate','restore','PreStartActionJS','resetResultSwitches','Spriteset_Battle_updateActors','wait','canUseItemCommand','concat','BaseTroopIDs','getCommonEventIdWithName','makeActionList','ActSeq_Impact_ShockwaveCenterTargets','Scene_Battle_initialize','partyCommandWindowRectXPStyle','addedStateObjects','movement','ActSeq_Mechanics_PtbFullHalfAction','match','ActSeq_Movement_FacePoint','HelpAutoBattle','gainCurrentActionsETB','\x5cI[%1]%2','%1StartBattleJS','Scene_Battle_createCancelButton','svAnchorY','playCancel','substitute','hide','createMainSprite','addOnceParallelInterpreter','_canLose','_angleWholeDuration','WaitForCamera','Exploited','displayCritical','clearMotion','collapse','addBattleCoreAutoBattleStartupCommand','ScaleDown','BattleLog','some','VisuMZ_2_BattleSystemCTB','finishActionSet','ActSeq_Motion_WaitMotionFrame','ShowReflect','_targetHomeY','dead\x20friends','Sprite_Actor_updateShadow','TextColor','resizeWindowXPStyle','clearBattleCoreData','NameAlwaysHidden','createBorderStylePortraitSprite','battleLayoutStyle','ActSeq_Projectile_Icon','isNonSubmenuCancel','Turns','clearWeaponAnimation','ActSeq_Camera_Offset','trueRandomTarget','processRefresh','glitch','front\x20base','Game_Action_itemEffectAddNormalState','isDTB','callOkHandler','setHue','ActSeq_Mechanics_HpMpTp','Window_BattleLog_displayTpDamage','applyArmorModifiers','VisuMZ_4_CombatLog','_endBattle','_helpWindow','statusWindowRect','RegExp','alive\x20friends\x20not\x20target','BattleManager_startAction','ShowCritical','filters','inputtingAction','WaitCount2','Filename','ParseAllNotetags','startSkew','addActor','ALL\x20SKILLS','isShownOnBattlePortrait','Game_Action_setAttack','Scene_Battle_startEnemySelection','alive\x20actors','Scene_Battle_createActorCommandWindow','ActSeq_Movement_HomeReset','center','updateStart','callNextMethod','Window_ActorCommand_initialize','setBackgroundType','allowRandomSpeed','ActSeq_BattleLog_AddText','isFTB','addCustomCommands','commandAutoBattle','TpbActiveChangeEnabled','Actor','open','_jumpMaxHeight','updateBattlerContainer','ArPenFlat','startActorCommandSelection','evalDamageFormulaBattleCore','processVictory','drawActorFace','validTargets','Scene_Battle_windowAreaHeight','isAnyoneJumping','JSON','AutoBattleMsg','Sprite_Enemy_updateCollapse','StatusWindowSkinFilename','toUseBoostPoints','_angleDuration','isAutoBattleCommandAdded','_scene','custom','adjustPosition_ScaleDown','Sprite_Animation_targetSpritePosition','attachSpritesToDistortionSprite','charged','PostEndBattleJS','ActSeq_Animation_AttackAnimation','dead\x20actors','applyVariance','startMove','becomeSTBExploited','battleJump','createDistortionSprite','splice','ConvertActionSequenceTarget','updateShadowPosition','moveBattlerHomeDistance','extraPositionX','FaceDirection','_requestRefresh','currentAction','Sprite_Battler_updatePosition','weatherType','ActSeq_Movement_Skew','clearDamagePopup','startHomeMove','_eventId','index','PrioritySortActive','_visualHpGauge_JustDied','applyResultSwitches','BattleVictoryJS','Scene_Battle_updateBattleProcess','ConvertCount','alphabetic','Window_ItemList_maxCols','gainHalfActionsPTB','createShadowSprite','logWindowRect','VisuMZ_4_BreakShields','DamageDisplay','_waitMode','commandEscape','isCertainHit','updateShadow','isSTB','freezeFrame','isAutoBattleCommandEnabled','maxBattleMembers','changeTurnOrderByCTB','BattleDefeatJS','isGuardWaiting','ARRAYEVAL','_colorType','bossCollapse','isBattlerGrounded','ActSeq_Motion_MotionType','_lastEnemy','scope','JumpToLabel','getBattlePortraitFilename','coreEngineRepositionEnemies','addChildAt','_actor','%1Apply%2JS','Sprite_Actor_updateBitmap','isCTB','ActSeq_Mechanics_Multipliers','setHalfActionsPTB','skewBattler','VariableDmg','anchorX','casting','Scene_Map_initializeAfter','VisuMZ_2_HorrorEffects','StepDistanceY','ActSeq_BattleLog_UI','itemLineRect','displayAction','startOpacity','makeAutoBattleActions','ActSeq_Element_ForceElements','contains','weaponTypes','terminate','isPreviousScene','Game_Battler_onBattleStart','isMagicSkill','ConfigManager_makeData','isAtbCastingState','Sprite_Battler_initMembers','attackAnimationId2','_battleCoreForcedElements','\x20to\x20%1\x20midbattle.','helpWindowRect','_statusWindow','actionEffect','SvBattlerMass-%1-%2','isBattlerFlipped','FlinchDistanceX','basicGaugesY','portrait','usePremadeActionSequence','playEnemyDamage','performAction','StatusWindowSkinHide','_allTargets','_battleLayoutStyle','targetDistortionSpritePosition','HitRate','NameOffsetY','battlerShadowScaleX','resetFontSettings','battlerSmoothImage','_callSceneOptions','toString','ActionAnimation','canAttack','isSkill','Name','_growDuration','ActSeq_Movement_Jump','PostApplyJS','_distortionSprite','missile','getDualWieldTimes','removeStatesAuto','visible','isAlwaysHidden','refreshCursor','gainMp','performCollapse','battleUIOffsetY','helpWindowRectBorderStyle','PreApplyJS','_jumpWholeDuration','Item-%1-%2','isConfused','_effectDuration','STRUCT','process_VisuMZ_BattleCore_Action_Notetags','AsTarget','addBuff','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','MANUAL','arRedRate','alive\x20battlers\x20not\x20target','drawItemImagePortraitStyle','isBypassDamageCap','EnableSoftCap','VisuMZ_2_BattleSystemOTB','SkewX','onTurnEnd','Game_Action_executeDamage','updatePhase','requestMotion','mpDamageFmt','DigitGrouping','_actionBattlers','AnimationID','spell','compatibilityVisible','enemyNames','_spriteset','Radius','return\x200','isIncludedInEnemyWindow','_regionBattleback2','battleCommandIcon','trim','6989150AXcMiU','alterChange','weatherPower','PreEndTurnJS','isBattleRefreshRequested','setFrame','showAnimation','swapEnemyIDs','CmdIconAutoBattle','name','battleSys','param','AttachStateOffsetX','%1RegenerateJS','Game_Battler_clearMotion','autoBattle','sleep','_list','setup','isUndecided','performDamage','animationId','ARRAYSTR','Mute','setLastPluginCommandInterpreter','_enemySprites','isCustomActionSequence','contents','cancelActorInput','loop','ActSeq_Element_AddElements','ChantStyle','ElementStatusCore','isPTB','CommandWidth','battleMove','WaitForSkew','Game_Troop_expTotal','Window_BattleLog_update','prototype','_opacityWholeDuration','createEnemyNames','PostStartActionJS','setAttack','_borderPortraitSprite','spinBattler','makeEscapeRatio','setBattleZoom','ArRedRate','autoBattleStart','Game_Interpreter_terminate','_battlerHue','onEscapeSuccess','endBattle','isSelected','requestMotionRefresh','snapForBackground','Game_Interpreter_PluginCommand','arRedFlat','ActSeq_Angle_WaitForAngle','Reveal','startJump','loadWindowskin','createAttachmentSprites','moveToStartPosition','190737aqeTJu','_targetGrowY','sliceMax','NameFontSize','currentValue','AnchorX','JS\x20%1END\x20BATTLE','debuffAdd','skill','performSubstitute','Scene_Party','lineHeight','_defeatedEnemies','onDatabaseLoaded','createHelpWindowBattleCore','padding','_opacityDuration','isBattleTest','isETB','Window_BattleLog_pushBaseLine','displayFailure','ActSeq_Impact_MotionTrailCreate','svShadow','XPActorCommandLines','gradientFillRect','_battler','_uiContainer','ActSeq_Mechanics_EnemyEscape','updateStateIconSprite','createHelpWindow','dead\x20enemies','_commandNameWindow','displayActionResults','TimeScale','evalDamageFormula','_skewEasing','FUNC','StatusWindowAttachmentBackOffsetY','onEscapeFailure','_tpbNeedsPartyCommand','setActiveWeaponSet','HelpSkillType','executeDamage','_stateSprite','attack','actionSplicePoint','cameraDuration','ActSeq_Movement_FaceTarget','StyleOFF','Window_BattleLog_performAction','PreEndActionJS','Game_Battler_onTurnEnd','removeOnceParallelInterpreter','ShowHide','targetActionSet','innerWidth','faceRect','MAXMP','_svBattlerSprite','popupDamage','Window_BattleLog_displayMiss','callOptions','Game_Action_clear','setBattlerFlip','clearFreezeMotion','ParseClassNotetags','Scene_Battle_createHelpWindow','_index','skillWindowRect','ActSeq_Animation_ActionAnimation','wtypeId','_updateCursorArea','checkTpbInputOpen','ActSeq_Movement_WaitForJump','addLoadListener','createSeparateDamagePopups','14444XYXkzS','ActSeq_Horror_NoiseRemove','Window_ActorCommand_setup','createTroopNote','weapons','BindCommonEventKeysForGroup','canAttackBattleCore','_shake','helpAreaHeight','popBaseLine','calcWindowHeight','updateHpGaugePosition','%1StartActionJS','initMembers','canGuard','ActSeq_Mechanics_SwapWeapon','push','finalizeScale','addChildToUiContainer','apply','NameAlwaysVisible','partyCommandWindowRectDefaultStyle','checkShowHideSkillNotetags','alive\x20actors\x20not\x20user','_freezeMotionData','initVisibility','ActSeq_Animation_PlayAtCoordinate','itemEffectAddNormalState','addAnimationSpriteToContainer','PrioritySortActors','command119','FlashDuration','Scene_Battle_partyCommandWindowRect','replace','createEffectActionSet','_skewY','battleback1Name','damageFlat','isAnimationPlaying','ShowAddedState','Spriteset_Battle_createLowerLayer','isOpponent','displayCurrentState','ActionSkillMsg1','_autoBattleWindow','onAngleEnd','_actorCommandWindow','displayTpDamage','toLowerCase','okTargetSelectionVisibility','ActSeq_Target_RandTarget','pages','isRightInputMode','_motionType','isBreakStunned','_shadowScaleX','isFloating','_skillWindow','canBattlerMove','CastPhysical','1219902GmgxQl','Game_BattlerBase_initMembers','launchBattle','getInputButtonString','setupBattleCoreData','FrontViewSelect','Scene_Battle_onEnemyOk','255QwdMJX','updatePosition','Sprite_Battler_setHome','sortDamageSprites','refreshActorPortrait','requestAnimation','ParseArmorNotetags','POST-','critical','Victory','clearActiveWeaponSlot','canUse','NUM','Sprite_Enemy_update','_surprise','endAction','ANTI_TINT_UI','Game_Interpreter_updateWaitMode','forceAction','isItemCommandEnabled','Elements','_pattern','dead\x20opponents','revealNewWeaknesses','Game_Action_itemHit','JS\x20ESCAPE\x20SUCCESS','_motionSpeed','setupDamagePopup','skillItemWindowRectMiddle','cameraClamp','WaitForProjectile','_offsetX','NameLegacy','process_VisuMZ_BattleCore_Failsafes','Skill-%1-%2','enemyId','isActiveTpb','adjustPosition_ScaleUp','removeChild','waitForNewLine','performCounter','invokeMagicReflection','isSkipPartyCommandWindow','_displayBattleCoreTransitionErrorMsg','_targetIndex','Targets','addSingleSkillCommands','startBattle','abnormal','CommonEventID','ActSeq_Impact_MotionTrailRemove','onJumpEnd','_cursorArea','Game_BattlerBase_refresh','_lastRegenFrameCount','ActSeq_Camera_FocusPoint','performReflection','DefaultSoftScaler','StatusWindowAttachmentFrontOffsetX','addSkillTypeCommand','applyHardDamageCap','front\x20center','ShowFacesListStyle','isOpen','actorCommandAutoBattle','value1','lukEffectRate','Game_Battler_regenerateAll','expTotal','waitForEffect','ConfigManager_applyData','BTestBypass','BattleManager_selectNextCommand','Game_Map_battleback2Name','onRegeneratePlayStateAnimation','ActSeq_Mechanics_OnceParallel','Sprite_Enemy_initVisibility','changeWeather','updatePositionBattleCore','initialize','isAnyoneGrowing','Scene_Battle_commandFight','updateRefresh','drawItem','ActSeq_Movement_BattleStep','Scene_Battle_startPartyCommandSelection','Game_Action_applyGlobal','StatusWindowAttachmentFrontOffsetY','addTextToCombatLog','top','MP_Flat','right','randomInt','Game_BattlerBase_addNewState','svBattlerData','getBattlePortrait','BattleManager_updatePhase','dimColor2','updateMotionCount','_immortal','Variable','HelpEscape','removeActor','checkCacheKey','onAllActionsEnd','ShowMissEvasion','skew','TP_Flat','onEnemyOk','OffsetAdjust','forceEscapeSprite','isChangingOpacity','displaySubstitute','StartName','getNextSubject','moveBattlerDistance','boxWidth','ActSeq_Camera_Reset','isSceneBattle','zoomDuration','process_VisuMZ_BattleCore_PreBattleCommonEvent','adjustPosition_ScaleToFit','evaded','moveToStartPositionBattleCore','CopyCombatLog','setHorrorEffectSettings','AllowCollapse','max','Sprite_Actor_setActorHome','isSkillItemWindowsMiddle','Pre','_homeX','Game_Enemy_transform','DefaultStyle','_baseLineStack','ShowCosts','ShowEnemyGauge','isInputting','updateAttachmentSprites','isCharging','isFlipped','<CUSTOM\x20ACTION\x20SEQUENCE>','_enemyWindow','Immortal','Scene_Battle_selectPreviousCommand','Formula','_totalValue','JS\x20%1START\x20TURN','clamp','CmdTextAlign','createPartyCommandWindow','NewPopupBottom','placeActorName','changeAtbCastTime','isSkewing','statusWindowRectBorderStyle','createPartyCommandWindowBattleCore','_drawTextOutline','Sprite_Battler_setBattler','applySoftDamageCap','notFocusValid','isEffecting','_forcing','_dragonbonesSpriteContainer','Sprite_Actor_createStateSprite','clear','performWeaponAnimation','actorCommandCancelTPB','_createClientArea','ShowSubstitute','attackMotions','updateFrame','VisuMZ_3_SideviewBattleUI','createEnemies','isAnyoneMoving','_commonEventQueue','itemWindowRect','Game_Battler_performMiss','Wave','autoSelectLastSelected','AdjustRect','processActorCommandCancelTPB','origin','%1EndTurnJS','drawTextEx','nameY','autoMeleeMultiTargetActionSet','VisuMZ_2_BattleSystemPTB','_enemies','createContents','PortraitScale','createDigits','addBattleCoreAutoBattleStyleCommand','Game_BattlerBase_isStateResist','getSkillIdWithName','isHidden','getBattlePortraitOffsetY','currentExt','setupIconTextPopup','ActSeq_Zoom_WaitForZoom','CoreEngine','createCommandVisibleJS','ITEM','PopupShiftY','setupBattleback','alterCost','updateBattlebackBitmap2','font','Mirror','extraHeight','gaugeLineHeight','MeleeDistance','checkSubstitute','_handlers','performActionMotions','_tempBattler','CommandVisible','getEnemyIdWithName','performAttackSlot','removeDamageSprite','WaitForNewLine','CheckSkillCommandShowSwitches','ActSeq_Mechanics_FtbAction','compareBattlerSprites','isATB','isNextSceneBattleTransitionable','_attackAnimationId','startTurn','Setting','_motionCount','thrust','skillTypes','_cursorSprite','Destination','Enemy','isAppeared','repeats','walk','showEnemyAttackAnimation','ActSeq_Movement_FaceDirection','sortEnemies','Buffs','StatusWindowAttachmentBackOffsetX','Game_Enemy_setup','ActSeq_Mechanics_BreakShieldReset','Parse_Notetags_Action','_weaponImageId','ActSeq_Impact_ZoomBlurPoint','isBusy','textColor','BARE\x20HANDS','BattleLayout','icon','autoMeleeSingleTargetActionSet','_skewDuration','ShowRemovedBuff','iconHeight','Sprite_Battler_damageOffsetX','undecided','Sprite_Enemy_updateBossCollapse','Sprite_Actor_update','setActiveWeaponSlot','_createEffectsContainer','DistanceX','_borderPortraitTargetX','battleSpin','registerCommand','StepDistanceX','getBattlePortraitOffsetX','_animationContainer','makeDeepCopy','BravePoints','NextTurn','ActSeq_BattleLog_PopBaseLine','statusWindowRectDefaultStyle','processPostBattleCommonEvents','SwitchCritical','ActSeq_BattleLog_DisplayAction','-%1','loadPicture','extraPositionY','Window_BattleLog_performMagicEvasion','PostStartBattleJS','ceil','cancelButtonText','lineRect','windowAreaHeight','battleCoreTpbMainPhase','ResetOffset','contentsOpacity','_createDamageContainer','makeTargetsBattleCore','noSimilarSTypes','tpbCommandFight','attackAnimationIdSlot','checkSceneBattleTransitionable','endAnimation','dragonbonesData','BattleManager_startTurn','selectPreviousCommand','getNextSubjectFromPool','Angle','isForOpponentBattleCore','ActSeq_Projectile_Picture','SvMotionIdleMass-%1-%2','FlashColor','_enemyIDs','_onceParallelInterpreters','encounterList','turnOrderChangeOTB','EmergeText','ShowAddedBuff','MP_Rate','_speed','_battleCoreBattleResumeAfter','refreshBattlerMotions','displayAddedStates','regenerateAll','IconStypeNorm','updateEventMain','callUpdateHelp','battler','SkewY','ActSeq_Angle_Reset','ActSeq_Camera_Clamp','Scene_Map_initialize','updateTargetPosition','head','battleZoom','PreApplyAsUserJS','bottom','performActionEnd','_borderPortraitDuration','Window_BattleStatus_drawItemImage','updateActors','reduce','createEmptyBitmap','mainSprite','initBattleCore','itemEffectAddAttackState','commandNameWindowCenter','drawText','ActSeq_Mechanics_PtbConvert','stepForward','_targets','VariableHeal','Parse_Notetags_Targets','ActSeq_Mechanics_ActionEffect','_homeY','Window_BattleLog_performEvasion','SkillItemBorderCols','destroyDamageSprite','Sprite_Enemy_setBattler','displayItemMessage','Game_Party_removeActor','HpGauge','VisuMZ_3_ActSeqImpact','Amp','actor','MotionFrameWait','preemptive','PostDamageAsTargetJS','setWaitMode','Window_BattleLog_clear','isJumping','_baseX','Game_Actor_setup','ActionCount','performEvasion','revertTpbCachedActor','_angleRevertOnFinish','allBattleMembers','clearResult','abs','weaponImageId','Sprite_Battler_damageOffsetY','message4','isSceneChanging','_linkedSprite','forceWeaponAnimation','chant','isMoving','getDefeatedEnemies','battleStatusWindowAnimationContainer','ResetFocus','parent','removeAnimation','checkAutoCustomActionSequenceNotetagEffect','_activeWeaponSlot','CriticalHitRate','_tpbSceneChangeCacheActor','currentSymbol','applyBattleCoreJS','VisuMZ_1_MainMenuCore','isForFriend','JS\x20ESCAPE\x20FAILURE','adjustPosition_1for1','update','createBattleField','AddHpGaugeOption','autoBattleAtStart','guard','angle','isAnyProjectilePresent','updateSpin','measureTextWidth','_commonEventIDs','battleCommands','ATTACK','ForceDeath','start','battlerSprites','loadBitmap','canEscape','FullActions','ActSeq_Motion_ClearFreezeFrame','NameOffsetX','Game_Battler_performDamage','CreateActionSequenceTargets','shouldPopupDamage','item','drawItemStyleIcon','PopupPosition','requestRefresh','refreshDimmerBitmap','setBattler','traitObjects','displayHpDamage','BindCommonEventKeysForObj','TextAlign','_targetSkewY','isStateResist','itemTextAlign','DamageStyleList','addImmortal','SideviewSelect','counterAttack','_dimmerSprite','_battleCoreAddedElements','createLowerLayer','partyCommandWindowRect','ActSeq_Weapon_NextActiveWeapon','resizeWindowBorderStyle','Text','alignBattleCoreDamageSprite','stepFlinch','applyCritical','_angleEasing','svBattlerAnchorX','process_VisuMZ_BattleCore_PluginParams','process_VisuMZ_BattleCore_DamageStyles','Strength','Scene_Battle_stop','FocusX','isTpb','clearActiveWeaponSet','refreshMotion','SceneManager_push','_wtypeIDs','isBattleSys','ActSeq_BattleLog_PushBaseLine','performSTBExploiter','IconSet','updateFlip','_flashDuration','parseForcedGameTroopSettingsBattleCore','isPartyCommandWindowDisabled','isForRandomBattleCore','createEnemyNameContainer','updateCommandNameWindow','motionSpeed','Scene_Battle_selectNextCommand','pattern','floor','deadMembers','ActSeq_Mechanics_BoostPointsChange','_preBattleCommonEvent','DEF','removeState','ARRAYJSON','SkillsStatesCore','addWeaponSwapCommand','attackSkillId','waitForFloat','ShowMpDmg','onBattleEnd','motionType','addedBuffs','placeTimeGauge','isForAll','alive\x20enemies\x20not\x20user','_tempEquipCheck','SwitchMissEvade','battleMembers'];_0x1493=function(){return _0x56f7fb;};return _0x1493();}Sprite_SvEnemy[_0x47679c(0x63e)]=Object[_0x47679c(0x2c5)](Sprite_Actor['prototype']),Sprite_SvEnemy['prototype']['constructor']=Sprite_SvEnemy,Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x736)]=function(_0x3804e4){const _0x1a7b25=_0x47679c;Sprite_Actor[_0x1a7b25(0x63e)][_0x1a7b25(0x736)][_0x1a7b25(0x22f)](this,_0x3804e4),this['scale']['x']=-0x1,this[_0x1a7b25(0x683)][_0x1a7b25(0x34c)]['x']=-0x1;},Sprite_SvEnemy[_0x47679c(0x63e)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x657)]=function(){},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x4a1)]=function(_0x3be139){},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x599)]=function(){},Sprite_SvEnemy['prototype']['updateShadowPosition']=function(){},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x19b)]=function(){const _0x4fae4a=_0x47679c;this[_0x4fae4a(0x683)][_0x4fae4a(0x5ec)]=![];},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x90d)]=function(){const _0x36ea99=_0x47679c;Sprite_Battler[_0x36ea99(0x63e)][_0x36ea99(0x90d)][_0x36ea99(0x22f)](this);const _0x3e7660=this[_0x36ea99(0x5ac)][_0x36ea99(0x47d)]();this[_0x36ea99(0x1bc)]!==_0x3e7660&&(this[_0x36ea99(0x1bc)]=_0x3e7660,this[_0x36ea99(0x1fb)][_0x36ea99(0x93f)]=ImageManager[_0x36ea99(0x469)](_0x3e7660)),this[_0x36ea99(0x1fb)]&&this[_0x36ea99(0x1fb)][_0x36ea99(0x93f)]&&this[_0x36ea99(0x671)]&&(this[_0x36ea99(0x1fb)][_0x36ea99(0x93f)]['smooth']!==this[_0x36ea99(0x671)][_0x36ea99(0x5de)]()&&(this['_mainSprite']['bitmap']['smooth']=this['_battler'][_0x36ea99(0x5de)]()));},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x1fc)]=function(){},Sprite_SvEnemy['prototype'][_0x47679c(0x576)]=function(_0x16697d,_0x1f59aa,_0x644d61){const _0x4d7ea3=_0x47679c;if(this[_0x4d7ea3(0x868)])this['parent'][_0x4d7ea3(0x576)](_0x16697d,_0x1f59aa,_0x644d61);},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x8af)]=function(){const _0x14cd4e=_0x47679c,_0x39262d=this[_0x14cd4e(0x5ac)];if(_0x39262d){const _0xbe79f3=_0x39262d[_0x14cd4e(0x4ad)]();if(_0x39262d[_0x14cd4e(0x770)]()||_0x39262d[_0x14cd4e(0x147)]())this[_0x14cd4e(0x191)](_0x14cd4e(0x7d4));else{if(_0xbe79f3===0x3)this[_0x14cd4e(0x191)](_0x14cd4e(0x368));else{if(_0xbe79f3===0x2)this[_0x14cd4e(0x191)](_0x14cd4e(0x627));else{if(_0x39262d[_0x14cd4e(0x34b)]())this[_0x14cd4e(0x191)]('chant');else{if(_0x39262d[_0x14cd4e(0x4bb)]()||_0x39262d[_0x14cd4e(0x5a0)]())this['startMotion']('guard');else{if(_0xbe79f3===0x1)this[_0x14cd4e(0x191)](_0x14cd4e(0x717));else{if(_0x39262d[_0x14cd4e(0x401)]())this[_0x14cd4e(0x191)](_0x14cd4e(0x4f0));else _0x39262d[_0x14cd4e(0x62a)]()?this[_0x14cd4e(0x191)](_0x14cd4e(0x7d4)):this['startMotion'](_0x39262d[_0x14cd4e(0x745)]()[_0x14cd4e(0x2b5)]||_0x14cd4e(0x7d4));}}}}}}}},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x4be)]=function(){const _0x52fee1=_0x47679c;return this['parent']?this[_0x52fee1(0x868)][_0x52fee1(0x706)]===0x0&&this['parent']['_offsetY']===0x0:!![];},Sprite_SvEnemy[_0x47679c(0x63e)][_0x47679c(0x8b6)]=function(){},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x56f)]=Sprite_Animation[_0x47679c(0x63e)][_0x47679c(0x1cd)],Sprite_Animation[_0x47679c(0x63e)]['targetSpritePosition']=function(_0x350fe0){const _0x242345=_0x47679c;return _0x350fe0[_0x242345(0x5e8)]?this[_0x242345(0x5d9)](_0x350fe0):VisuMZ['BattleCore'][_0x242345(0x56f)][_0x242345(0x22f)](this,_0x350fe0);},Sprite_Animation[_0x47679c(0x63e)][_0x47679c(0x5d9)]=function(_0x4ab064){const _0x212703=_0x47679c;let _0x3fe0d2=_0x4ab064['x'],_0x32850a=_0x4ab064['y'],_0x5e87e9=_0x4ab064[_0x212703(0x170)],_0x1454c5=_0x4ab064['_distortionSprite']['scale']['y'];_0x4ab064['x']=_0x4ab064[_0x212703(0x854)]+_0x4ab064[_0x212703(0x57e)](),_0x4ab064['y']=_0x4ab064[_0x212703(0x4b2)]+_0x4ab064[_0x212703(0x7ff)](),_0x4ab064[_0x212703(0x170)]*=_0x1454c5;let _0x57243c=VisuMZ[_0x212703(0x2b8)][_0x212703(0x56f)][_0x212703(0x22f)](this,_0x4ab064);return _0x4ab064['x']=_0x3fe0d2,_0x4ab064['y']=_0x32850a,_0x4ab064[_0x212703(0x170)]=_0x5e87e9,_0x57243c;},VisuMZ[_0x47679c(0x2b8)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV['prototype']['updatePosition'],Sprite_AnimationMV[_0x47679c(0x63e)][_0x47679c(0x6e8)]=function(){const _0x183877=_0x47679c;VisuMZ['BattleCore'][_0x183877(0x184)]['call'](this);if(this['_animation'][_0x183877(0x446)]===0x3){if(this['x']===0x0)this['x']=Math[_0x183877(0x23b)](Graphics[_0x183877(0x1ce)]/0x2);if(this['y']===0x0)this['y']=Math['round'](Graphics['height']/0x2);}},Sprite_Damage[_0x47679c(0x63e)]['setupBattleCore']=function(_0x48e1c6){const _0x544344=_0x47679c,_0x59a4c1=_0x48e1c6[_0x544344(0x92a)]()||_0x48e1c6[_0x544344(0x1d8)]();if(_0x59a4c1[_0x544344(0x493)]||_0x59a4c1[_0x544344(0x761)])this[_0x544344(0x5a2)]=0x0,this[_0x544344(0x264)]();else{if(_0x59a4c1['hpAffected'])this['_colorType']=_0x59a4c1['hpDamage']>=0x0?0x0:0x1,this[_0x544344(0x7a6)](_0x59a4c1[_0x544344(0xf5)]);else _0x48e1c6['isAlive']()&&_0x59a4c1[_0x544344(0x4e7)]!==0x0&&(this[_0x544344(0x5a2)]=_0x59a4c1['mpDamage']>=0x0?0x2:0x3,this[_0x544344(0x7a6)](_0x59a4c1[_0x544344(0x4e7)]));}_0x59a4c1[_0x544344(0x6ef)]&&this[_0x544344(0x2cd)]();},Sprite_Damage[_0x47679c(0x63e)][_0x47679c(0x629)]=function(_0x50cb84){},Sprite_Damage[_0x47679c(0x63e)][_0x47679c(0x7a6)]=function(_0x3ed0d8){const _0x3ef47e=_0x47679c;let _0x16e72a=this['createString'](_0x3ed0d8);const _0x12ba84=this[_0x3ef47e(0x2a3)](),_0x3ebaa7=Math['floor'](_0x12ba84*0.75);for(let _0x29c81b=0x0;_0x29c81b<_0x16e72a[_0x3ef47e(0x42d)];_0x29c81b++){const _0x48d700=this['createChildSprite'](_0x3ebaa7,_0x12ba84);_0x48d700[_0x3ef47e(0x93f)][_0x3ef47e(0x83c)](_0x16e72a[_0x29c81b],0x0,0x0,_0x3ebaa7,_0x12ba84,'center'),_0x48d700['x']=(_0x29c81b-(_0x16e72a['length']-0x1)/0x2)*_0x3ebaa7,_0x48d700['dy']=-_0x29c81b;}},Sprite_Damage[_0x47679c(0x63e)][_0x47679c(0x902)]=function(_0x572af8){const _0x36e9af=_0x47679c;let _0x31d83c=Math[_0x36e9af(0x85c)](_0x572af8)[_0x36e9af(0x5e0)]();this[_0x36e9af(0x900)]()&&(_0x31d83c=VisuMZ['GroupDigits'](_0x31d83c));const _0x22b80a=VisuMZ[_0x36e9af(0x2b8)]['Settings']['Damage'];let _0x4e1f97='',_0x1f5c4c='';switch(this['_colorType']){case 0x0:_0x4e1f97=_0x22b80a['hpDamageFmt']||_0x36e9af(0x7fd),_0x1f5c4c=TextManager['hp'];if(_0x572af8===0x0)_0x4e1f97='%1';break;case 0x1:_0x4e1f97=_0x22b80a['hpHealingFmt']||_0x36e9af(0x298),_0x1f5c4c=TextManager['hp'];break;case 0x2:_0x4e1f97=_0x22b80a[_0x36e9af(0x609)]||_0x36e9af(0x1dd),_0x1f5c4c=TextManager['mp'];break;case 0x3:_0x4e1f97=_0x22b80a[_0x36e9af(0x3ab)]||_0x36e9af(0x196),_0x1f5c4c=TextManager['mp'];break;}return _0x4e1f97[_0x36e9af(0x151)](_0x31d83c,_0x1f5c4c)[_0x36e9af(0x616)]();},Sprite_Damage['prototype'][_0x47679c(0x900)]=function(){const _0x4bff52=_0x47679c;return Imported[_0x4bff52(0x4a7)]?VisuMZ[_0x4bff52(0x7af)][_0x4bff52(0x1ea)][_0x4bff52(0x1b0)][_0x4bff52(0x442)]:![];},Sprite_Damage[_0x47679c(0x63e)][_0x47679c(0x2cd)]=function(){const _0x575c18=_0x47679c,_0x2cb6b0=VisuMZ['BattleCore']['Settings'][_0x575c18(0x2c7)];this['_flashColor']=_0x2cb6b0[_0x575c18(0x3c2)][_0x575c18(0x36d)](0x0),this[_0x575c18(0x8b7)]=_0x2cb6b0[_0x575c18(0x407)];},Sprite_Damage['prototype']['setupTextPopup']=function(_0x3ad79f,_0x403bd5){const _0x329119=_0x47679c;this['_flashColor']=_0x403bd5[_0x329119(0x187)]||[0x0,0x0,0x0,0x0],this[_0x329119(0x951)]=JsonEx[_0x329119(0x7f5)](this['_flashColor']),this[_0x329119(0x8b7)]=_0x403bd5['flashDuration']||0x0;const _0x2d0d63=this[_0x329119(0x2a3)](),_0xc9bfce=Math['floor'](_0x2d0d63*0x1e),_0x48d7fd=this[_0x329119(0x431)](_0xc9bfce,_0x2d0d63);_0x48d7fd['bitmap'][_0x329119(0x7e0)]=ColorManager[_0x329119(0x1dc)](_0x403bd5['textColor']),_0x48d7fd[_0x329119(0x93f)][_0x329119(0x83c)](_0x3ad79f,0x0,0x0,_0xc9bfce,_0x2d0d63,'center'),_0x48d7fd['dy']=0x0;},Sprite_Damage[_0x47679c(0x63e)]['setupIconTextPopup']=function(_0x243981,_0x2f5eb4,_0x52882a){const _0x294d50=_0x47679c,_0x2e1657=Math[_0x294d50(0x766)](this[_0x294d50(0x2a3)](),ImageManager[_0x294d50(0x7e7)]),_0x58db97=Math[_0x294d50(0x8c0)](_0x2e1657*0x1e),_0xd903e8=this[_0x294d50(0x431)](_0x58db97,_0x2e1657),_0x26d57f=ImageManager[_0x294d50(0x3b0)]/0x2,_0x4f8bc2=_0xd903e8[_0x294d50(0x93f)][_0x294d50(0x87c)](_0x2f5eb4+'\x20');_0xd903e8[_0x294d50(0x93f)]['textColor']=ColorManager['getColor'](_0x52882a[_0x294d50(0x7e0)]),_0xd903e8[_0x294d50(0x93f)][_0x294d50(0x83c)](_0x2f5eb4,_0x26d57f,0x0,_0x58db97-_0x26d57f,_0x2e1657,_0x294d50(0x54e));const _0xe84b8a=Math[_0x294d50(0x23b)]((_0x2e1657-ImageManager[_0x294d50(0x7e7)])/0x2),_0xe9e798=_0x58db97/0x2-ImageManager['iconWidth']-_0x4f8bc2/0x2+_0x26d57f/0x2,_0x75569a=ImageManager[_0x294d50(0x1cb)](_0x294d50(0x8b5)),_0x2331da=ImageManager[_0x294d50(0x3b0)],_0x70da83=ImageManager[_0x294d50(0x7e7)],_0x231a7c=_0x243981%0x10*_0x2331da,_0x1db775=Math['floor'](_0x243981/0x10)*_0x70da83;_0xd903e8['bitmap'][_0x294d50(0x14f)](_0x75569a,_0x231a7c,_0x1db775,_0x2331da,_0x70da83,_0xe9e798,_0xe84b8a),this[_0x294d50(0x951)]=_0x52882a[_0x294d50(0x187)]||[0x0,0x0,0x0,0x0],this[_0x294d50(0x951)]=JsonEx[_0x294d50(0x7f5)](this['_flashColor']),this['_flashDuration']=_0x52882a[_0x294d50(0x941)]||0x0,_0xd903e8['dy']=0x0;},VisuMZ['BattleCore'][_0x47679c(0x344)]=Sprite_StateIcon['prototype'][_0x47679c(0x792)],Sprite_StateIcon[_0x47679c(0x63e)][_0x47679c(0x792)]=function(){const _0x3d7834=_0x47679c;VisuMZ[_0x3d7834(0x2b8)]['Sprite_StateIcon_updateFrame'][_0x3d7834(0x22f)](this),this['opacity']=this[_0x3d7834(0x14c)]>0x0?0xff:0x0;},VisuMZ[_0x47679c(0x2b8)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon[_0x47679c(0x63e)][_0x47679c(0x883)],Sprite_Weapon[_0x47679c(0x63e)][_0x47679c(0x883)]=function(){const _0x4faf2c=_0x47679c;VisuMZ[_0x4faf2c(0x2b8)]['Sprite_Weapon_loadBitmap'][_0x4faf2c(0x22f)](this),this[_0x4faf2c(0x93f)]&&(this[_0x4faf2c(0x93f)][_0x4faf2c(0x2ca)]=VisuMZ[_0x4faf2c(0x2b8)][_0x4faf2c(0x1ea)][_0x4faf2c(0x559)][_0x4faf2c(0x138)]);};function Sprite_HpGauge(){const _0x46d277=_0x47679c;this[_0x46d277(0x736)](...arguments);}Sprite_HpGauge['prototype']=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge['prototype']['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x47679c(0x736)]=function(){const _0x3fb56a=_0x47679c;Sprite_Gauge['prototype'][_0x3fb56a(0x736)][_0x3fb56a(0x22f)](this);},Sprite_HpGauge[_0x47679c(0x63e)]['gaugeX']=function(){return 0x0;},Sprite_HpGauge[_0x47679c(0x63e)][_0x47679c(0x3a2)]=function(){const _0x64ce80=_0x47679c;this['bitmap']['clear']();const _0x1a2ef9=this[_0x64ce80(0x65c)]();!isNaN(_0x1a2ef9)&&this[_0x64ce80(0x24a)]();};function Sprite_EnemyName(){const _0x51406f=_0x47679c;this[_0x51406f(0x736)](...arguments);}Sprite_EnemyName['prototype']=Object['create'](Sprite_Name[_0x47679c(0x63e)]),Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x365)]=Sprite_EnemyName,Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x736)]=function(){const _0x3a5b5f=_0x47679c;Sprite_Name['prototype'][_0x3a5b5f(0x736)][_0x3a5b5f(0x22f)](this),this['createAttachedSprites']();},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x6b1)]=function(){const _0x202a06=_0x47679c;Sprite_Name[_0x202a06(0x63e)][_0x202a06(0x6b1)]['call'](this),this[_0x202a06(0x38c)]=0x0,this[_0x202a06(0x861)]=null,this[_0x202a06(0x402)]['x']=0.5,this['anchor']['y']=0x0;},Sprite_EnemyName[_0x47679c(0x63e)]['createAttachedSprites']=function(){const _0x6e0a9d=_0x47679c;VisuMZ['BattleCore'][_0x6e0a9d(0x1ea)][_0x6e0a9d(0x7d1)]['NameAttachStateIcon']&&(this[_0x6e0a9d(0xec)]=new Sprite_StateIcon(),this['addChild'](this[_0x6e0a9d(0xec)]));},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x2d5)]=function(){const _0x40e1eb=_0x47679c;return Graphics[_0x40e1eb(0x75b)];},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x1b9)]=function(){const _0x2562c3=_0x47679c;return this[_0x2562c3(0x3eb)]=this[_0x2562c3(0x3eb)]||Window_Base[_0x2562c3(0x63e)][_0x2562c3(0x663)]()||0x24,this['_lineHeight']*0x4;},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x2a3)]=function(){const _0x83b290=_0x47679c;return VisuMZ['BattleCore'][_0x83b290(0x1ea)][_0x83b290(0x7d1)][_0x83b290(0x65b)]||$gameSystem[_0x83b290(0x25a)]();},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x3e6)]=function(_0x1d79b6){const _0x48899c=_0x47679c;this[_0x48899c(0x861)]=_0x1d79b6;},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x874)]=function(){const _0x1c7ba0=_0x47679c;Sprite_Name[_0x1c7ba0(0x63e)][_0x1c7ba0(0x874)]['call'](this),this[_0x1c7ba0(0x4cf)](),this[_0x1c7ba0(0x6e8)](),this['updateAttachedSprites'](),this[_0x1c7ba0(0x1e2)]();},Sprite_EnemyName['prototype']['redraw']=function(){const _0x16eddb=_0x47679c;this[_0x16eddb(0x293)]=undefined;const _0x388160=this[_0x16eddb(0x620)](),_0x1ee935=this[_0x16eddb(0x2d5)](),_0x6b87d6=Window_Base[_0x16eddb(0x63e)][_0x16eddb(0x663)]();this[_0x16eddb(0x3f0)](),this['bitmap'][_0x16eddb(0x78c)](),this[_0x16eddb(0x93f)][_0x16eddb(0x83c)](_0x388160,0x0,0x0,_0x1ee935,_0x6b87d6,_0x16eddb(0x54e));},Sprite_EnemyName[_0x47679c(0x63e)]['updateLink']=function(){const _0xe04fc0=_0x47679c;if(!this['_linkedSprite'])return;this[_0xe04fc0(0x671)]!==this[_0xe04fc0(0x861)][_0xe04fc0(0x671)]&&this['setup'](this[_0xe04fc0(0x861)][_0xe04fc0(0x671)]);},Sprite_EnemyName['prototype'][_0x47679c(0x6e8)]=function(){const _0x2eec21=_0x47679c;if(!this[_0x2eec21(0x861)])return;this['_lineHeight']=this['_lineHeight']||Window_Base['prototype'][_0x2eec21(0x663)](),this['x']=this[_0x2eec21(0x861)]['_baseX'],this['y']=this[_0x2eec21(0x861)][_0x2eec21(0x4b2)]-this[_0x2eec21(0x3eb)]*0.5;const _0x2ffd23=VisuMZ[_0x2eec21(0x2b8)][_0x2eec21(0x1ea)][_0x2eec21(0x7d1)];this['x']+=_0x2ffd23[_0x2eec21(0x887)]||0x0,this['y']+=_0x2ffd23[_0x2eec21(0x5db)]||0x0;},Sprite_EnemyName[_0x47679c(0x63e)]['updateAttachedSprites']=function(){this['updateStateIconSprite']();},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x674)]=function(){const _0x481b25=_0x47679c;if(!this[_0x481b25(0xec)])return;this[_0x481b25(0x671)]!==this[_0x481b25(0xec)]['_battler']&&this[_0x481b25(0xec)][_0x481b25(0x629)](this[_0x481b25(0x671)]);const _0xd02701=this[_0x481b25(0x8eb)]();this['_lineHeight']=this[_0x481b25(0x3eb)]||Window_Base['prototype'][_0x481b25(0x663)](),this[_0x481b25(0xec)]['x']=Math[_0x481b25(0x23b)]((_0xd02701+ImageManager[_0x481b25(0x3b0)])/0x2)+0x8,this[_0x481b25(0xec)]['y']=this[_0x481b25(0x3eb)]/0x2;const _0x5f0200=VisuMZ[_0x481b25(0x2b8)][_0x481b25(0x1ea)][_0x481b25(0x7d1)];this[_0x481b25(0xec)]['x']+=_0x5f0200[_0x481b25(0x623)]||0x0,this[_0x481b25(0xec)]['y']+=_0x5f0200[_0x481b25(0x3f9)]||0x0;},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x1e2)]=function(){const _0x1567a7=_0x47679c,_0x3c9eee=this[_0x1567a7(0x2be)]();if(_0x3c9eee&&this[_0x1567a7(0x38c)]<0xff)this[_0x1567a7(0x38c)]+=0x10;else!_0x3c9eee&&this[_0x1567a7(0x38c)]>0x0&&(this[_0x1567a7(0x38c)]-=0x10);},Sprite_EnemyName['prototype'][_0x47679c(0x2be)]=function(){const _0x56a0b0=_0x47679c;if(this[_0x56a0b0(0x5ed)]())return![];else{if(!this[_0x56a0b0(0x671)])return![];else{if(this[_0x56a0b0(0x671)]['isDead']())return![];else{if(!this['_battler'][_0x56a0b0(0x7d2)]())return![];else{if(this[_0x56a0b0(0x60e)]())return!![];else{if(this[_0x56a0b0(0x328)]())return!![];else{if(this[_0x56a0b0(0x613)]())return!![];else{if(this['opacity']>0x0)return![];}}}}}}}},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x5ed)]=function(){const _0xc0f11d=_0x47679c;return VisuMZ[_0xc0f11d(0x2b8)][_0xc0f11d(0x1ea)]['Enemy'][_0xc0f11d(0x525)];},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x60e)]=function(){return![];},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x328)]=function(){const _0x1e426c=_0x47679c;return VisuMZ[_0x1e426c(0x2b8)][_0x1e426c(0x1ea)][_0x1e426c(0x7d1)][_0x1e426c(0x6b8)];},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x613)]=function(){const _0x43843b=_0x47679c;return VisuMZ[_0x43843b(0x2b8)][_0x43843b(0x1ea)][_0x43843b(0x7d1)]['NameAlwaysSelectOnly']?this['_battler'][_0x43843b(0x64d)]():SceneManager['_scene'][_0x43843b(0x775)]&&SceneManager[_0x43843b(0x56c)][_0x43843b(0x775)][_0x43843b(0x390)]&&SceneManager[_0x43843b(0x56c)]['_enemyWindow'][_0x43843b(0x7a3)]['includes'](this[_0x43843b(0x671)]);},Sprite_EnemyName[_0x47679c(0x63e)][_0x47679c(0x8eb)]=function(){const _0x2ea239=_0x47679c;if(!this[_0x2ea239(0x671)])return 0x0;if(this[_0x2ea239(0x293)])return this[_0x2ea239(0x293)];const _0x161318=this[_0x2ea239(0x620)]();return this['setupFont'](),this[_0x2ea239(0x293)]=this[_0x2ea239(0x93f)]['measureTextWidth'](_0x161318)||0x1,this[_0x2ea239(0x293)];},VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition']=Sprite_Battleback[_0x47679c(0x63e)][_0x47679c(0x179)],Sprite_Battleback['prototype'][_0x47679c(0x179)]=function(){const _0x19208f=_0x47679c,_0x552e65=VisuMZ[_0x19208f(0x2b8)][_0x19208f(0x1ea)]['Battleback'];if(!_0x552e65)return VisuMZ[_0x19208f(0x2b8)][_0x19208f(0x3c4)]['call'](this);const _0x2e1e45=String(_0x552e65[_0x19208f(0x76c)])||'MZ';switch(_0x2e1e45){case'MZ':VisuMZ['BattleCore'][_0x19208f(0x3c4)][_0x19208f(0x22f)](this);break;case _0x19208f(0x48d):this[_0x19208f(0x873)]();break;case'ScaleToFit':this['adjustPosition_ScaleToFit']();break;case _0x19208f(0x518):this[_0x19208f(0x56e)]();break;case'ScaleUp':this[_0x19208f(0x70c)]();break;}},Sprite_Battleback[_0x47679c(0x63e)][_0x47679c(0x873)]=function(){const _0x5c0f64=_0x47679c;this['width']=Graphics[_0x5c0f64(0x1ce)],this['height']=Graphics[_0x5c0f64(0x170)];const _0x21bfbd=0x1;this['scale']['x']=_0x21bfbd,this[_0x5c0f64(0x34c)]['y']=_0x21bfbd,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x47679c(0x63e)][_0x47679c(0x760)]=function(){const _0x3a20be=_0x47679c;this['width']=Graphics['width'],this[_0x3a20be(0x170)]=Graphics['height'];const _0x297d0f=this[_0x3a20be(0x1ce)]/this[_0x3a20be(0x93f)]['width'],_0x3a3e1f=this['height']/this[_0x3a20be(0x93f)][_0x3a20be(0x170)],_0x41506a=Math[_0x3a20be(0x766)](_0x297d0f,_0x3a3e1f);this['scale']['x']=_0x41506a,this[_0x3a20be(0x34c)]['y']=_0x41506a,this['x']=(Graphics[_0x3a20be(0x1ce)]-this['width'])/0x2,this['y']=Graphics[_0x3a20be(0x170)]-this[_0x3a20be(0x170)];},Sprite_Battleback[_0x47679c(0x63e)]['adjustPosition_ScaleDown']=function(){const _0x3a514b=_0x47679c;this[_0x3a514b(0x1ce)]=Graphics[_0x3a514b(0x1ce)],this[_0x3a514b(0x170)]=Graphics['height'];const _0x494820=Math[_0x3a514b(0x905)](0x1,this[_0x3a514b(0x1ce)]/this[_0x3a514b(0x93f)][_0x3a514b(0x1ce)]),_0x1037eb=Math[_0x3a514b(0x905)](0x1,this['height']/this[_0x3a514b(0x93f)][_0x3a514b(0x170)]),_0x33d065=Math[_0x3a514b(0x766)](_0x494820,_0x1037eb);this[_0x3a514b(0x34c)]['x']=_0x33d065,this[_0x3a514b(0x34c)]['y']=_0x33d065,this['x']=(Graphics[_0x3a514b(0x1ce)]-this['width'])/0x2,this['y']=Graphics[_0x3a514b(0x170)]-this['height'];},Sprite_Battleback['prototype'][_0x47679c(0x70c)]=function(){const _0x243e32=_0x47679c;this[_0x243e32(0x1ce)]=Graphics[_0x243e32(0x1ce)],this[_0x243e32(0x170)]=Graphics['height'];const _0x23b0da=Math[_0x243e32(0x766)](0x1,this[_0x243e32(0x1ce)]/this[_0x243e32(0x93f)][_0x243e32(0x1ce)]),_0x1d7834=Math[_0x243e32(0x766)](0x1,this[_0x243e32(0x170)]/this[_0x243e32(0x93f)][_0x243e32(0x170)]),_0x4764ee=Math[_0x243e32(0x766)](_0x23b0da,_0x1d7834);this['scale']['x']=_0x4764ee,this[_0x243e32(0x34c)]['y']=_0x4764ee,this['x']=(Graphics[_0x243e32(0x1ce)]-this[_0x243e32(0x1ce)])/0x2,this['y']=Graphics[_0x243e32(0x170)]-this['height'];},Spriteset_Battle[_0x47679c(0x6f7)]=VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1ea)][_0x47679c(0x7e2)][_0x47679c(0xff)]??!![],Spriteset_Battle['prototype'][_0x47679c(0x773)]=function(){const _0x334c58=_0x47679c;if(!$gameSystem[_0x334c58(0x30b)]())return![];return![];},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x4ca)]=function(){return 0x0;},Spriteset_Battle['prototype']['animationNextDelay']=function(){return 0x0;},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x6cc)]=Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x89e)],Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x89e)]=function(){const _0x270abe=_0x47679c;VisuMZ['BattleCore'][_0x270abe(0x6cc)][_0x270abe(0x22f)](this),this['createWeather'](),this[_0x270abe(0x640)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x490)]=Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x874)],Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x874)]=function(){const _0xd89cc4=_0x47679c;VisuMZ[_0xd89cc4(0x2b8)][_0xd89cc4(0x490)][_0xd89cc4(0x22f)](this),this[_0xd89cc4(0xef)](),this[_0xd89cc4(0x126)]();},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x1ac)]=function(){const _0x55f80c=_0x47679c;this['_weather']=new Weather(),this[_0x55f80c(0x39e)]['addChild'](this['_weather']);},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x126)]=function(){const _0x3d2ca8=_0x47679c;this['_weather'][_0x3d2ca8(0x3b6)]=$gameScreen[_0x3d2ca8(0x583)](),this[_0x3d2ca8(0x2fa)][_0x3d2ca8(0x927)]=$gameScreen[_0x3d2ca8(0x619)]();},Game_Interpreter[_0x47679c(0x63e)]['command236']=function(_0x485172){const _0x40f894=_0x47679c;$gameScreen[_0x40f894(0x734)](_0x485172[0x0],_0x485172[0x1],_0x485172[0x2]);if(_0x485172[0x3])this[_0x40f894(0x4f7)](_0x485172[0x2]);return!![];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x273)]=Game_Interpreter[_0x47679c(0x63e)][_0x47679c(0x334)],Game_Interpreter['prototype']['command283']=function(_0x206370){const _0x36a2ae=_0x47679c;return SceneManager[_0x36a2ae(0x75d)]()?(SceneManager[_0x36a2ae(0x56c)]['_spriteset'][_0x36a2ae(0x8f2)](_0x206370[0x0],_0x206370[0x1]),!![]):VisuMZ[_0x36a2ae(0x2b8)]['Game_Interpreter_command283'][_0x36a2ae(0x22f)](this,_0x206370);},Spriteset_Battle[_0x47679c(0x63e)]['updateBattlebackBitmap']=function(_0x4dd814,_0x6746b2){const _0xac6f8f=_0x47679c;_0x4dd814[_0xac6f8f(0x93f)]=_0x6746b2;},Spriteset_Battle[_0x47679c(0x63e)]['changeBattlebacks']=function(_0x3e6c78,_0x2108e2){const _0x9c2b4=_0x47679c;_0x3e6c78=_0x3e6c78||'',_0x2108e2=_0x2108e2||'';_0x3e6c78===''&&_0x2108e2===''&&(_0x3e6c78=this[_0x9c2b4(0x4b4)][_0x9c2b4(0x6c8)](),_0x2108e2=this[_0x9c2b4(0x417)]['battleback2Name']());const _0x20e24c=ImageManager[_0x9c2b4(0x925)](_0x3e6c78),_0x43f423=ImageManager[_0x9c2b4(0x216)](_0x2108e2);_0x20e24c[_0x9c2b4(0x6a2)](this[_0x9c2b4(0x4d8)][_0x9c2b4(0x25d)](this,this[_0x9c2b4(0x4b4)],this[_0x9c2b4(0x417)],_0x20e24c,_0x43f423));},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x4d8)]=function(_0x55f35b,_0x58b4a4,_0x1247c2,_0x56473a){const _0xcc6fe5=_0x47679c;_0x56473a[_0xcc6fe5(0x6a2)](this[_0xcc6fe5(0x7b5)][_0xcc6fe5(0x25d)](this,_0x55f35b,_0x58b4a4,_0x1247c2,_0x56473a));},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x7b5)]=function(_0x44646a,_0x3b67f7,_0x76bcc4,_0x35a5af){const _0x28f63c=_0x47679c;_0x44646a[_0x28f63c(0x93f)]=_0x76bcc4,_0x3b67f7[_0x28f63c(0x93f)]=_0x35a5af,_0x44646a[_0x28f63c(0x179)](),_0x3b67f7[_0x28f63c(0x179)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x8e1)]=Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x875)],Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x875)]=function(){const _0x4fbf1a=_0x47679c;VisuMZ[_0x4fbf1a(0x2b8)][_0x4fbf1a(0x8e1)][_0x4fbf1a(0x22f)](this),this['createBattleFieldBattleCore']();},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x16e)]=function(){const _0x3e4b92=_0x47679c;this[_0x3e4b92(0x49e)](),this[_0x3e4b92(0x2e2)](),this['createAnimationContainer'](),this['createDamageContainer'](),this[_0x3e4b92(0x92e)]();},Spriteset_Battle[_0x47679c(0x63e)]['createBattleFieldContainer']=function(){const _0x61f55f=_0x47679c;this[_0x61f55f(0x258)]=new Sprite(),this[_0x61f55f(0x39e)]['addChild'](this[_0x61f55f(0x258)]);},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x19e)]=function(){const _0x22beee=_0x47679c;this[_0x22beee(0x7f4)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x22beee(0x1d2)](this[_0x22beee(0x7f4)]):this['_battleField']['addChild'](this[_0x22beee(0x7f4)]);},Spriteset_Battle['prototype'][_0x47679c(0x194)]=function(){const _0x520180=_0x47679c;this[_0x520180(0x486)]=new Sprite(),this[_0x520180(0x486)]['x']=this['_battleField']['x'],this[_0x520180(0x486)]['y']=this[_0x520180(0x39e)]['y'],this[_0x520180(0x1d2)](this[_0x520180(0x486)]);},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x92e)]=function(){const _0xd96987=_0x47679c;if(!this[_0xd96987(0x773)]())return;this[_0xd96987(0x258)]['scale']['x']=-0x1,this[_0xd96987(0x258)]['x']=this[_0xd96987(0x39e)]['width'],this[_0xd96987(0x672)][_0xd96987(0x34c)]['x']=-0x1,this[_0xd96987(0x672)]['x']=this['_battleField'][_0xd96987(0x1ce)],this[_0xd96987(0x7f4)][_0xd96987(0x34c)]['x']=-0x1,this[_0xd96987(0x7f4)]['x']=this[_0xd96987(0x39e)][_0xd96987(0x1ce)],this[_0xd96987(0x486)][_0xd96987(0x34c)]['x']=-0x1,this[_0xd96987(0x486)]['x']=this[_0xd96987(0x39e)]['x']+this[_0xd96987(0x39e)][_0xd96987(0x1ce)];},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x794)]=function(){const _0x1b46a2=_0x47679c;Imported[_0x1b46a2(0x4a7)]&&this[_0x1b46a2(0x5aa)]()&&this['repositionEnemiesByResolution']();const _0x39e08f=$gameTroop['members'](),_0x194327=[];for(const _0x6b30b7 of _0x39e08f){_0x194327['push'](new Sprite_Enemy(_0x6b30b7));}_0x194327[_0x1b46a2(0x177)](this[_0x1b46a2(0x466)][_0x1b46a2(0x25d)](this));for(const _0x30405d of _0x194327){this[_0x1b46a2(0x258)][_0x1b46a2(0x1d2)](_0x30405d);}this[_0x1b46a2(0x630)]=_0x194327;},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x499)]=function(){const _0x45dfa3=_0x47679c;this[_0x45dfa3(0x32c)]=[];for(let _0xc9ed9e=0x0;_0xc9ed9e<$gameParty[_0x45dfa3(0x59d)]();_0xc9ed9e++){const _0x5f028f=$gameParty[_0x45dfa3(0x8d4)]()[_0xc9ed9e],_0x2ec7aa=new Sprite_Actor();_0x2ec7aa[_0x45dfa3(0x762)](_0x5f028f),_0x2ec7aa[_0x45dfa3(0x890)](_0x5f028f),_0x2ec7aa['update'](),this[_0x45dfa3(0x32c)]['push'](_0x2ec7aa),this[_0x45dfa3(0x258)][_0x45dfa3(0x1d2)](_0x2ec7aa);}},Spriteset_Battle[_0x47679c(0x63e)]['createAnimationSprite']=function(_0x41c86f,_0x136065,_0x2956c2,_0x2ee50a){const _0x4fd122=_0x47679c,_0x19ef7c=this[_0x4fd122(0x4cb)](_0x136065),_0x370f06=new(_0x19ef7c?Sprite_AnimationMV:Sprite_Animation)(),_0x504ee5=this['makeTargetSprites'](_0x41c86f);this[_0x4fd122(0x321)](_0x41c86f[0x0])&&(_0x2956c2=!_0x2956c2),_0x370f06[_0x4fd122(0x3a7)]=_0x41c86f,_0x370f06[_0x4fd122(0x629)](_0x504ee5,_0x136065,_0x2956c2,_0x2ee50a),this[_0x4fd122(0x6c0)](_0x370f06);},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x6c0)]=function(_0x566766){const _0x481b9b=_0x47679c;this[_0x481b9b(0x942)](_0x566766)?this[_0x481b9b(0x866)]()['addChild'](_0x566766):this['_animationContainer']['addChild'](_0x566766),this[_0x481b9b(0x8d5)]['push'](_0x566766);},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x942)]=function(_0x40410f){const _0x2cff75=_0x47679c;if(!_0x40410f)return![];if(!_0x40410f[_0x2cff75(0x400)])return![];if(_0x40410f['_animation'][_0x2cff75(0x386)]!==0x0)return![];if(!_0x40410f[_0x2cff75(0x3a7)][0x0])return![];if(_0x40410f[_0x2cff75(0x3a7)][0x0]['isActor']&&!_0x40410f[_0x2cff75(0x3a7)][0x0][_0x2cff75(0xf2)]())return![];if($gameSystem[_0x2cff75(0x30b)]())return![];if(!this[_0x2cff75(0x866)]())return![];const _0x47a0d2=Window_BattleStatus['prototype'][_0x2cff75(0x527)]();return[_0x2cff75(0x5d2),'xp'][_0x2cff75(0x5bf)](_0x47a0d2);},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x866)]=function(){const _0x479c67=_0x47679c;if(!SceneManager[_0x479c67(0x56c)])return null;if(!SceneManager['_scene'][_0x479c67(0x5cc)])return null;if(!SceneManager[_0x479c67(0x56c)][_0x479c67(0x5cc)][_0x479c67(0x102)])return null;return SceneManager[_0x479c67(0x56c)][_0x479c67(0x5cc)][_0x479c67(0x102)];},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x869)]=function(_0x1bad38){const _0x113db3=_0x47679c;this[_0x113db3(0x148)](_0x1bad38);for(const _0x5a151e of _0x1bad38[_0x113db3(0x3a7)]){_0x5a151e[_0x113db3(0x80f)]&&_0x5a151e[_0x113db3(0x80f)]();}_0x1bad38[_0x113db3(0x25f)]();},Spriteset_Battle[_0x47679c(0x63e)]['removeAnimationFromContainer']=function(_0x3485bd){const _0x29f40e=_0x47679c;this['_animationSprites'][_0x29f40e(0x3fc)](_0x3485bd),this['isAnimationShownOnBattlePortrait'](_0x3485bd)?this[_0x29f40e(0x866)]()[_0x29f40e(0x70d)](_0x3485bd):this['_animationContainer'][_0x29f40e(0x70d)](_0x3485bd);},VisuMZ['BattleCore'][_0x47679c(0x4f6)]=Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x835)],Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x835)]=function(){const _0x5bef60=_0x47679c;VisuMZ[_0x5bef60(0x2b8)]['Spriteset_Battle_updateActors'][_0x5bef60(0x22f)](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x55c)]=function(){const _0x1c9ba8=_0x47679c;this['_battlerContainer']['children'][_0x1c9ba8(0x177)](this['compareBattlerSprites']['bind'](this)),this['putActiveBattlerOnTop']();},Spriteset_Battle['prototype'][_0x47679c(0x7c6)]=function(_0xa5315e,_0x2a0404){const _0x1009ce=_0x47679c;if(VisuMZ[_0x1009ce(0x2b8)]['Settings']['Actor'][_0x1009ce(0x6c1)]){if(_0xa5315e['_battler']&&_0x2a0404[_0x1009ce(0x671)]){if(_0xa5315e[_0x1009ce(0x671)]['isActor']()&&_0x2a0404[_0x1009ce(0x671)][_0x1009ce(0x415)]())return 0x1;else{if(_0x2a0404[_0x1009ce(0x671)]['isActor']()&&_0xa5315e[_0x1009ce(0x671)][_0x1009ce(0x415)]())return-0x1;}}}return _0xa5315e[_0x1009ce(0x4b2)]!==_0x2a0404[_0x1009ce(0x4b2)]?_0xa5315e[_0x1009ce(0x4b2)]-_0x2a0404[_0x1009ce(0x4b2)]:_0x2a0404[_0x1009ce(0x3d8)]-_0xa5315e[_0x1009ce(0x3d8)];},Spriteset_Battle[_0x47679c(0x63e)]['putActiveBattlerOnTop']=function(){const _0x3df4e1=_0x47679c;if(!VisuMZ['BattleCore'][_0x3df4e1(0x1ea)][_0x3df4e1(0x559)][_0x3df4e1(0x589)])return;const _0x4c4326=BattleManager['_subject'];if(_0x4c4326){if(_0x4c4326[_0x3df4e1(0xf2)]()&&!$gameSystem[_0x3df4e1(0x30b)]())return;const _0x40c305=_0x4c4326[_0x3df4e1(0x828)]();if(_0x40c305&&_0x4c4326[_0x3df4e1(0xf2)]())this[_0x3df4e1(0x258)][_0x3df4e1(0x1d2)](_0x40c305);}},Spriteset_Battle['prototype']['processEscape']=function(){const _0x13481b=_0x47679c;for(const _0x1cfaaa of $gameParty[_0x13481b(0x8ef)]()){if(!_0x1cfaaa)continue;if(!_0x1cfaaa[_0x13481b(0x828)]())continue;_0x1cfaaa[_0x13481b(0x828)]()[_0x13481b(0x755)]=!![],_0x1cfaaa[_0x13481b(0x828)]()[_0x13481b(0x1fc)]();}},Spriteset_Battle[_0x47679c(0x63e)]['createUIContainer']=function(){const _0x231532=_0x47679c;this[_0x231532(0x672)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x231532(0x1d2)](this[_0x231532(0x672)]):this[_0x231532(0x39e)]['addChild'](this[_0x231532(0x672)]),SceneManager[_0x231532(0x56c)][_0x231532(0x672)]=this[_0x231532(0x672)];},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x640)]=function(){const _0x421e88=_0x47679c;if(VisuMZ[_0x421e88(0x2b8)]['Settings'][_0x421e88(0x7d1)][_0x421e88(0x707)])return;this['_enemyNameContainer']=new Sprite(),BattleManager[_0x421e88(0x6b6)](this[_0x421e88(0x329)]);for(const _0x354e7b of this[_0x421e88(0x630)]){const _0x40e52e=new Sprite_EnemyName();this[_0x421e88(0x329)][_0x421e88(0x1d2)](_0x40e52e),_0x40e52e[_0x421e88(0x3e6)](_0x354e7b);}},Spriteset_Battle['prototype'][_0x47679c(0xef)]=function(){const _0x2d1638=_0x47679c;if(!this[_0x2d1638(0x486)])return;if(!this[_0x2d1638(0x672)])return;const _0x6032a3=Spriteset_Battle[_0x2d1638(0x6f7)]?this[_0x2d1638(0x486)]['x']:0x0,_0x57fc41=Spriteset_Battle[_0x2d1638(0x6f7)]?this[_0x2d1638(0x486)]['y']:0x0,_0x5afc2c=Spriteset_Battle[_0x2d1638(0x6f7)]?this['_battleField']['x']:0x0,_0x5a2057=Spriteset_Battle[_0x2d1638(0x6f7)]?this['_battleField']['y']:0x0;this[_0x2d1638(0x672)]['x']=_0x6032a3+_0x5afc2c,this[_0x2d1638(0x672)]['y']=_0x57fc41+_0x5a2057;},BattleManager[_0x47679c(0x6b6)]=function(_0x276904){const _0x9eb866=_0x47679c;if(!SceneManager[_0x9eb866(0x56c)][_0x9eb866(0x672)])return;SceneManager['_scene']['_uiContainer'][_0x9eb866(0x1d2)](_0x276904);},Spriteset_Battle['prototype'][_0x47679c(0x7df)]=function(){return![];},Spriteset_Battle['prototype'][_0x47679c(0x449)]=function(){const _0x2af7f8=_0x47679c;return this[_0x2af7f8(0x882)]()[_0x2af7f8(0x51a)](_0x6b39a2=>_0x6b39a2['isFloating']());},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x564)]=function(){const _0x56e798=_0x47679c;return this[_0x56e798(0x882)]()[_0x56e798(0x51a)](_0x334495=>_0x334495[_0x56e798(0x853)]());},Spriteset_Battle[_0x47679c(0x63e)]['isAnyoneGrowing']=function(){const _0x2a34ab=_0x47679c;return this[_0x2a34ab(0x882)]()[_0x2a34ab(0x51a)](_0x15e9e0=>_0x15e9e0[_0x2a34ab(0x364)]());},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x4eb)]=function(){const _0x17ac9d=_0x47679c;return this['battlerSprites']()['some'](_0x7b9f6=>_0x7b9f6[_0x17ac9d(0x781)]());},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x478)]=function(){const _0x1922d3=_0x47679c;return this[_0x1922d3(0x882)]()[_0x1922d3(0x51a)](_0x391b01=>_0x391b01[_0x1922d3(0x239)]());},Spriteset_Battle[_0x47679c(0x63e)][_0x47679c(0x30a)]=function(){const _0x1e099f=_0x47679c;return this['battlerSprites']()[_0x1e099f(0x51a)](_0x5563f9=>_0x5563f9[_0x1e099f(0x756)]());},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x590)]=Window_ItemList['prototype'][_0x47679c(0x2f6)],Window_ItemList[_0x47679c(0x63e)][_0x47679c(0x2f6)]=function(){const _0x3904c5=_0x47679c;return SceneManager['isSceneBattle']()?SceneManager[_0x3904c5(0x56c)][_0x3904c5(0x527)]()===_0x3904c5(0x26c)?VisuMZ['BattleCore'][_0x3904c5(0x1ea)][_0x3904c5(0x7e2)][_0x3904c5(0x845)]:VisuMZ[_0x3904c5(0x2b8)][_0x3904c5(0x1ea)][_0x3904c5(0x7e2)][_0x3904c5(0x299)]:VisuMZ[_0x3904c5(0x2b8)]['Window_ItemList_maxCols'][_0x3904c5(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x425)]=Window_SkillList['prototype'][_0x47679c(0x2f6)],Window_SkillList[_0x47679c(0x63e)][_0x47679c(0x2f6)]=function(){const _0x10f432=_0x47679c;return SceneManager[_0x10f432(0x75d)]()?SceneManager[_0x10f432(0x56c)]['battleLayoutStyle']()===_0x10f432(0x26c)?VisuMZ[_0x10f432(0x2b8)][_0x10f432(0x1ea)]['BattleLayout'][_0x10f432(0x845)]:VisuMZ[_0x10f432(0x2b8)][_0x10f432(0x1ea)][_0x10f432(0x7e2)]['SkillItemStandardCols']:VisuMZ['BattleCore'][_0x10f432(0x425)][_0x10f432(0x22f)](this);},VisuMZ['BattleCore']['Window_Options_addGeneralOptions']=Window_Options['prototype']['addGeneralOptions'],Window_Options[_0x47679c(0x63e)]['addGeneralOptions']=function(){const _0x1c4c19=_0x47679c;VisuMZ['BattleCore'][_0x1c4c19(0x940)][_0x1c4c19(0x22f)](this),this[_0x1c4c19(0xf6)](),this['addShowHpGaugeCommand']();},Window_Options['prototype'][_0x47679c(0xf6)]=function(){const _0xa8a5ba=_0x47679c;VisuMZ[_0xa8a5ba(0x2b8)][_0xa8a5ba(0x1ea)][_0xa8a5ba(0x18c)][_0xa8a5ba(0x389)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this['addBattleCoreAutoBattleStyleCommand']());},Window_Options['prototype'][_0x47679c(0x43a)]=function(){const _0xea19b4=_0x47679c;if(!VisuMZ[_0xea19b4(0x2b8)][_0xea19b4(0x1ea)][_0xea19b4(0x84a)][_0xea19b4(0x876)])return;const _0x4a9646=TextManager[_0xea19b4(0x1e4)],_0x52a67d=_0xea19b4(0x1e4);this[_0xea19b4(0x1cf)](_0x4a9646,_0x52a67d);},Window_Options[_0x47679c(0x63e)][_0x47679c(0x517)]=function(){const _0x14053f=_0x47679c,_0x48e8c6=TextManager[_0x14053f(0x648)],_0x1cbd5d='autoBattleAtStart';this[_0x14053f(0x1cf)](_0x48e8c6,_0x1cbd5d);},Window_Options['prototype'][_0x47679c(0x7a7)]=function(){const _0x27bae7=_0x47679c,_0x3d91a4=TextManager[_0x27bae7(0x380)],_0x588339=_0x27bae7(0x289);this[_0x27bae7(0x1cf)](_0x3d91a4,_0x588339);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3e1)]=Window_Options[_0x47679c(0x63e)]['statusText'],Window_Options[_0x47679c(0x63e)][_0x47679c(0x3a5)]=function(_0x46b1f9){const _0x2bf4ab=_0x47679c,_0x2aea30=this[_0x2bf4ab(0x4dc)](_0x46b1f9);return _0x2aea30===_0x2bf4ab(0x289)?this[_0x2bf4ab(0x8da)]():VisuMZ[_0x2bf4ab(0x2b8)][_0x2bf4ab(0x3e1)]['call'](this,_0x46b1f9);},Window_Options[_0x47679c(0x63e)][_0x47679c(0x8da)]=function(){const _0x30e6ba=_0x47679c,_0x5dabb3=VisuMZ[_0x30e6ba(0x2b8)][_0x30e6ba(0x1ea)][_0x30e6ba(0x18c)],_0x2a6110=this[_0x30e6ba(0x146)](_0x30e6ba(0x289));return _0x2a6110?_0x5dabb3[_0x30e6ba(0x2f8)]:_0x5dabb3[_0x30e6ba(0x688)];},Window_ShopStatus[_0x47679c(0x63e)][_0x47679c(0x307)]=function(){const _0x560060=_0x47679c,_0x5a5661=DataManager['getDamageStyle'](this[_0x560060(0x165)]),_0x7cc35=VisuMZ['DamageStyles'][_0x5a5661];if(!_0x7cc35)return this[_0x560060(0x222)]();const _0x5df8cf=_0x560060(0x114)[_0x560060(0x151)](this['_item'][_0x560060(0x1e6)]['type']),_0x5e85d3=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x560060(0x165)][_0x560060(0x1e6)]['type']];return _0x7cc35[_0x5df8cf][_0x560060(0x151)](_0x5e85d3);},Window_ShopStatus[_0x47679c(0x63e)][_0x47679c(0x2ba)]=function(){const _0x1fce82=_0x47679c,_0x4b3cae=DataManager[_0x1fce82(0x456)](this['_item']),_0x27959d=VisuMZ[_0x1fce82(0xf3)][_0x4b3cae];if(!_0x27959d)return this['getItemDamageAmountTextOriginal']();return _0x27959d[_0x1fce82(0x595)][_0x1fce82(0x22f)](this);},VisuMZ[_0x47679c(0x2b8)]['Window_PartyCommand_initialize']=Window_PartyCommand['prototype'][_0x47679c(0x736)],Window_PartyCommand[_0x47679c(0x63e)]['initialize']=function(_0x585600){const _0x58872c=_0x47679c;VisuMZ['BattleCore'][_0x58872c(0x373)][_0x58872c(0x22f)](this,_0x585600),this[_0x58872c(0x476)](_0x585600);},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x476)]=function(_0x4dc6d3){const _0x33fef9=_0x47679c,_0x12cb48=new Rectangle(0x0,0x0,_0x4dc6d3['width'],_0x4dc6d3[_0x33fef9(0x170)]);this['_commandNameWindow']=new Window_Base(_0x12cb48),this[_0x33fef9(0x677)][_0x33fef9(0x38c)]=0x0,this['addChild'](this[_0x33fef9(0x677)]),this[_0x33fef9(0x8bc)]();},Window_PartyCommand['prototype'][_0x47679c(0x827)]=function(){const _0x254d95=_0x47679c;Window_Command[_0x254d95(0x63e)][_0x254d95(0x827)][_0x254d95(0x22f)](this);if(this[_0x254d95(0x677)])this[_0x254d95(0x8bc)]();},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x8bc)]=function(){const _0x31867b=_0x47679c,_0x25d255=this[_0x31867b(0x677)];_0x25d255[_0x31867b(0x632)][_0x31867b(0x78c)]();const _0x155b30=this['commandStyleCheck'](this[_0x31867b(0x588)]());if(_0x155b30===_0x31867b(0x7e3)&&this[_0x31867b(0x924)]()>0x0){const _0xab2438=this[_0x31867b(0x5ba)](this['index']());let _0x503e2e=this[_0x31867b(0x18f)](this['index']());_0x503e2e=_0x503e2e['replace'](/\\I\[(\d+)\]/gi,''),_0x25d255[_0x31867b(0x5dd)](),this[_0x31867b(0x432)](_0x503e2e,_0xab2438),this[_0x31867b(0x14b)](_0x503e2e,_0xab2438),this['commandNameWindowCenter'](_0x503e2e,_0xab2438);}},Window_PartyCommand[_0x47679c(0x63e)]['commandNameWindowDrawBackground']=function(_0x5ccc15,_0x1040ee){},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x14b)]=function(_0x3cc103,_0x3012d0){const _0x5c0d40=_0x47679c,_0x25a38f=this[_0x5c0d40(0x677)];_0x25a38f[_0x5c0d40(0x83c)](_0x3cc103,0x0,_0x3012d0['y'],_0x25a38f[_0x5c0d40(0x68f)],_0x5c0d40(0x54e));},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x83b)]=function(_0xa01b98,_0xc5f260){const _0x45c070=_0x47679c,_0x1301a1=this[_0x45c070(0x677)],_0x457b19=$gameSystem['windowPadding'](),_0x25ed0d=_0xc5f260['x']+Math[_0x45c070(0x8c0)](_0xc5f260[_0x45c070(0x1ce)]/0x2)+_0x457b19;_0x1301a1['x']=_0x1301a1[_0x45c070(0x1ce)]/-0x2+_0x25ed0d,_0x1301a1['y']=Math['floor'](_0xc5f260[_0x45c070(0x170)]/0x2);},Window_PartyCommand['prototype'][_0x47679c(0x3ac)]=function(){const _0x3a30bc=_0x47679c;this[_0x3a30bc(0x917)](),this[_0x3a30bc(0x265)](),this['addCustomCommands'](),this[_0x3a30bc(0x20f)](),this[_0x3a30bc(0x169)]();},Window_PartyCommand[_0x47679c(0x63e)]['addFightCommand']=function(){const _0x23e0fe=_0x47679c,_0x33368d=this[_0x23e0fe(0x48a)](),_0x117b24=VisuMZ[_0x23e0fe(0x2b8)][_0x23e0fe(0x1ea)][_0x23e0fe(0x3c8)]['CmdIconFight'],_0x3517a2=_0x33368d===_0x23e0fe(0x93e)?TextManager[_0x23e0fe(0x430)]:'\x5cI[%1]%2'['format'](_0x117b24,TextManager['fight']),_0x4eb164=this[_0x23e0fe(0x930)]();this[_0x23e0fe(0x1cf)](_0x3517a2,'fight',_0x4eb164);},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x930)]=function(){return!![];},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x265)]=function(){const _0x56d5a5=_0x47679c;if(!this[_0x56d5a5(0x56b)]())return;const _0x185c9c=this['commandStyle'](),_0x3cadc=VisuMZ[_0x56d5a5(0x2b8)][_0x56d5a5(0x1ea)][_0x56d5a5(0x3c8)]['CmdIconAutoBattle'],_0x25e885=_0x185c9c===_0x56d5a5(0x93e)?TextManager[_0x56d5a5(0x626)]:_0x56d5a5(0x507)['format'](_0x3cadc,TextManager[_0x56d5a5(0x626)]),_0xc6b80f=this['isAutoBattleCommandEnabled']();this[_0x56d5a5(0x1cf)](_0x25e885,'autoBattle',_0xc6b80f);},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x56b)]=function(){const _0x55e8ae=_0x47679c;return VisuMZ[_0x55e8ae(0x2b8)]['Settings']['PartyCmd']['CommandAddAutoBattle'];},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x59c)]=function(){return!![];},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x556)]=function(){},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x20f)]=function(){const _0x2b2046=_0x47679c;if(!this['isOptionsCommandAdded']())return;const _0x23f27d=this[_0x2b2046(0x48a)](),_0xb1c4e8=VisuMZ['BattleCore'][_0x2b2046(0x1ea)][_0x2b2046(0x3c8)]['CmdIconOptions'],_0x37a2d1=_0x23f27d===_0x2b2046(0x93e)?TextManager[_0x2b2046(0x332)]:_0x2b2046(0x507)[_0x2b2046(0x151)](_0xb1c4e8,TextManager[_0x2b2046(0x332)]),_0x19edef=this[_0x2b2046(0x25e)]();this['addCommand'](_0x37a2d1,_0x2b2046(0x332),_0x19edef);},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x19a)]=function(){const _0x34c536=_0x47679c;return VisuMZ[_0x34c536(0x2b8)]['Settings']['PartyCmd'][_0x34c536(0x8f6)];},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x25e)]=function(){return!![];},Window_PartyCommand['prototype']['addEscapeCommand']=function(){const _0xb52690=_0x47679c,_0x1ce956=this[_0xb52690(0x48a)](),_0xf1bc81=VisuMZ[_0xb52690(0x2b8)][_0xb52690(0x1ea)][_0xb52690(0x3c8)][_0xb52690(0x385)],_0x2309f5=_0x1ce956===_0xb52690(0x93e)?TextManager[_0xb52690(0x2a7)]:'\x5cI[%1]%2'[_0xb52690(0x151)](_0xf1bc81,TextManager[_0xb52690(0x2a7)]),_0x37f459=this['isEscapeCommandEnabled']();this[_0xb52690(0x1cf)](_0x2309f5,_0xb52690(0x2a7),_0x37f459);},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x322)]=function(){return BattleManager['canEscape']();},Window_PartyCommand[_0x47679c(0x63e)]['itemTextAlign']=function(){const _0x4ec097=_0x47679c;return VisuMZ[_0x4ec097(0x2b8)][_0x4ec097(0x1ea)][_0x4ec097(0x3c8)][_0x4ec097(0x77c)];},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x73a)]=function(_0x3b9e7d){const _0x28aa51=_0x47679c,_0x8e7ecd=this[_0x28aa51(0x3e9)](_0x3b9e7d);if(_0x8e7ecd==='iconText')this[_0x28aa51(0x90c)](_0x3b9e7d);else _0x8e7ecd===_0x28aa51(0x7e3)?this[_0x28aa51(0x88c)](_0x3b9e7d):Window_Command['prototype'][_0x28aa51(0x73a)][_0x28aa51(0x22f)](this,_0x3b9e7d);},Window_PartyCommand['prototype'][_0x47679c(0x48a)]=function(){const _0x3f21d4=_0x47679c;return VisuMZ['BattleCore'][_0x3f21d4(0x1ea)][_0x3f21d4(0x3c8)][_0x3f21d4(0x17b)];},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x3e9)]=function(_0x264890){const _0x44dfcb=_0x47679c;if(_0x264890<0x0)return _0x44dfcb(0x93e);const _0x14b6b0=this[_0x44dfcb(0x48a)]();if(_0x14b6b0!=='auto')return _0x14b6b0;else{if(this[_0x44dfcb(0x924)]()>0x0){const _0x284bfa=this[_0x44dfcb(0x18f)](_0x264890);if(_0x284bfa['match'](/\\I\[(\d+)\]/i)){const _0x5d9191=this[_0x44dfcb(0x5ba)](_0x264890),_0x1a34b6=this[_0x44dfcb(0x2fd)](_0x284bfa)[_0x44dfcb(0x1ce)];return _0x1a34b6<=_0x5d9191[_0x44dfcb(0x1ce)]?_0x44dfcb(0x460):_0x44dfcb(0x7e3);}}}return'text';},Window_PartyCommand['prototype']['drawItemStyleIconText']=function(_0x4b4bcd){const _0x397732=_0x47679c,_0x561151=this[_0x397732(0x5ba)](_0x4b4bcd),_0x28bab0=this[_0x397732(0x18f)](_0x4b4bcd),_0x5352d1=this[_0x397732(0x2fd)](_0x28bab0)[_0x397732(0x1ce)];this[_0x397732(0x277)](this[_0x397732(0x233)](_0x4b4bcd));const _0x29680f=this[_0x397732(0x897)]();if(_0x29680f===_0x397732(0x742))this[_0x397732(0x79f)](_0x28bab0,_0x561151['x']+_0x561151[_0x397732(0x1ce)]-_0x5352d1,_0x561151['y'],_0x5352d1);else{if(_0x29680f===_0x397732(0x54e)){const _0x1905ac=_0x561151['x']+Math[_0x397732(0x8c0)]((_0x561151[_0x397732(0x1ce)]-_0x5352d1)/0x2);this[_0x397732(0x79f)](_0x28bab0,_0x1905ac,_0x561151['y'],_0x5352d1);}else this[_0x397732(0x79f)](_0x28bab0,_0x561151['x'],_0x561151['y'],_0x5352d1);}},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x88c)]=function(_0x195c5f){const _0x4b044b=_0x47679c;this['commandName'](_0x195c5f)[_0x4b044b(0x503)](/\\I\[(\d+)\]/i);const _0x4c63a8=Number(RegExp['$1'])||0x0,_0x2ce476=this[_0x4b044b(0x5ba)](_0x195c5f),_0x422665=_0x2ce476['x']+Math[_0x4b044b(0x8c0)]((_0x2ce476['width']-ImageManager['iconWidth'])/0x2),_0xfc6235=_0x2ce476['y']+(_0x2ce476['height']-ImageManager['iconHeight'])/0x2;this[_0x4b044b(0x31f)](_0x4c63a8,_0x422665,_0xfc6235);},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x50d)]=function(){},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x22b)]=function(){const _0x7339b3=_0x47679c;Window_Command['prototype']['activate'][_0x7339b3(0x22f)](this);const _0x5baff2=this[_0x7339b3(0x527)]();_0x5baff2===_0x7339b3(0x26c)&&this[_0x7339b3(0x907)]();},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x527)]=function(){const _0x345f82=_0x47679c;if(this[_0x345f82(0x5d8)])return this[_0x345f82(0x5d8)];return this['_battleLayoutStyle']=SceneManager[_0x345f82(0x56c)][_0x345f82(0x527)](),this[_0x345f82(0x5d8)];},Window_PartyCommand[_0x47679c(0x63e)][_0x47679c(0x8e5)]=function(){const _0xb96e12=_0x47679c,_0x1002f5=VisuMZ['BattleCore'][_0xb96e12(0x1ea)][_0xb96e12(0x3c8)],_0x276702=this[_0xb96e12(0x86e)]();switch(_0x276702){case _0xb96e12(0x430):this[_0xb96e12(0x53a)]['setText'](_0x1002f5['HelpFight']);break;case _0xb96e12(0x626):this[_0xb96e12(0x53a)]['setText'](_0x1002f5[_0xb96e12(0x505)]);break;case'options':this[_0xb96e12(0x53a)][_0xb96e12(0x935)](_0x1002f5[_0xb96e12(0x4b5)]);break;case'escape':this[_0xb96e12(0x53a)][_0xb96e12(0x935)](_0x1002f5[_0xb96e12(0x74c)]);break;default:this[_0xb96e12(0x53a)][_0xb96e12(0x935)]('');break;}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x551)]=Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x736)],Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x736)]=function(_0x48dbc8){const _0x293809=_0x47679c;VisuMZ[_0x293809(0x2b8)][_0x293809(0x551)][_0x293809(0x22f)](this,_0x48dbc8),this['createCommandNameWindow'](_0x48dbc8);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x476)]=function(_0x3d9dc5){const _0x531bbf=_0x47679c,_0x40bac1=new Rectangle(0x0,0x0,_0x3d9dc5['width'],_0x3d9dc5[_0x531bbf(0x170)]);this['_commandNameWindow']=new Window_Base(_0x40bac1),this[_0x531bbf(0x677)][_0x531bbf(0x38c)]=0x0,this[_0x531bbf(0x1d2)](this[_0x531bbf(0x677)]),this[_0x531bbf(0x8bc)]();},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x827)]=function(){const _0xd77331=_0x47679c;Window_Command[_0xd77331(0x63e)][_0xd77331(0x827)]['call'](this);if(this[_0xd77331(0x677)])this[_0xd77331(0x8bc)]();},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x8bc)]=function(){const _0x1669db=_0x47679c,_0x341516=this['_commandNameWindow'];_0x341516[_0x1669db(0x632)][_0x1669db(0x78c)]();const _0x55627f=this['commandStyleCheck'](this[_0x1669db(0x588)]());if(_0x55627f===_0x1669db(0x7e3)&&this['maxItems']()>0x0){const _0xaf2a31=this[_0x1669db(0x5ba)](this[_0x1669db(0x588)]());let _0x5e4e22=this[_0x1669db(0x18f)](this['index']());_0x5e4e22=_0x5e4e22['replace'](/\\I\[(\d+)\]/gi,''),_0x341516[_0x1669db(0x5dd)](),this[_0x1669db(0x432)](_0x5e4e22,_0xaf2a31),this[_0x1669db(0x14b)](_0x5e4e22,_0xaf2a31),this[_0x1669db(0x83b)](_0x5e4e22,_0xaf2a31);}},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x432)]=function(_0x590b3c,_0x290a69){},Window_ActorCommand[_0x47679c(0x63e)]['commandNameWindowDrawText']=function(_0x1c683d,_0x2aef27){const _0x5dfcc4=_0x47679c,_0x5837d7=this[_0x5dfcc4(0x677)];_0x5837d7[_0x5dfcc4(0x83c)](_0x1c683d,0x0,_0x2aef27['y'],_0x5837d7['innerWidth'],_0x5dfcc4(0x54e));},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x83b)]=function(_0x2f9667,_0x2b084c){const _0x27df92=_0x47679c,_0x5ba13f=this['_commandNameWindow'],_0x36cf1d=$gameSystem[_0x27df92(0x2f1)](),_0x38644d=_0x2b084c['x']+Math['floor'](_0x2b084c['width']/0x2)+_0x36cf1d;_0x5ba13f['x']=_0x5ba13f[_0x27df92(0x1ce)]/-0x2+_0x38644d,_0x5ba13f['y']=Math[_0x27df92(0x8c0)](_0x2b084c[_0x27df92(0x170)]/0x2);},Window_ActorCommand[_0x47679c(0x63e)]['makeCommandList']=function(){const _0x25c1ee=_0x47679c;if(!this[_0x25c1ee(0x5ac)])return;const _0xde5d02=this['_actor'][_0x25c1ee(0x87e)]();for(const _0x297fe4 of _0xde5d02){this['makeBattleCommand'](_0x297fe4[_0x25c1ee(0x1d3)]()[_0x25c1ee(0x616)]());}},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x903)]=function(_0x151d1b){const _0x35b0a1=_0x47679c;_0x151d1b===_0x35b0a1(0x87f)&&this[_0x35b0a1(0x1c6)]();[_0x35b0a1(0x188),_0x35b0a1(0x3fa)][_0x35b0a1(0x3f6)](_0x151d1b)&&this[_0x35b0a1(0xe3)]();_0x151d1b===_0x35b0a1(0x4da)&&this['addGuardCommand']();_0x151d1b===_0x35b0a1(0x7b1)&&this['addItemCommand']();_0x151d1b==='ESCAPE'&&this['addEscapeCommand']();_0x151d1b==='AUTO\x20BATTLE'&&this[_0x35b0a1(0x265)]();if(_0x151d1b[_0x35b0a1(0x503)](/STYPE: (\d+)/i)){const _0x169058=Number(RegExp['$1']);this[_0x35b0a1(0x722)](_0x169058);}else{if(_0x151d1b[_0x35b0a1(0x503)](/STYPE: (.*)/i)){const _0x5d1fa8=DataManager[_0x35b0a1(0x183)](RegExp['$1']);this['addSkillTypeCommand'](_0x5d1fa8);}}_0x151d1b===_0x35b0a1(0x547)&&this[_0x35b0a1(0x715)]();if(_0x151d1b['match'](/SKILL: (\d+)/i)){const _0x3cf7b4=Number(RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x3cf7b4]);}else{if(_0x151d1b[_0x35b0a1(0x503)](/SKILL: (.*)/i)){const _0x30e1d4=DataManager[_0x35b0a1(0x7a9)](RegExp['$1']);this[_0x35b0a1(0x4af)]($dataSkills[_0x30e1d4]);}}_0x151d1b===_0x35b0a1(0x125)&&Imported[_0x35b0a1(0x158)]&&this['addPartyCommand'](),[_0x35b0a1(0x8f3),_0x35b0a1(0x29c)][_0x35b0a1(0x3f6)](_0x151d1b)&&Imported[_0x35b0a1(0x538)]&&this['addCombatLogCommand'](),_0x151d1b==='WEAPON\x20SWAP'&&Imported['VisuMZ_2_WeaponSwapSystem']&&this[_0x35b0a1(0x8c8)](!![]);},Window_ActorCommand[_0x47679c(0x63e)]['addAttackCommand']=function(){const _0xf28041=_0x47679c,_0x502e0a=$dataSkills[this['_actor'][_0xf28041(0x8c9)]()];if(!_0x502e0a)return;if(!this[_0xf28041(0x92b)](_0x502e0a))return;const _0x257c22=this[_0xf28041(0x48a)](),_0x13955e=DataManager[_0xf28041(0x47e)](_0x502e0a),_0x1092c1=DataManager[_0xf28041(0x615)](_0x502e0a),_0x2739f6=_0x257c22==='text'?_0x13955e:_0xf28041(0x507)[_0xf28041(0x151)](_0x1092c1,_0x13955e);this[_0xf28041(0x1cf)](_0x2739f6,_0xf28041(0x684),this[_0xf28041(0x5ac)][_0xf28041(0x5e2)]());},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x337)]=function(){const _0x13e0f4=_0x47679c,_0x25ae14=$dataSkills[this[_0x13e0f4(0x5ac)][_0x13e0f4(0x387)]()];if(!_0x25ae14)return;if(!this[_0x13e0f4(0x92b)](_0x25ae14))return;const _0x530509=this[_0x13e0f4(0x48a)](),_0x156906=DataManager['battleCommandName'](_0x25ae14),_0x1475b6=DataManager[_0x13e0f4(0x615)](_0x25ae14),_0x5ce5f0=_0x530509==='text'?_0x156906:_0x13e0f4(0x507)[_0x13e0f4(0x151)](_0x1475b6,_0x156906);this[_0x13e0f4(0x1cf)](_0x5ce5f0,_0x13e0f4(0x878),this[_0x13e0f4(0x5ac)][_0x13e0f4(0x6b2)]());},Window_ActorCommand['prototype'][_0x47679c(0x354)]=function(){const _0x5d5eb2=_0x47679c,_0x19dbbd=this['commandStyle'](),_0x1ac3c4=VisuMZ['BattleCore'][_0x5d5eb2(0x1ea)][_0x5d5eb2(0x25b)][_0x5d5eb2(0x398)],_0x52ba96=_0x19dbbd==='text'?TextManager['item']:_0x5d5eb2(0x507)[_0x5d5eb2(0x151)](_0x1ac3c4,TextManager[_0x5d5eb2(0x88b)]),_0xc233df=this[_0x5d5eb2(0x6fa)]();this[_0x5d5eb2(0x1cf)](_0x52ba96,_0x5d5eb2(0x88b),_0xc233df);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x6fa)]=function(){const _0x6bbcd4=_0x47679c;return this[_0x6bbcd4(0x5ac)]&&this[_0x6bbcd4(0x5ac)][_0x6bbcd4(0x4f8)]();},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0xe3)]=function(){const _0x3ffc5a=_0x47679c,_0x1e7445=this[_0x3ffc5a(0x5ac)][_0x3ffc5a(0x7ce)]();for(const _0x36296d of _0x1e7445){this[_0x3ffc5a(0x722)](_0x36296d);}},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x722)]=function(_0x510a8a){const _0x4d7d9a=_0x47679c;let _0x579eca=$dataSystem[_0x4d7d9a(0x7ce)][_0x510a8a];if(!_0x579eca)return;let _0x1f0922=_0x579eca;const _0x4414ea=this[_0x4d7d9a(0x48a)]();if(_0x4414ea===_0x4d7d9a(0x93e))_0x1f0922=_0x1f0922[_0x4d7d9a(0x6c5)](/\x1I\[(\d+)\]/gi,''),_0x1f0922=_0x1f0922[_0x4d7d9a(0x6c5)](/\\I\[(\d+)\]/gi,'');else{if(!_0x579eca['match'](/\\I\[(\d+)\]/i)){const _0x219c87=Imported[_0x4d7d9a(0x2b6)]?VisuMZ[_0x4d7d9a(0x8c7)][_0x4d7d9a(0x1ea)]['Skills']:VisuMZ[_0x4d7d9a(0x2b8)][_0x4d7d9a(0x1ea)][_0x4d7d9a(0x25b)],_0x4c8635=$dataSystem[_0x4d7d9a(0xf9)][_0x4d7d9a(0x3f6)](_0x510a8a),_0x1dce35=_0x4c8635?_0x219c87[_0x4d7d9a(0x2b4)]:_0x219c87[_0x4d7d9a(0x825)];_0x1f0922=_0x4d7d9a(0x507)['format'](_0x1dce35,_0x579eca);}}this[_0x4d7d9a(0x1cf)](_0x1f0922,_0x4d7d9a(0x660),!![],_0x510a8a);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x715)]=function(){const _0x206ce4=_0x47679c,_0x3450e1=this['_actor'][_0x206ce4(0x7ce)](),_0x345159=this[_0x206ce4(0x5ac)]['skills']();for(const _0x149946 of _0x345159){if(!_0x149946)continue;if(Imported[_0x206ce4(0x2b6)]){if(this[_0x206ce4(0x80b)](_0x149946))continue;if(this[_0x206ce4(0x2d7)](_0x149946))continue;}else{if(!_0x3450e1[_0x206ce4(0x3f6)](_0x149946[_0x206ce4(0x301)]))continue;}this[_0x206ce4(0x4af)](_0x149946);}},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x80b)]=function(_0x3451a2){const _0x5a13f7=_0x47679c,_0x4d12e2=this[_0x5a13f7(0x5ac)][_0x5a13f7(0x7ce)](),_0x5387f6=_0x4d12e2['filter'](_0x1d8ed5=>DataManager['getSkillTypes'](_0x3451a2)[_0x5a13f7(0x3f6)](_0x1d8ed5));return _0x5387f6[_0x5a13f7(0x42d)]<=0x0;},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x2d7)]=function(_0x19027c){const _0xb6760c=_0x47679c;if(!Window_SkillList['prototype'][_0xb6760c(0x2c2)][_0xb6760c(0x22f)](this,_0x19027c))return!![];if(!Window_SkillList[_0xb6760c(0x63e)][_0xb6760c(0x13b)][_0xb6760c(0x22f)](this,_0x19027c))return!![];if(!Window_SkillList[_0xb6760c(0x63e)][_0xb6760c(0x6ba)][_0xb6760c(0x22f)](this,_0x19027c))return!![];return![];},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x4af)]=function(_0x3fb4ea){const _0x54761f=_0x47679c;if(!_0x3fb4ea)return;if(!this['canAddSkillCommand'](_0x3fb4ea))return;const _0x6d5738=this['commandStyle'](),_0x59242c=DataManager[_0x54761f(0x47e)](_0x3fb4ea),_0x486be6=DataManager[_0x54761f(0x615)](_0x3fb4ea),_0x3a8079=_0x6d5738===_0x54761f(0x93e)?_0x59242c:_0x54761f(0x507)[_0x54761f(0x151)](_0x486be6,_0x59242c),_0x430eb7=this[_0x54761f(0x5ac)][_0x54761f(0x6f2)](_0x3fb4ea);this['addCommand'](_0x3a8079,_0x54761f(0x316),_0x430eb7,_0x3fb4ea['id']);},Window_ActorCommand['prototype'][_0x47679c(0x92b)]=function(_0x43c2a1){const _0x1c856a=_0x47679c,_0x30e831=_0x43c2a1[_0x1c856a(0x4d1)];if(_0x30e831[_0x1c856a(0x503)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x1c856a(0x5ac)]['isLearnedSkill'](_0x43c2a1['id']))return![];}if(_0x30e831[_0x1c856a(0x503)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x1c856a(0x5ac)][_0x1c856a(0x2ee)](_0x43c2a1['id']))return![];}const _0x423113=VisuMZ[_0x1c856a(0x2b8)]['createKeyJS'](_0x43c2a1,_0x1c856a(0x7bf));if(VisuMZ[_0x1c856a(0x2b8)]['JS'][_0x423113]){if(!VisuMZ[_0x1c856a(0x2b8)]['JS'][_0x423113][_0x1c856a(0x22f)](this,this[_0x1c856a(0x5ac)],_0x43c2a1))return![];}return VisuMZ[_0x1c856a(0x2b8)]['CheckSkillCommandShowSwitches'](_0x43c2a1);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x7c4)]=function(_0x455f46){const _0x288926=_0x47679c,_0x5b16b7=_0x455f46[_0x288926(0x4d1)];if(_0x5b16b7['match'](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4389c6=JSON[_0x288926(0x37a)]('['+RegExp['$1'][_0x288926(0x503)](/\d+/g)+']');for(const _0x264999 of _0x4389c6){if(!$gameSwitches[_0x288926(0x48e)](_0x264999))return![];}return!![];}if(_0x5b16b7[_0x288926(0x503)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x404d69=JSON[_0x288926(0x37a)]('['+RegExp['$1'][_0x288926(0x503)](/\d+/g)+']');for(const _0x27b79b of _0x404d69){if(!$gameSwitches[_0x288926(0x48e)](_0x27b79b))return![];}return!![];}if(_0x5b16b7[_0x288926(0x503)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x26a0da=JSON['parse']('['+RegExp['$1'][_0x288926(0x503)](/\d+/g)+']');for(const _0xcc88c4 of _0x26a0da){if($gameSwitches['value'](_0xcc88c4))return!![];}return![];}if(_0x5b16b7[_0x288926(0x503)](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x345253=JSON[_0x288926(0x37a)]('['+RegExp['$1'][_0x288926(0x503)](/\d+/g)+']');for(const _0x5987d7 of _0x345253){if(!$gameSwitches[_0x288926(0x48e)](_0x5987d7))return!![];}return![];}if(_0x5b16b7[_0x288926(0x503)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1ac124=JSON[_0x288926(0x37a)]('['+RegExp['$1'][_0x288926(0x503)](/\d+/g)+']');for(const _0x3f45de of _0x1ac124){if(!$gameSwitches['value'](_0x3f45de))return!![];}return![];}if(_0x5b16b7['match'](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4df67d=JSON[_0x288926(0x37a)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x1f1ab5 of _0x4df67d){if($gameSwitches[_0x288926(0x48e)](_0x1f1ab5))return![];}return!![];}return!![];},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x169)]=function(){const _0x488439=_0x47679c,_0x24206e=this[_0x488439(0x48a)](),_0x198b78=VisuMZ[_0x488439(0x2b8)][_0x488439(0x1ea)]['PartyCmd']['CmdIconEscape'],_0x456bcd=_0x24206e===_0x488439(0x93e)?TextManager['escape']:_0x488439(0x507)[_0x488439(0x151)](_0x198b78,TextManager[_0x488439(0x2a7)]),_0x5735ff=this['isEscapeCommandEnabled']();this[_0x488439(0x1cf)](_0x456bcd,_0x488439(0x2a7),_0x5735ff);},Window_ActorCommand[_0x47679c(0x63e)]['isEscapeCommandEnabled']=function(){const _0x60ed31=_0x47679c;return BattleManager[_0x60ed31(0x884)]();},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x265)]=function(){const _0x3ef5ef=_0x47679c,_0x31a4eb=this[_0x3ef5ef(0x48a)](),_0x22d50b=VisuMZ[_0x3ef5ef(0x2b8)][_0x3ef5ef(0x1ea)][_0x3ef5ef(0x3c8)][_0x3ef5ef(0x61f)],_0x1a3b23=_0x31a4eb===_0x3ef5ef(0x93e)?TextManager[_0x3ef5ef(0x626)]:_0x3ef5ef(0x507)[_0x3ef5ef(0x151)](_0x22d50b,TextManager[_0x3ef5ef(0x626)]),_0x517970=this[_0x3ef5ef(0x59c)]();this['addCommand'](_0x1a3b23,_0x3ef5ef(0x626),_0x517970);},Window_ActorCommand['prototype'][_0x47679c(0x59c)]=function(){return!![];},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x897)]=function(){const _0x364fb0=_0x47679c;return VisuMZ[_0x364fb0(0x2b8)][_0x364fb0(0x1ea)][_0x364fb0(0x25b)][_0x364fb0(0x77c)];},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x73a)]=function(_0x4e50dd){const _0x1e78b7=_0x47679c,_0x479742=this[_0x1e78b7(0x3e9)](_0x4e50dd);if(_0x479742==='iconText')this['drawItemStyleIconText'](_0x4e50dd);else _0x479742===_0x1e78b7(0x7e3)?this[_0x1e78b7(0x88c)](_0x4e50dd):Window_Command[_0x1e78b7(0x63e)][_0x1e78b7(0x73a)][_0x1e78b7(0x22f)](this,_0x4e50dd);this[_0x1e78b7(0x3e2)](_0x4e50dd);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x48a)]=function(){const _0xb2f8c0=_0x47679c;return VisuMZ[_0xb2f8c0(0x2b8)]['Settings'][_0xb2f8c0(0x25b)][_0xb2f8c0(0x17b)];},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x3e9)]=function(_0x3f291d){const _0x124e15=_0x47679c;if(_0x3f291d<0x0)return _0x124e15(0x93e);const _0x737eb3=this['commandStyle']();if(_0x737eb3!==_0x124e15(0x43f))return _0x737eb3;else{if(this['maxItems']()>0x0){const _0x13cfd3=this[_0x124e15(0x18f)](_0x3f291d);if(_0x13cfd3[_0x124e15(0x503)](/\\I\[(\d+)\]/i)){const _0x461f7c=this[_0x124e15(0x5ba)](_0x3f291d),_0x23c83f=this[_0x124e15(0x2fd)](_0x13cfd3)[_0x124e15(0x1ce)];return _0x23c83f<=_0x461f7c[_0x124e15(0x1ce)]?_0x124e15(0x460):'icon';}}}return'text';},Window_ActorCommand[_0x47679c(0x63e)]['drawItemStyleIconText']=function(_0x25ed26){const _0x408214=_0x47679c,_0x456eec=this[_0x408214(0x5ba)](_0x25ed26),_0x549311=this[_0x408214(0x18f)](_0x25ed26),_0x4d70c8=this[_0x408214(0x2fd)](_0x549311)[_0x408214(0x1ce)];this['changePaintOpacity'](this[_0x408214(0x233)](_0x25ed26));const _0x43d276=this['itemTextAlign']();if(_0x43d276==='right')this[_0x408214(0x79f)](_0x549311,_0x456eec['x']+_0x456eec['width']-_0x4d70c8,_0x456eec['y'],_0x4d70c8);else{if(_0x43d276===_0x408214(0x54e)){const _0x4b29cd=_0x456eec['x']+Math['floor']((_0x456eec['width']-_0x4d70c8)/0x2);this[_0x408214(0x79f)](_0x549311,_0x4b29cd,_0x456eec['y'],_0x4d70c8);}else this[_0x408214(0x79f)](_0x549311,_0x456eec['x'],_0x456eec['y'],_0x4d70c8);}},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x88c)]=function(_0x19c410){const _0xa14f5a=_0x47679c;this['commandName'](_0x19c410)[_0xa14f5a(0x503)](/\\I\[(\d+)\]/i);const _0x1240e0=Number(RegExp['$1'])||0x0,_0xe15595=this[_0xa14f5a(0x5ba)](_0x19c410),_0xbedca3=_0xe15595['x']+Math[_0xa14f5a(0x8c0)]((_0xe15595[_0xa14f5a(0x1ce)]-ImageManager[_0xa14f5a(0x3b0)])/0x2),_0x28eb28=_0xe15595['y']+(_0xe15595['height']-ImageManager[_0xa14f5a(0x7e7)])/0x2;this[_0xa14f5a(0x31f)](_0x1240e0,_0xbedca3,_0x28eb28);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x3e2)]=function(_0x303ea2){const _0x37e1ba=_0x47679c;if(!(VisuMZ['BattleCore'][_0x37e1ba(0x1ea)]['ActorCmd'][_0x37e1ba(0x76e)]??!![]))return;const _0x50b97a=this[_0x37e1ba(0x4dc)](_0x303ea2);if(![_0x37e1ba(0x684),_0x37e1ba(0x878),_0x37e1ba(0x316)][_0x37e1ba(0x3f6)](_0x50b97a))return;const _0x142b81=this[_0x37e1ba(0x5ba)](_0x303ea2);let _0x49fc97=null;if(_0x50b97a===_0x37e1ba(0x684))_0x49fc97=$dataSkills[this[_0x37e1ba(0x5ac)][_0x37e1ba(0x8c9)]()];else _0x50b97a===_0x37e1ba(0x878)?_0x49fc97=$dataSkills[this[_0x37e1ba(0x5ac)][_0x37e1ba(0x387)]()]:_0x49fc97=$dataSkills[this[_0x37e1ba(0x628)][_0x303ea2]['ext']];this[_0x37e1ba(0x48b)](this[_0x37e1ba(0x5ac)],_0x49fc97,_0x142b81['x'],_0x142b81['y'],_0x142b81[_0x37e1ba(0x1ce)]);},Window_ActorCommand['prototype'][_0x47679c(0x48b)]=function(_0xbda364,_0x17ad79,_0x538e88,_0x273b60,_0x1b150c){const _0x4749c6=_0x47679c;if(!_0x17ad79)return;Imported['VisuMZ_1_SkillsStatesCore']?Window_Command[_0x4749c6(0x63e)][_0x4749c6(0x48b)][_0x4749c6(0x22f)](this,_0xbda364,_0x17ad79,_0x538e88,_0x273b60,_0x1b150c):Window_SkillList[_0x4749c6(0x63e)][_0x4749c6(0x48b)][_0x4749c6(0x22f)](this,_0x17ad79,_0x538e88,_0x273b60,_0x1b150c);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x50d)]=function(){},Window_ActorCommand['prototype'][_0x47679c(0x22b)]=function(){const _0x356c3e=_0x47679c;Window_Command['prototype'][_0x356c3e(0x22b)][_0x356c3e(0x22f)](this);const _0x574e0b=this['battleLayoutStyle']();_0x574e0b==='border'&&this['showHelpWindow']();},Window_ActorCommand['prototype'][_0x47679c(0x527)]=function(){const _0x4f2991=_0x47679c;if(this[_0x4f2991(0x5d8)])return this[_0x4f2991(0x5d8)];return this['_battleLayoutStyle']=SceneManager[_0x4f2991(0x56c)]['battleLayoutStyle'](),this['_battleLayoutStyle'];},VisuMZ[_0x47679c(0x2b8)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x47679c(0x63e)]['setup'],Window_ActorCommand['prototype'][_0x47679c(0x629)]=function(_0x25771d){const _0x330dd5=_0x47679c,_0xd38c96=this[_0x330dd5(0x527)]();if(_0x25771d&&['xp',_0x330dd5(0x5d2)][_0x330dd5(0x3f6)](_0xd38c96))this[_0x330dd5(0x523)](_0x25771d);else _0x25771d&&[_0x330dd5(0x26c)][_0x330dd5(0x3f6)](_0xd38c96)&&(this[_0x330dd5(0x8a1)](_0x25771d),this['showHelpWindow']());VisuMZ[_0x330dd5(0x2b8)][_0x330dd5(0x6a6)][_0x330dd5(0x22f)](this,_0x25771d),_0x25771d&&$gameTroop[_0x330dd5(0x8ef)]()[_0x330dd5(0x42d)]>0x0&&_0x25771d[_0x330dd5(0x828)]()&&_0x25771d[_0x330dd5(0x828)]()[_0x330dd5(0x83e)]();},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x523)]=function(_0x56ddfc){const _0x25d5ea=_0x47679c,_0x545bb1=Math[_0x25d5ea(0x23b)](Graphics[_0x25d5ea(0x75b)]/0x3),_0x154451=Math[_0x25d5ea(0x23b)](Graphics['boxWidth']/$gameParty['battleMembers']()[_0x25d5ea(0x42d)]),_0x38b46f=Math[_0x25d5ea(0x905)](_0x545bb1,_0x154451),_0x193c4f=this['fittingHeight'](VisuMZ[_0x25d5ea(0x2b8)][_0x25d5ea(0x1ea)]['BattleLayout'][_0x25d5ea(0x66f)]),_0x40250c=_0x154451*_0x56ddfc[_0x25d5ea(0x588)]()+(_0x154451-_0x38b46f)/0x2,_0x4ff62f=SceneManager[_0x25d5ea(0x56c)][_0x25d5ea(0x5cc)]['y']-_0x193c4f;this[_0x25d5ea(0x462)](_0x40250c,_0x4ff62f,_0x38b46f,_0x193c4f),this[_0x25d5ea(0x7a4)](),this[_0x25d5ea(0x552)](0x1);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x8a1)]=function(_0x539091){const _0x15b54c=_0x47679c,_0x322b72=SceneManager[_0x15b54c(0x56c)][_0x15b54c(0x42e)]();this[_0x15b54c(0x462)](_0x322b72['x'],_0x322b72['y'],_0x322b72['width'],_0x322b72[_0x15b54c(0x170)]),this[_0x15b54c(0x7a4)](),this[_0x15b54c(0x552)](0x0);},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x88f)]=function(){const _0x5e86b3=_0x47679c;if(this[_0x5e86b3(0x89c)]){const _0x3afcd6=this[_0x5e86b3(0x89c)][_0x5e86b3(0x93f)],_0x10da66=this[_0x5e86b3(0x1ce)]-0x8,_0x51604b=this[_0x5e86b3(0x170)],_0x435718=this[_0x5e86b3(0x667)],_0x2bfb69=ColorManager[_0x5e86b3(0x932)](),_0xb187f8=ColorManager[_0x5e86b3(0x748)]();this['_dimmerSprite']['x']=0x4,_0x3afcd6[_0x5e86b3(0x10b)](_0x10da66,_0x51604b),_0x3afcd6[_0x5e86b3(0x670)](0x0,0x0,_0x10da66,_0x435718,_0xb187f8,_0x2bfb69,!![]),_0x3afcd6['fillRect'](0x0,_0x435718,_0x10da66,_0x51604b-_0x435718*0x2,_0x2bfb69),_0x3afcd6[_0x5e86b3(0x670)](0x0,_0x51604b-_0x435718,_0x10da66,_0x435718,_0x2bfb69,_0xb187f8,!![]),this['_dimmerSprite']['setFrame'](0x0,0x0,_0x10da66,_0x51604b);}},Window_ActorCommand[_0x47679c(0x63e)][_0x47679c(0x8e5)]=function(){const _0x50a81a=_0x47679c;if(!this[_0x50a81a(0x5ac)])return;const _0x54edcb=VisuMZ['BattleCore'][_0x50a81a(0x1ea)][_0x50a81a(0x25b)],_0x158f01=this['currentSymbol']();switch(_0x158f01){case _0x50a81a(0x684):this['setHelpWindowItem']($dataSkills[this[_0x50a81a(0x5ac)][_0x50a81a(0x8c9)]()]);break;case _0x50a81a(0x878):this[_0x50a81a(0x2f2)]($dataSkills[this[_0x50a81a(0x5ac)][_0x50a81a(0x387)]()]);break;case _0x50a81a(0x660):const _0x1e3af4=_0x54edcb[_0x50a81a(0x681)],_0x5502ec=_0x1e3af4[_0x50a81a(0x151)]($dataSystem[_0x50a81a(0x7ce)][this[_0x50a81a(0x7ac)]()]);this['_helpWindow'][_0x50a81a(0x935)](_0x5502ec);break;case _0x50a81a(0x316):this[_0x50a81a(0x2f2)]($dataSkills[this['currentExt']()]);break;case _0x50a81a(0x88b):this[_0x50a81a(0x53a)]['setText'](_0x54edcb[_0x50a81a(0x1a1)]);break;case _0x50a81a(0x2a7):this[_0x50a81a(0x53a)][_0x50a81a(0x935)](_0x54edcb[_0x50a81a(0x74c)]);break;case _0x50a81a(0x626):this['_helpWindow'][_0x50a81a(0x935)](_0x54edcb['HelpAutoBattle']);break;default:this[_0x50a81a(0x53a)][_0x50a81a(0x935)]('');break;}},VisuMZ['BattleCore']['Window_BattleStatus_initialize']=Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x736)],Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x736)]=function(_0x1f2c57){const _0x4570a1=_0x47679c;VisuMZ[_0x4570a1(0x2b8)][_0x4570a1(0x217)][_0x4570a1(0x22f)](this,_0x1f2c57),this[_0x4570a1(0x839)](),this[_0x4570a1(0x656)]();},Window_BattleStatus[_0x47679c(0x63e)]['battleLayoutStyle']=function(){const _0x29b746=_0x47679c;if(this[_0x29b746(0x5d8)])return this[_0x29b746(0x5d8)];return this[_0x29b746(0x5d8)]=SceneManager[_0x29b746(0x56c)][_0x29b746(0x527)](),this['_battleLayoutStyle'];},Window_BattleStatus[_0x47679c(0x63e)]['initBattleCore']=function(){const _0x4ec4ed=_0x47679c;this['frameVisible']=this[_0x4ec4ed(0xe5)]();const _0x592ce2=VisuMZ['BattleCore'][_0x4ec4ed(0x1ea)][_0x4ec4ed(0x7e2)];_0x592ce2[_0x4ec4ed(0x5d6)]&&(this[_0x4ec4ed(0x38c)]=0x0);},Window_BattleStatus[_0x47679c(0x63e)]['isFrameVisible']=function(){const _0x1852dd=_0x47679c,_0x22450c=VisuMZ[_0x1852dd(0x2b8)][_0x1852dd(0x1ea)]['BattleLayout'];if(_0x22450c[_0x1852dd(0x568)])return!![];const _0x41c6e4=this[_0x1852dd(0x527)]();switch(_0x41c6e4){case _0x1852dd(0x926):case _0x1852dd(0x26c):return!![];break;case _0x1852dd(0x4e0):case'xp':case _0x1852dd(0x5d2):default:return![];break;}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x7b8)]=function(){const _0x4c8f72=_0x47679c;return this[_0x4c8f72(0xe5)]()?0x0:0xa;},Window_BattleStatus['prototype'][_0x47679c(0x2f6)]=function(){const _0x231fe6=_0x47679c,_0x291c3d=this[_0x231fe6(0x527)]();switch(_0x291c3d){case _0x231fe6(0x926):return 0x1;break;case'xp':case _0x231fe6(0x5d2):return $gameParty['battleMembers']()[_0x231fe6(0x42d)];break;case _0x231fe6(0x4e0):default:return $gameParty[_0x231fe6(0x59d)]();break;}},Window_BattleStatus['prototype'][_0x47679c(0x4a4)]=function(){const _0x34b1c9=_0x47679c,_0x394e93=this[_0x34b1c9(0x527)]();switch(_0x394e93){case _0x34b1c9(0x926):return Window_StatusBase[_0x34b1c9(0x63e)][_0x34b1c9(0x4a4)]['call'](this);break;case _0x34b1c9(0x4e0):case'xp':case _0x34b1c9(0x5d2):default:return this[_0x34b1c9(0x38e)];break;}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x906)]=function(){const _0x4e1d22=_0x47679c,_0x50f409=this[_0x4e1d22(0x527)]();switch(_0x50f409){case _0x4e1d22(0x926):return Window_StatusBase['prototype']['rowSpacing']['call'](this);break;case _0x4e1d22(0x4e0):case'xp':case _0x4e1d22(0x5d2):default:return 0x0;break;}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x110)]=function(){const _0x21edcf=_0x47679c;this[_0x21edcf(0xe5)]()?Window_StatusBase[_0x21edcf(0x63e)]['updatePadding'][_0x21edcf(0x22f)](this):this['padding']=0x8;},Window_BattleStatus['prototype'][_0x47679c(0x655)]=function(){const _0x3b8c96=_0x47679c,_0x51a238=VisuMZ['BattleCore'][_0x3b8c96(0x1ea)][_0x3b8c96(0x7e2)];_0x51a238['StatusWindowSkinFilename']?this[_0x3b8c96(0x290)]=ImageManager[_0x3b8c96(0x1cb)](_0x51a238[_0x3b8c96(0x568)]):Window_StatusBase[_0x3b8c96(0x63e)][_0x3b8c96(0x655)][_0x3b8c96(0x22f)](this);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x15d)]=function(_0x3d3c0d){const _0x171a36=_0x47679c,_0xd91fea=VisuMZ['BattleCore'][_0x171a36(0x1ea)][_0x171a36(0x7e2)];if(_0xd91fea[_0x171a36(0x409)])return;Window_StatusBase['prototype'][_0x171a36(0x15d)][_0x171a36(0x22f)](this,_0x3d3c0d);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x88e)]=function(){this['_requestRefresh']=!![];},Window_BattleStatus[_0x47679c(0x63e)]['update']=function(){const _0x150548=_0x47679c;Window_StatusBase[_0x150548(0x63e)][_0x150548(0x874)][_0x150548(0x22f)](this),this[_0x150548(0x739)](),this[_0x150548(0x1ba)]();if(this[_0x150548(0x527)]()==='border')this[_0x150548(0x457)]();},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x739)]=function(){const _0x3851d1=_0x47679c;if($gameTemp[_0x3851d1(0x61b)]())this[_0x3851d1(0x16d)](),this[_0x3851d1(0x580)]=![],$gameTemp[_0x3851d1(0x10d)]();else this['_requestRefresh']&&(this[_0x3851d1(0x580)]=![],this[_0x3851d1(0x29b)](),this[_0x3851d1(0x771)]());},Window_BattleStatus['prototype'][_0x47679c(0x92f)]=function(){const _0x29c54d=_0x47679c;Window_StatusBase[_0x29c54d(0x63e)][_0x29c54d(0x92f)][_0x29c54d(0x22f)](this);if(!$gameSystem[_0x29c54d(0x30b)]())this['refresh']();},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x50d)]=function(){if(this['constructor']===Window_BattleStatus)return;Window_StatusBase['prototype']['hide']['call'](this);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x463)]=function(_0x3f6cc9){const _0x2d1ab7=_0x47679c,_0x8068bc=this[_0x2d1ab7(0x527)]();switch(_0x8068bc){case'xp':case'portrait':break;case _0x2d1ab7(0x4e0):case'list':case _0x2d1ab7(0x26c):default:return Window_StatusBase['prototype']['drawBackgroundRect'][_0x2d1ab7(0x22f)](this,_0x3f6cc9);break;}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x834)]=Window_BattleStatus[_0x47679c(0x63e)]['drawItemImage'],Window_BattleStatus[_0x47679c(0x63e)]['drawItemImage']=function(_0x374e47){const _0x21709d=_0x47679c,_0x12aa6f=this[_0x21709d(0x527)]();switch(_0x12aa6f){case _0x21709d(0x926):this[_0x21709d(0x1c8)](_0x374e47);break;case'xp':this[_0x21709d(0x93a)](_0x374e47);break;case _0x21709d(0x5d2):this[_0x21709d(0x600)](_0x374e47);break;case _0x21709d(0x4e0):case _0x21709d(0x26c):default:VisuMZ[_0x21709d(0x2b8)]['Window_BattleStatus_drawItemImage']['call'](this,_0x374e47);break;}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x2f7)]=function(_0x4a89ad){const _0x4ea012=_0x47679c,_0x2e3565=this[_0x4ea012(0x527)]();if(!$gameSystem['isSideView']())this[_0x4ea012(0x19f)](_0x4a89ad);switch(_0x2e3565){case _0x4ea012(0x926):this['drawItemStatusListStyle'](_0x4a89ad);break;case'xp':case _0x4ea012(0x5d2):case'default':case _0x4ea012(0x26c):default:this['drawItemStatusXPStyle'](_0x4a89ad);break;}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x5ee)]=function(){const _0x2da9fa=_0x47679c,_0x9ed4d5=this[_0x2da9fa(0x527)]();if(['xp'][_0x2da9fa(0x3f6)](_0x9ed4d5)&&!$gameSystem[_0x2da9fa(0x30b)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x2da9fa(0x63e)][_0x2da9fa(0x5ee)][_0x2da9fa(0x22f)](this);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x19f)]=function(_0x1fc3be){const _0x344672=_0x47679c,_0x296d33=this['actor'](_0x1fc3be)[_0x344672(0x828)]();if(!_0x296d33)return;const _0xb90d61=this[_0x344672(0x527)](),_0x120541=this[_0x344672(0x1b8)](_0x1fc3be);let _0x57f530=Math[_0x344672(0x23b)](_0x120541['x']+_0x120541[_0x344672(0x1ce)]/0x2)+this[_0x344672(0x667)];[_0x344672(0x926)][_0x344672(0x3f6)](_0xb90d61)&&(_0x57f530=_0x120541[_0x344672(0x1ce)]/$gameParty[_0x344672(0x8d4)]()[_0x344672(0x42d)],_0x57f530*=_0x1fc3be,_0x57f530+=_0x120541[_0x344672(0x1ce)]/$gameParty[_0x344672(0x8d4)]()['length']/0x2);let _0x29db6c=Math[_0x344672(0x23b)](this[_0x344672(0x4ac)](_0x1fc3be,_0x296d33,_0x120541));_0x296d33[_0x344672(0x252)](_0x57f530,_0x29db6c),this['addChildAt'](_0x296d33,0x1),_0x296d33[_0x344672(0x92f)](),this[_0x344672(0x306)](),this[_0x344672(0x771)]();},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x4ac)]=function(_0x1cc085,_0x4cbd9c,_0x496cea){const _0x3c4c92=_0x47679c,_0x53900d=VisuMZ[_0x3c4c92(0x2b8)][_0x3c4c92(0x1ea)]['BattleLayout'],_0x511ebe=this[_0x3c4c92(0x527)]();if(_0x511ebe==='xp'){const _0x5d5399=_0x53900d['XPSpriteYLocation'];switch(_0x5d5399[_0x3c4c92(0x6d4)]()['trim']()){case _0x3c4c92(0x831):return _0x496cea['height']-_0x4cbd9c[_0x3c4c92(0x29f)][_0x3c4c92(0x170)]/0x4;break;case _0x3c4c92(0x54e):const _0x8dfa33=_0x53900d['XPActorDefaultHeight'];return(_0x496cea[_0x3c4c92(0x170)]+(_0x4cbd9c[_0x3c4c92(0x170)]||_0x8dfa33))/0x2;break;case _0x3c4c92(0x740):return 0x0;case _0x3c4c92(0x620):default:return this[_0x3c4c92(0x7a0)](_0x496cea);break;}}else{if(_0x511ebe==='portrait'){}}return _0x4cbd9c['height'];},Sprite_Name[_0x47679c(0x63e)][_0x47679c(0x1b9)]=function(){return 0x24;},Sprite_Name[_0x47679c(0x63e)][_0x47679c(0x3a2)]=function(){const _0x2ff213=_0x47679c,_0x3f0640=this[_0x2ff213(0x620)](),_0x9791fb=this[_0x2ff213(0x2d5)](),_0x2097ec=this['bitmapHeight']();this[_0x2ff213(0x3f0)](),this['bitmap']['clear'](),this[_0x2ff213(0x93f)]['drawTextTopAligned'](_0x3f0640,0x0,0x0,_0x9791fb,_0x2097ec,_0x2ff213(0x3fe));},Bitmap[_0x47679c(0x63e)][_0x47679c(0x377)]=function(_0x1964e3,_0x5b357d,_0x2aaa59,_0xe8060e,_0x4f02af,_0x21a0a2){const _0x2041e2=_0x47679c,_0x5e4919=this['context'],_0x1c84fd=_0x5e4919[_0x2041e2(0x8dd)];_0xe8060e=_0xe8060e||0xffffffff;let _0x2da918=_0x5b357d,_0x5a4a46=Math[_0x2041e2(0x23b)](_0x2aaa59+0x18/0x2+this[_0x2041e2(0x2a3)]*0.35);_0x21a0a2===_0x2041e2(0x54e)&&(_0x2da918+=_0xe8060e/0x2),_0x21a0a2===_0x2041e2(0x742)&&(_0x2da918+=_0xe8060e),_0x5e4919['save'](),_0x5e4919[_0x2041e2(0x7b6)]=this[_0x2041e2(0x4cd)](),_0x5e4919['textAlign']=_0x21a0a2,_0x5e4919[_0x2041e2(0x36e)]=_0x2041e2(0x58f),_0x5e4919[_0x2041e2(0x8dd)]=0x1,this[_0x2041e2(0x784)](_0x1964e3,_0x2da918,_0x5a4a46,_0xe8060e),_0x5e4919[_0x2041e2(0x8dd)]=_0x1c84fd,this[_0x2041e2(0x4b0)](_0x1964e3,_0x2da918,_0x5a4a46,_0xe8060e),_0x5e4919[_0x2041e2(0x4f3)](),this[_0x2041e2(0x8e2)]['update']();},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x7a0)]=function(_0x53d583){const _0x28cde9=_0x47679c;return this[_0x28cde9(0x5d1)](_0x53d583)-this[_0x28cde9(0x7b9)]();},Window_BattleStatus[_0x47679c(0x63e)]['drawItemImageListStyle']=function(_0x512318){const _0x249e35=_0x47679c;if(!VisuMZ[_0x249e35(0x2b8)]['Settings']['BattleLayout']['ShowFacesListStyle'])return;const _0x205036=this[_0x249e35(0x84d)](_0x512318),_0x1b46a9=this[_0x249e35(0x1b8)](_0x512318);_0x1b46a9[_0x249e35(0x1ce)]=ImageManager[_0x249e35(0x488)],_0x1b46a9[_0x249e35(0x170)]-=0x2,this['drawActorFace'](_0x205036,_0x1b46a9['x']+0x1,_0x1b46a9['y']+0x1,_0x1b46a9['width'],_0x1b46a9[_0x249e35(0x170)]);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x10e)]=function(_0x422660){const _0x381ec9=_0x47679c,_0x213e01=VisuMZ[_0x381ec9(0x2b8)][_0x381ec9(0x1ea)][_0x381ec9(0x7e2)],_0x31c5bb=$dataSystem[_0x381ec9(0xf4)]?0x4:0x3,_0x1c2df2=_0x31c5bb*0x80+(_0x31c5bb-0x1)*0x8+0x4,_0x880014=this[_0x381ec9(0x84d)](_0x422660),_0x21bd8d=this[_0x381ec9(0x1b8)](_0x422660);let _0x386393=_0x21bd8d['x']+this[_0x381ec9(0x667)];_0x213e01[_0x381ec9(0x725)]?_0x386393=_0x21bd8d['x']+ImageManager[_0x381ec9(0x488)]+0x8:_0x386393+=ImageManager['iconWidth'];const _0x17f074=Math[_0x381ec9(0x23b)](Math[_0x381ec9(0x905)](_0x21bd8d['x']+_0x21bd8d['width']-_0x1c2df2,_0x386393)),_0x432c1d=Math[_0x381ec9(0x23b)](_0x21bd8d['y']+(_0x21bd8d[_0x381ec9(0x170)]-Sprite_Name['prototype'][_0x381ec9(0x1b9)]())/0x2),_0x2fbe41=Math[_0x381ec9(0x23b)](_0x17f074-ImageManager['iconWidth']/0x2-0x4),_0x496e12=Math[_0x381ec9(0x23b)](_0x21bd8d['y']+(_0x21bd8d[_0x381ec9(0x170)]-ImageManager['iconHeight'])/0x2+ImageManager[_0x381ec9(0x7e7)]/0x2);let _0x3c0b51=_0x17f074+0x88;const _0x490066=_0x432c1d;this[_0x381ec9(0x8cf)](_0x880014,_0x17f074-0x4+(_0x213e01[_0x381ec9(0x3d4)]||0x0),_0x432c1d+(_0x213e01[_0x381ec9(0x1bb)]||0x0)),this[_0x381ec9(0x77f)](_0x880014,_0x17f074+(_0x213e01[_0x381ec9(0x887)]||0x0),_0x432c1d+(_0x213e01[_0x381ec9(0x5db)]||0x0)),this[_0x381ec9(0x162)](_0x880014,_0x2fbe41+(_0x213e01[_0x381ec9(0x17e)]||0x0),_0x496e12+(_0x213e01[_0x381ec9(0x933)]||0x0)),this['placeGauge'](_0x880014,'hp',_0x3c0b51+0x88*0x0+(_0x213e01[_0x381ec9(0x3a0)]||0x0),_0x490066+(_0x213e01[_0x381ec9(0x3ff)]||0x0)),this[_0x381ec9(0x1b5)](_0x880014,'mp',_0x3c0b51+0x88*0x1+(_0x213e01['MpGaugeOffsetX']||0x0),_0x490066+(_0x213e01['MpGaugeOffsetY']||0x0)),$dataSystem[_0x381ec9(0xf4)]&&this['placeGauge'](_0x880014,'tp',_0x3c0b51+0x88*0x2+(_0x213e01['TpGaugeOffsetX']||0x0),_0x490066+(_0x213e01[_0x381ec9(0x2e3)]||0x0));},Window_BattleStatus[_0x47679c(0x63e)]['drawItemImageXPStyle']=function(_0x2bdb55){const _0x3b18aa=_0x47679c;if(!$gameSystem[_0x3b18aa(0x30b)]())return;VisuMZ[_0x3b18aa(0x2b8)][_0x3b18aa(0x834)][_0x3b18aa(0x22f)](this,_0x2bdb55);},Window_BattleStatus[_0x47679c(0x63e)]['drawItemStatusXPStyle']=function(_0x4fe244){const _0x5c959c=_0x47679c,_0x17bd98=VisuMZ[_0x5c959c(0x2b8)][_0x5c959c(0x1ea)][_0x5c959c(0x7e2)],_0x498893=this[_0x5c959c(0x84d)](_0x4fe244),_0x5d966d=this[_0x5c959c(0x1b8)](_0x4fe244),_0x2d7616=Math[_0x5c959c(0x23b)](_0x5d966d['x']+(_0x5d966d[_0x5c959c(0x1ce)]-0x80)/0x2),_0x3dcc2c=this['nameY'](_0x5d966d);let _0x3b2a28=_0x2d7616-ImageManager[_0x5c959c(0x3b0)]/0x2-0x4,_0x5f0fe0=_0x3dcc2c+ImageManager['iconHeight']/0x2;_0x3b2a28-ImageManager['iconWidth']/0x2<_0x5d966d['x']&&(_0x3b2a28=_0x2d7616+ImageManager[_0x5c959c(0x3b0)]/0x2-0x4,_0x5f0fe0=_0x3dcc2c-ImageManager[_0x5c959c(0x7e7)]/0x2);const _0x169550=_0x2d7616,_0xcf7891=this[_0x5c959c(0x5d1)](_0x5d966d);this[_0x5c959c(0x8cf)](_0x498893,_0x2d7616+(_0x17bd98[_0x5c959c(0x3d4)]||0x0),_0x3dcc2c+(_0x17bd98[_0x5c959c(0x1bb)]||0x0)),this[_0x5c959c(0x77f)](_0x498893,_0x2d7616+(_0x17bd98[_0x5c959c(0x887)]||0x0),_0x3dcc2c+(_0x17bd98[_0x5c959c(0x5db)]||0x0)),this['placeStateIcon'](_0x498893,_0x3b2a28+(_0x17bd98[_0x5c959c(0x17e)]||0x0),_0x5f0fe0+(_0x17bd98['StateIconOffsetY']||0x0)),this[_0x5c959c(0x1b5)](_0x498893,'hp',_0x169550+(_0x17bd98[_0x5c959c(0x3a0)]||0x0),_0xcf7891+(_0x17bd98[_0x5c959c(0x3ff)]||0x0)),this[_0x5c959c(0x1b5)](_0x498893,'mp',_0x169550+(_0x17bd98[_0x5c959c(0x38a)]||0x0),_0xcf7891+this[_0x5c959c(0x7b9)]()+(_0x17bd98['MpGaugeOffsetY']||0x0)),$dataSystem[_0x5c959c(0xf4)]&&this[_0x5c959c(0x1b5)](_0x498893,'tp',_0x169550+(_0x17bd98[_0x5c959c(0x923)]||0x0),_0xcf7891+this['gaugeLineHeight']()*0x2+(_0x17bd98[_0x5c959c(0x2e3)]||0x0));},Window_BattleStatus[_0x47679c(0x63e)]['showPortraits']=function(_0x322b68){const _0x4285ed=_0x47679c;if(!VisuMZ[_0x4285ed(0x2b8)][_0x4285ed(0x1ea)][_0x4285ed(0x7e2)]['ShowPortraits'])return![];if(_0x322b68[_0x4285ed(0x746)]())return!![];return Imported[_0x4285ed(0x870)]&&_0x322b68[_0x4285ed(0x20d)]();},Game_Actor[_0x47679c(0x63e)]['getBattlePortraitOffsetX']=function(){const _0x50eaa7=_0x47679c;if(this[_0x50eaa7(0x84d)]()[_0x50eaa7(0x4d1)][_0x50eaa7(0x503)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x50eaa7(0x84d)]()[_0x50eaa7(0x4d1)][_0x50eaa7(0x503)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor['prototype'][_0x47679c(0x7ab)]=function(){const _0x50dfbe=_0x47679c;if(this['actor']()[_0x50dfbe(0x4d1)][_0x50dfbe(0x503)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x50dfbe(0x84d)]()[_0x50dfbe(0x4d1)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus['prototype'][_0x47679c(0x600)]=function(_0x14d5da){const _0xab1b1f=_0x47679c,_0xfe5e98=this['actor'](_0x14d5da);if(this[_0xab1b1f(0x1a6)](_0xfe5e98)){const _0x202953=_0xab1b1f(0x25c)[_0xab1b1f(0x151)](_0xfe5e98[_0xab1b1f(0x3cd)]()),_0x124cdb=this[_0xab1b1f(0x276)](_0x202953,Sprite),_0x9a6021=_0xfe5e98[_0xab1b1f(0x5a9)]();_0x9a6021!==''?_0x124cdb[_0xab1b1f(0x93f)]=ImageManager[_0xab1b1f(0x7fe)](_0x9a6021):_0x124cdb['bitmap']=ImageManager[_0xab1b1f(0x410)];const _0x5c81af=this[_0xab1b1f(0x1b8)](_0x14d5da);_0x124cdb[_0xab1b1f(0x402)]['x']=0.5,_0x124cdb[_0xab1b1f(0x402)]['y']=0x1;let _0x594a60=Math[_0xab1b1f(0x23b)](_0x5c81af['x']+_0x5c81af[_0xab1b1f(0x1ce)]/0x2)+this[_0xab1b1f(0x667)];_0x594a60+=_0xfe5e98[_0xab1b1f(0x7f3)]();let _0x300a89=Math[_0xab1b1f(0x23b)](this[_0xab1b1f(0x170)]);_0x300a89+=_0xfe5e98[_0xab1b1f(0x7ab)](),_0x124cdb[_0xab1b1f(0x462)](_0x594a60,_0x300a89);const _0x514078=VisuMZ[_0xab1b1f(0x2b8)]['Settings']['BattleLayout'][_0xab1b1f(0x7a5)];_0x124cdb[_0xab1b1f(0x34c)]['x']=_0x514078,_0x124cdb[_0xab1b1f(0x34c)]['y']=_0x514078,_0x124cdb[_0xab1b1f(0x92f)]();}else{const _0x2ac0fc=this[_0xab1b1f(0x690)](_0x14d5da);this[_0xab1b1f(0x561)](_0xfe5e98,_0x2ac0fc['x'],_0x2ac0fc['y'],_0x2ac0fc['width'],_0x2ac0fc[_0xab1b1f(0x170)]);}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x276)]=function(_0xad9b0c,_0x3315e5){const _0x9e778b=_0x47679c,_0x3268bb=this[_0x9e778b(0xf7)];if(_0x3268bb[_0xad9b0c])return _0x3268bb[_0xad9b0c];else{const _0x461d54=new _0x3315e5();return _0x3268bb[_0xad9b0c]=_0x461d54,this[_0x9e778b(0x1e1)](_0x461d54),this[_0x9e778b(0x1e1)](this['_cursorArea']),_0x461d54;}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x78f)]=function(){const _0x1b1bc6=_0x47679c;this[_0x1b1bc6(0x20a)](),this[_0x1b1bc6(0x7ed)](),Window_StatusBase[_0x1b1bc6(0x63e)][_0x1b1bc6(0x78f)][_0x1b1bc6(0x22f)](this),this[_0x1b1bc6(0x809)]();},Window_BattleStatus[_0x47679c(0x63e)]['_createCursorArea']=function(){const _0x17eccc=_0x47679c;this[_0x17eccc(0x71b)]=new Sprite(),this[_0x17eccc(0x71b)][_0x17eccc(0x540)]=[new PIXI[(_0x17eccc(0x540))][(_0x17eccc(0x1d1))]()],this[_0x17eccc(0x71b)][_0x17eccc(0x189)]=new Rectangle(),this['_cursorArea'][_0x17eccc(0x462)](this[_0x17eccc(0x15f)],this['_padding']),this[_0x17eccc(0x1d2)](this[_0x17eccc(0x71b)]);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x7ed)]=function(){const _0x390447=_0x47679c;this[_0x390447(0x102)]=new Sprite(),this[_0x390447(0x1d2)](this['_effectsContainer']);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x306)]=function(){const _0x3fcf8a=_0x47679c;this['_effectsContainer']&&this[_0x3fcf8a(0x1d2)](this['_effectsContainer']);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x809)]=function(){const _0x3fbb5c=_0x47679c;this['_damageContainer']=new Sprite(),this[_0x3fbb5c(0x1d2)](this['_damageContainer']);},Window_BattleStatus[_0x47679c(0x63e)]['_createCursorSprite']=function(){const _0x2d3764=_0x47679c;this['_cursorSprite']=new Sprite();for(let _0x1ec720=0x0;_0x1ec720<0x9;_0x1ec720++){this['_cursorSprite'][_0x2d3764(0x1d2)](new Sprite());}this[_0x2d3764(0x71b)][_0x2d3764(0x1d2)](this[_0x2d3764(0x7cf)]);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x4a6)]=function(){const _0x175146=_0x47679c;Window_StatusBase['prototype'][_0x175146(0x4a6)][_0x175146(0x22f)](this),this[_0x175146(0x69f)]();},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x69f)]=function(){const _0x96e4b3=_0x47679c,_0x104cfc=this[_0x96e4b3(0x15f)];this[_0x96e4b3(0x71b)]['move'](_0x104cfc,_0x104cfc),this['_cursorArea']['x']=_0x104cfc-this[_0x96e4b3(0x79d)]['x'],this['_cursorArea']['y']=_0x104cfc-this[_0x96e4b3(0x79d)]['y'],this[_0x96e4b3(0x68f)]>0x0&&this[_0x96e4b3(0x38e)]>0x0?this[_0x96e4b3(0x71b)][_0x96e4b3(0x5ec)]=this[_0x96e4b3(0x726)]():this[_0x96e4b3(0x71b)][_0x96e4b3(0x5ec)]=![];},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x3f3)]=function(){const _0x46de0d=_0x47679c;Window_StatusBase[_0x46de0d(0x63e)][_0x46de0d(0x3f3)]['call'](this),this['_updateCursorFilterArea']();},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x4ee)]=function(){const _0x135414=_0x47679c,_0x1f3313=this[_0x135414(0x71b)]['worldTransform']['apply'](new Point(0x0,0x0)),_0x509f13=this[_0x135414(0x71b)][_0x135414(0x189)];_0x509f13['x']=_0x1f3313['x']+this[_0x135414(0x79d)]['x'],_0x509f13['y']=_0x1f3313['y']+this[_0x135414(0x79d)]['y'],_0x509f13['width']=this[_0x135414(0x68f)],_0x509f13[_0x135414(0x170)]=this[_0x135414(0x38e)];},Window_BattleStatus['prototype'][_0x47679c(0x6eb)]=function(_0x4ab366){const _0x129bdc=_0x47679c;if(this[_0x129bdc(0x527)]()!==_0x129bdc(0x5d2))return;this[_0x129bdc(0x600)](_0x4ab366[_0x129bdc(0x588)]());},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x339)]=function(_0x46ee35,_0x3d9df7){const _0x358c55=_0x47679c;if(!this['_damageContainer'])return;if(!_0x46ee35)return;if(!_0x3d9df7)return;const _0x1b6519=this['itemRect'](_0x3d9df7[_0x358c55(0x588)]());_0x1b6519['x']+=_0x1b6519[_0x358c55(0x1ce)]/0x2+this[_0x358c55(0x667)],_0x46ee35['x']=_0x1b6519['x'],_0x46ee35['y']=_0x1b6519['y'],this[_0x358c55(0x486)][_0x358c55(0x1d2)](_0x46ee35);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x7c2)]=function(_0x5b37a1){const _0x2bc9ad=_0x47679c;if(!this['_damageContainer'])return;if(!_0x5b37a1)return;this[_0x2bc9ad(0x486)][_0x2bc9ad(0x70d)](_0x5b37a1);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x457)]=function(){const _0x12c6d2=_0x47679c;if(!this[_0x12c6d2(0x422)]())return;if(!this['_borderPortraitSprite'])this[_0x12c6d2(0x526)]();this[_0x12c6d2(0x37b)](),this['updateBorderSprite']();},Window_BattleStatus['prototype'][_0x47679c(0x422)]=function(){const _0x495aef=_0x47679c;if(this[_0x495aef(0x365)]!==Window_BattleStatus)return![];if(!SceneManager[_0x495aef(0x75d)]())return![];return VisuMZ[_0x495aef(0x2b8)]['Settings'][_0x495aef(0x7e2)][_0x495aef(0x3d1)];},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x526)]=function(){const _0x35a258=_0x47679c;this[_0x35a258(0x643)]=new Sprite();const _0x51b823=SceneManager[_0x35a258(0x56c)],_0x21cb2a=_0x51b823[_0x35a258(0x186)][_0x35a258(0x2b9)](_0x51b823[_0x35a258(0x33c)]);_0x51b823['addChildAt'](this[_0x35a258(0x643)],_0x21cb2a),this['_borderPortraitSprite'][_0x35a258(0x402)]['x']=0.5,this[_0x35a258(0x643)][_0x35a258(0x402)]['y']=0x1;const _0x1d0592=VisuMZ[_0x35a258(0x2b8)][_0x35a258(0x1ea)][_0x35a258(0x7e2)][_0x35a258(0x2c8)];this[_0x35a258(0x643)][_0x35a258(0x34c)]['x']=_0x1d0592,this[_0x35a258(0x643)][_0x35a258(0x34c)]['y']=_0x1d0592,this[_0x35a258(0x643)]['y']=this['y']+this[_0x35a258(0x170)],this[_0x35a258(0x833)]=0x0;},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x37b)]=function(){const _0x105a48=_0x47679c;this[_0x105a48(0x643)][_0x105a48(0x5ec)]=BattleManager[_0x105a48(0x770)]();const _0x4db1dc=BattleManager[_0x105a48(0x84d)]();if(_0x4db1dc===this[_0x105a48(0x643)]['actor'])return;this[_0x105a48(0x643)][_0x105a48(0x84d)]=_0x4db1dc||this[_0x105a48(0x643)]['actor'];if(!_0x4db1dc)return;else{if(_0x4db1dc['getBattlePortraitFilename']()===''){this[_0x105a48(0x643)]['bitmap']=ImageManager[_0x105a48(0x410)];return;}else{const _0x122a3b=ImageManager[_0x105a48(0x7fe)](_0x4db1dc['getBattlePortraitFilename']());_0x122a3b[_0x105a48(0x6a2)](this[_0x105a48(0x1f4)][_0x105a48(0x25d)](this,_0x122a3b));}}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x1f4)]=function(_0xc61d9e){const _0x3c88fe=_0x47679c;this[_0x3c88fe(0x833)]=0x14,this['_borderPortraitSprite'][_0x3c88fe(0x93f)]=_0xc61d9e;SceneManager[_0x3c88fe(0x56c)][_0x3c88fe(0x6d8)]()?(this[_0x3c88fe(0x643)]['x']=0x0,this[_0x3c88fe(0x7ef)]=Math[_0x3c88fe(0x802)](_0xc61d9e['width']/0x2)):(this[_0x3c88fe(0x643)]['x']=this[_0x3c88fe(0x1ce)],this[_0x3c88fe(0x7ef)]=this[_0x3c88fe(0x1ce)]*0x3/0x4);this[_0x3c88fe(0x643)][_0x3c88fe(0x38c)]=0x0,this[_0x3c88fe(0x643)]['y']=this['y']+this[_0x3c88fe(0x170)];const _0x26ebf3=BattleManager[_0x3c88fe(0x84d)]();_0x26ebf3&&(this[_0x3c88fe(0x7ef)]+=_0x26ebf3[_0x3c88fe(0x7f3)](),this['_borderPortraitSprite']['y']+=_0x26ebf3[_0x3c88fe(0x7ab)]());},Window_BattleStatus['prototype'][_0x47679c(0x182)]=function(){const _0x22a2e8=_0x47679c;if(this['_borderPortraitDuration']>0x0){const _0x15b570=this[_0x22a2e8(0x833)],_0x709604=this[_0x22a2e8(0x643)];_0x709604['x']=(_0x709604['x']*(_0x15b570-0x1)+this['_borderPortraitTargetX'])/_0x15b570,_0x709604[_0x22a2e8(0x38c)]=(_0x709604[_0x22a2e8(0x38c)]*(_0x15b570-0x1)+0xff)/_0x15b570,this['_borderPortraitDuration']--;}},Window_BattleStatus['prototype'][_0x47679c(0x1ba)]=function(){const _0x33cd33=_0x47679c;return;this['_effectsContainer']&&(this[_0x33cd33(0x102)]['x']=this['x'],this[_0x33cd33(0x102)]['y']=this['y']),this['_damageContainer']&&(this[_0x33cd33(0x486)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x656)]=function(){const _0x45c014=_0x47679c,_0x1eba74=VisuMZ[_0x45c014(0x2b8)][_0x45c014(0x1ea)]['BattleLayout'];if(_0x1eba74['StatusWindowAttachmentBack']){const _0x4fe7be=new Sprite();_0x4fe7be[_0x45c014(0x93f)]=ImageManager[_0x45c014(0x1cb)](_0x1eba74[_0x45c014(0x376)]),_0x4fe7be['x']=_0x1eba74[_0x45c014(0x7d9)]||0x0,_0x4fe7be['y']=_0x1eba74[_0x45c014(0x67d)]||0x0,this[_0x45c014(0x1e1)](_0x4fe7be),this[_0x45c014(0x119)]=_0x4fe7be;}if(_0x1eba74[_0x45c014(0x34d)]){const _0xbecc8b=new Sprite();_0xbecc8b[_0x45c014(0x93f)]=ImageManager[_0x45c014(0x1cb)](_0x1eba74[_0x45c014(0x34d)]),_0xbecc8b['x']=_0x1eba74[_0x45c014(0x721)]||0x0,_0xbecc8b['y']=_0x1eba74[_0x45c014(0x73e)]||0x0,this['addChild'](_0xbecc8b),this[_0x45c014(0x283)]=_0xbecc8b;}},Window_BattleStatus[_0x47679c(0x63e)][_0x47679c(0x771)]=function(){const _0x45cd6a=_0x47679c;this[_0x45cd6a(0x283)]&&this[_0x45cd6a(0x1d2)](this[_0x45cd6a(0x283)]),this[_0x45cd6a(0x119)]&&this[_0x45cd6a(0x1e1)](this[_0x45cd6a(0x119)]);},Window_BattleActor[_0x47679c(0x63e)]['isOkEnabled']=function(){const _0x212e4a=_0x47679c;return Window_BattleStatus['prototype']['isOkEnabled']['call'](this)&&this[_0x212e4a(0x3de)]();},Window_BattleActor[_0x47679c(0x63e)][_0x47679c(0x3de)]=function(){const _0x4a84c6=_0x47679c,_0x343b80=BattleManager[_0x4a84c6(0x541)](),_0x188661=this[_0x4a84c6(0x84d)](this[_0x4a84c6(0x588)]());if(!_0x343b80)return!![];if(!_0x343b80[_0x4a84c6(0x88b)]())return!![];const _0x588ebf=_0x343b80[_0x4a84c6(0x88b)]()[_0x4a84c6(0x4d1)];if(_0x588ebf[_0x4a84c6(0x503)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x188661===BattleManager[_0x4a84c6(0x84d)]())return![];}return!![];},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x945)]=Window_BattleEnemy['prototype'][_0x47679c(0x736)],Window_BattleEnemy[_0x47679c(0x63e)][_0x47679c(0x736)]=function(_0x5e1a00){const _0x2a5cf0=_0x47679c;this[_0x2a5cf0(0x5a6)]=null,VisuMZ[_0x2a5cf0(0x2b8)][_0x2a5cf0(0x945)][_0x2a5cf0(0x22f)](this,_0x5e1a00);},Window_BattleEnemy['prototype']['maxCols']=function(){const _0x4fb922=_0x47679c;return this[_0x4fb922(0x924)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x178)]=Window_BattleEnemy[_0x47679c(0x63e)][_0x47679c(0x92f)],Window_BattleEnemy[_0x47679c(0x63e)][_0x47679c(0x92f)]=function(){const _0x2b8c38=_0x47679c;VisuMZ[_0x2b8c38(0x2b8)][_0x2b8c38(0x178)][_0x2b8c38(0x22f)](this),this['y']=Graphics[_0x2b8c38(0x170)]*0xa;},Window_BattleEnemy[_0x47679c(0x63e)]['validTargets']=function(){const _0x2deeed=_0x47679c;return $gameTroop[_0x2deeed(0x8ef)]()[_0x2deeed(0x36d)](0x0);},Window_BattleEnemy[_0x47679c(0x63e)]['refresh']=function(){const _0x18de1d=_0x47679c;this[_0x18de1d(0x7a3)]=this[_0x18de1d(0x562)](),this[_0x18de1d(0x7d7)](),Window_Selectable[_0x18de1d(0x63e)]['refresh']['call'](this);},Window_BattleEnemy[_0x47679c(0x63e)][_0x47679c(0x7d7)]=function(){const _0x16ef40=_0x47679c;this[_0x16ef40(0x7a3)]['sort']((_0x2a58aa,_0x29296f)=>{const _0x2a8c28=_0x16ef40;return _0x2a58aa[_0x2a8c28(0x828)]()[_0x2a8c28(0x854)]===_0x29296f['battler']()['_baseX']?_0x2a58aa[_0x2a8c28(0x828)]()[_0x2a8c28(0x4b2)]-_0x29296f[_0x2a8c28(0x828)]()[_0x2a8c28(0x4b2)]:_0x2a58aa[_0x2a8c28(0x828)]()[_0x2a8c28(0x854)]-_0x29296f[_0x2a8c28(0x828)]()[_0x2a8c28(0x854)];}),SceneManager[_0x16ef40(0x2c4)]()&&this['_enemies'][_0x16ef40(0x100)]();},Window_BattleEnemy[_0x47679c(0x63e)][_0x47679c(0x43c)]=function(){const _0x5ac200=_0x47679c,_0x10c389=VisuMZ[_0x5ac200(0x2b8)][_0x5ac200(0x1ea)]['Enemy'];_0x10c389['LastSelected']?this[_0x5ac200(0x79a)]():this[_0x5ac200(0x393)]();},Window_BattleEnemy['prototype'][_0x47679c(0x79a)]=function(){const _0x1f2849=_0x47679c;if(this['_lastEnemy']&&this[_0x1f2849(0x7a3)]['includes'](this[_0x1f2849(0x5a6)])){const _0x42f2ca=this[_0x1f2849(0x7a3)]['indexOf'](this[_0x1f2849(0x5a6)]);this['forceSelect'](_0x42f2ca);}else this['autoSelectPriority']();},Window_BattleEnemy[_0x47679c(0x63e)][_0x47679c(0x393)]=function(){const _0x4914fe=_0x47679c,_0x3999a9=VisuMZ[_0x4914fe(0x2b8)][_0x4914fe(0x1ea)][_0x4914fe(0x7d1)];let _0x430ab6=![];$gameSystem['isSideView']()?_0x430ab6=_0x3999a9[_0x4914fe(0x89a)]:_0x430ab6=_0x3999a9[_0x4914fe(0x6e5)],this['forceSelect'](_0x430ab6?this[_0x4914fe(0x924)]()-0x1:0x0);},Window_BattleEnemy[_0x47679c(0x63e)][_0x47679c(0x533)]=function(){const _0x46c347=_0x47679c;Window_Selectable[_0x46c347(0x63e)][_0x46c347(0x533)][_0x46c347(0x22f)](this),this[_0x46c347(0x5a6)]=this[_0x46c347(0xdc)]();},Window_BattleItem[_0x47679c(0x63e)][_0x47679c(0x3f6)]=function(_0x3bc722){const _0x92eddb=_0x47679c;if(!_0x3bc722)return![];return _0x3bc722[_0x92eddb(0x17d)]===0x0||_0x3bc722[_0x92eddb(0x17d)]===0x1;};function Window_AutoBattleCancel(){const _0x475b66=_0x47679c;this[_0x475b66(0x736)](...arguments);}Window_AutoBattleCancel['prototype']=Object[_0x47679c(0x2c5)](Window_Base['prototype']),Window_AutoBattleCancel[_0x47679c(0x63e)][_0x47679c(0x365)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype']['initialize']=function(_0x20ac8f){const _0x1519c7=_0x47679c;Window_Base[_0x1519c7(0x63e)][_0x1519c7(0x736)]['call'](this,_0x20ac8f),this[_0x1519c7(0x552)](this[_0x1519c7(0x18e)]()),this[_0x1519c7(0x29b)]();},Window_AutoBattleCancel['prototype'][_0x47679c(0x18e)]=function(){const _0x11d412=_0x47679c;return VisuMZ['BattleCore'][_0x11d412(0x1ea)][_0x11d412(0x18c)]['AutoBattleBgType'];},Window_AutoBattleCancel[_0x47679c(0x63e)][_0x47679c(0x29b)]=function(){const _0x5d41c7=_0x47679c;this[_0x5d41c7(0x632)][_0x5d41c7(0x78c)]();const _0x4e336d=VisuMZ[_0x5d41c7(0x2b8)][_0x5d41c7(0x1ea)]['AutoBattle'][_0x5d41c7(0x566)],_0x5d7c0c=_0x4e336d['format'](this[_0x5d41c7(0x949)](),this[_0x5d41c7(0x803)]()),_0x51b1f0=this[_0x5d41c7(0x2fd)](_0x5d7c0c)[_0x5d41c7(0x1ce)],_0x2a208d=Math[_0x5d41c7(0x8c0)]((this['innerWidth']-_0x51b1f0)/0x2);this[_0x5d41c7(0x79f)](_0x5d7c0c,_0x2a208d,0x0,_0x51b1f0);},Window_AutoBattleCancel[_0x47679c(0x63e)][_0x47679c(0x949)]=function(){const _0x59fe62=_0x47679c;return Imported[_0x59fe62(0x4a7)]?TextManager[_0x59fe62(0x6e3)]('ok'):VisuMZ[_0x59fe62(0x2b8)][_0x59fe62(0x1ea)]['AutoBattle']['AutoBattleOK'];},Window_AutoBattleCancel[_0x47679c(0x63e)]['cancelButtonText']=function(){const _0x195316=_0x47679c;return Imported['VisuMZ_0_CoreEngine']?TextManager[_0x195316(0x6e3)](_0x195316(0x3ea)):VisuMZ[_0x195316(0x2b8)][_0x195316(0x1ea)][_0x195316(0x18c)]['AutoBattleCancel'];},Window_AutoBattleCancel[_0x47679c(0x63e)][_0x47679c(0x874)]=function(){const _0x25581c=_0x47679c;Window_Base[_0x25581c(0x63e)][_0x25581c(0x874)][_0x25581c(0x22f)](this),this['updateVisibility'](),this[_0x25581c(0x176)]();},Window_AutoBattleCancel[_0x47679c(0x63e)][_0x47679c(0x406)]=function(){const _0x464b2e=_0x47679c;this[_0x464b2e(0x5ec)]=BattleManager[_0x464b2e(0x1b7)];},Window_AutoBattleCancel[_0x47679c(0x63e)]['updateCancel']=function(){const _0x149ea6=_0x47679c;if(!BattleManager[_0x149ea6(0x1b7)])return;(Input[_0x149ea6(0x206)]('ok')||Input[_0x149ea6(0x206)](_0x149ea6(0x3ea))||TouchInput[_0x149ea6(0x313)]()||TouchInput['isCancelled']())&&(SoundManager[_0x149ea6(0x50b)](),BattleManager[_0x149ea6(0x1b7)]=![],Input[_0x149ea6(0x78c)](),TouchInput[_0x149ea6(0x78c)]());};function Window_EnemyName(){const _0x29190a=_0x47679c;this[_0x29190a(0x736)](...arguments);}Window_EnemyName[_0x47679c(0x63e)]=Object[_0x47679c(0x2c5)](Window_StatusBase[_0x47679c(0x63e)]),Window_EnemyName[_0x47679c(0x63e)][_0x47679c(0x365)]=Window_EnemyName,Window_EnemyName['prototype'][_0x47679c(0x736)]=function(_0x1e6ba2){const _0x1214b4=_0x47679c;this['_enemyID']=_0x1e6ba2,this[_0x1214b4(0x2df)]='';const _0x5a315e=new Rectangle(0x0,0x0,Graphics[_0x1214b4(0x75b)],this[_0x1214b4(0x663)]()*0x4);Window_StatusBase['prototype']['initialize'][_0x1214b4(0x22f)](this,_0x5a315e),this['setBackgroundType'](0x2),this[_0x1214b4(0x808)]=0x0;},Window_EnemyName[_0x47679c(0x63e)][_0x47679c(0x110)]=function(){this['padding']=0x0;},Window_EnemyName[_0x47679c(0x63e)][_0x47679c(0xdc)]=function(){const _0x2d610c=_0x47679c;return $gameTroop[_0x2d610c(0x3fb)]()[this['_enemyID']];},Window_EnemyName[_0x47679c(0x63e)][_0x47679c(0x874)]=function(){const _0x7ac869=_0x47679c;Window_StatusBase[_0x7ac869(0x63e)][_0x7ac869(0x874)][_0x7ac869(0x22f)](this),this[_0x7ac869(0xdc)]()&&this[_0x7ac869(0xdc)]()['name']()!==this[_0x7ac869(0x2df)]&&(this[_0x7ac869(0x2df)]=this[_0x7ac869(0xdc)]()[_0x7ac869(0x620)](),this[_0x7ac869(0x29b)]()),this[_0x7ac869(0x1e2)](),this[_0x7ac869(0x6e8)]();},Window_EnemyName[_0x47679c(0x63e)][_0x47679c(0x1e2)]=function(){const _0x2ac832=_0x47679c;if(!this['enemy']()){if(this[_0x2ac832(0x808)]>0x0)this['contentsOpacity']-=0x10;}else{if(this['enemy']()['isDead']()){if(this['contentsOpacity']>0x0)this[_0x2ac832(0x808)]-=0x10;}else{if(SceneManager[_0x2ac832(0x56c)][_0x2ac832(0x775)]&&SceneManager[_0x2ac832(0x56c)][_0x2ac832(0x775)][_0x2ac832(0x390)]&&SceneManager[_0x2ac832(0x56c)]['_enemyWindow'][_0x2ac832(0x7a3)][_0x2ac832(0x3f6)](this[_0x2ac832(0xdc)]())){if(this[_0x2ac832(0x808)]<0xff)this[_0x2ac832(0x808)]+=0x10;}else this['contentsOpacity']>0x0&&(this[_0x2ac832(0x808)]-=0x10);}}},Window_EnemyName['prototype']['updatePosition']=function(){const _0x552872=_0x47679c;if(!this[_0x552872(0xdc)]())return;SceneManager[_0x552872(0x2c4)]()?this['x']=Graphics[_0x552872(0x75b)]-this[_0x552872(0xdc)]()[_0x552872(0x828)]()[_0x552872(0x854)]:this['x']=this[_0x552872(0xdc)]()['battler']()['_baseX'];this['x']-=Math[_0x552872(0x23b)](this[_0x552872(0x1ce)]/0x2),this['y']=this[_0x552872(0xdc)]()['battler']()['_baseY']-Math[_0x552872(0x23b)](this['lineHeight']()*1.5);const _0x22fd6d=VisuMZ[_0x552872(0x2b8)]['Settings'][_0x552872(0x7d1)];this['x']+=_0x22fd6d[_0x552872(0x887)]||0x0,this['y']+=_0x22fd6d[_0x552872(0x5db)]||0x0;},Window_EnemyName[_0x47679c(0x63e)]['resetFontSettings']=function(){const _0x35f6c6=_0x47679c;Window_Base['prototype'][_0x35f6c6(0x5dd)][_0x35f6c6(0x22f)](this),this['contents'][_0x35f6c6(0x2a3)]=VisuMZ[_0x35f6c6(0x2b8)][_0x35f6c6(0x1ea)][_0x35f6c6(0x7d1)][_0x35f6c6(0x65b)];},Window_EnemyName[_0x47679c(0x63e)][_0x47679c(0x29b)]=function(){const _0x171a9e=_0x47679c;Window_StatusBase[_0x171a9e(0x63e)][_0x171a9e(0x29b)][_0x171a9e(0x22f)](this),this[_0x171a9e(0x632)][_0x171a9e(0x78c)]();if(!this[_0x171a9e(0xdc)]())return;this[_0x171a9e(0x23c)]();},Window_EnemyName['prototype']['drawEnemyName']=function(){const _0x254ff6=_0x47679c;this[_0x254ff6(0x2df)]=this['enemy']()[_0x254ff6(0x620)]();const _0xc17892=this[_0x254ff6(0x2fd)](this[_0x254ff6(0x2df)])['width'],_0x2c5dd9=Math[_0x254ff6(0x23b)]((this[_0x254ff6(0x68f)]-_0xc17892)/0x2);this[_0x254ff6(0x79f)](this[_0x254ff6(0x2df)],_0x2c5dd9,0x0,_0xc17892+0x8);},Window_BattleLog[_0x47679c(0x63e)]['maxLines']=function(){const _0x5745d1=_0x47679c;return VisuMZ['BattleCore'][_0x5745d1(0x1ea)]['BattleLog']['MaxLines'];},Window_BattleLog[_0x47679c(0x63e)]['messageSpeed']=function(){const _0x156507=_0x47679c;return VisuMZ[_0x156507(0x2b8)]['Settings']['BattleLog']['MessageWait'];},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x93d)]=function(){const _0x108ffb=_0x47679c;return VisuMZ[_0x108ffb(0x2b8)][_0x108ffb(0x1ea)][_0x108ffb(0x519)][_0x108ffb(0x4bc)];},Window_BattleLog['prototype']['isFastForward']=function(){return![];},Window_BattleLog['prototype'][_0x47679c(0x5cd)]=function(_0x39b17d,_0x1ab55c){const _0x583b1c=_0x47679c;this[_0x583b1c(0x20c)](_0x583b1c(0x685)),BattleManager['invokeAction'](_0x39b17d,_0x1ab55c),this['callNextMethod']();},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x685)]=function(){const _0x5415a=_0x47679c;this[_0x5415a(0x550)]();},Window_BattleLog['prototype']['push']=function(_0xed2639){const _0x153739=_0x47679c,_0xfdd6a5=Array['prototype']['slice'][_0x153739(0x22f)](arguments,0x1),_0x36dc02={'name':_0xed2639,'params':_0xfdd6a5},_0x21ebcd=this[_0x153739(0x947)]['map'](_0x107748=>_0x107748[_0x153739(0x620)])[_0x153739(0x2b9)](_0x153739(0x685));_0x21ebcd>=0x0?this[_0x153739(0x947)][_0x153739(0x57a)](_0x21ebcd,0x0,_0x36dc02):this['_methods'][_0x153739(0x6b4)](_0x36dc02);},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x20c)]=function(_0x42d5b3){const _0x347d6b=_0x47679c,_0x3d287d=Array[_0x347d6b(0x63e)][_0x347d6b(0x36d)][_0x347d6b(0x22f)](arguments,0x1);this['_methods'][_0x347d6b(0x20c)]({'name':_0x42d5b3,'params':_0x3d287d});},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x8ec)]=function(){const _0x12cb7e=_0x47679c;if(!$gameTemp[_0x12cb7e(0x209)]())return;console['log'](this['_methods'][_0x12cb7e(0x261)](_0x29c874=>_0x29c874[_0x12cb7e(0x620)])[_0x12cb7e(0x352)]('\x0a'));},VisuMZ[_0x47679c(0x2b8)]['Window_BattleLog_refresh']=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x29b)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x29b)]=function(){const _0x35df4e=_0x47679c;this[_0x35df4e(0x580)]=!![];},VisuMZ['BattleCore'][_0x47679c(0x63d)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x874)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x874)]=function(){const _0x15c62c=_0x47679c;VisuMZ[_0x15c62c(0x2b8)][_0x15c62c(0x63d)]['call'](this);if(this[_0x15c62c(0x580)])this[_0x15c62c(0x52e)]();},Window_BattleLog['prototype'][_0x47679c(0x52e)]=function(){const _0x4af9d6=_0x47679c;this[_0x4af9d6(0x580)]=![],VisuMZ[_0x4af9d6(0x2b8)]['Window_BattleLog_refresh'][_0x4af9d6(0x22f)](this);},Window_BattleLog['prototype'][_0x47679c(0x3c1)]=function(_0x15a5fa){const _0x467e51=_0x47679c;let _0x142cae=VisuMZ[_0x467e51(0x2b8)][_0x467e51(0x1ea)][_0x467e51(0x519)][_0x467e51(0x894)]['toLowerCase']()['trim'](),_0x3b5d2a=this[_0x467e51(0x371)][_0x15a5fa];if(_0x3b5d2a['match'](/<LEFT>/i))_0x142cae=_0x467e51(0x3fe);else{if(_0x3b5d2a[_0x467e51(0x503)](/<CENTER>/i))_0x142cae=_0x467e51(0x54e);else _0x3b5d2a['match'](/<RIGHT>/i)&&(_0x142cae=_0x467e51(0x742));}_0x3b5d2a=_0x3b5d2a[_0x467e51(0x6c5)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x3b5d2a=_0x3b5d2a['replace'](/\\I\[0\]/gi,'');const _0x294496=this[_0x467e51(0x804)](_0x15a5fa);this[_0x467e51(0x632)][_0x467e51(0x411)](_0x294496['x'],_0x294496['y'],_0x294496['width'],_0x294496[_0x467e51(0x170)]);const _0xcb404d=this[_0x467e51(0x2fd)](_0x3b5d2a)[_0x467e51(0x1ce)];let _0x5de57=_0x294496['x'];if(_0x142cae==='center')_0x5de57+=(_0x294496['width']-_0xcb404d)/0x2;else _0x142cae===_0x467e51(0x742)&&(_0x5de57+=_0x294496[_0x467e51(0x1ce)]-_0xcb404d);this[_0x467e51(0x79f)](_0x3b5d2a,_0x5de57,_0x294496['y'],_0xcb404d+0x8);},Window_BattleLog['prototype']['addText']=function(_0x37d8db){const _0x4c001c=_0x47679c;this['_lines'][_0x4c001c(0x6b4)](_0x37d8db),this[_0x4c001c(0x29b)](),this[_0x4c001c(0x550)]();},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x343)]=function(){const _0x4e8006=_0x47679c;let _0x11fa20=![];switch(this['_waitMode']){case'effect':_0x11fa20=this[_0x4e8006(0x610)]['isEffecting']();break;case _0x4e8006(0x501):_0x11fa20=this['_spriteset'][_0x4e8006(0x795)]();break;case _0x4e8006(0x444):_0x11fa20=this['_spriteset'][_0x4e8006(0x6ca)]();break;case _0x4e8006(0x161):_0x11fa20=this['_spriteset'][_0x4e8006(0x449)]();break;case _0x4e8006(0x4de):_0x11fa20=this[_0x4e8006(0x610)]['isAnyoneJumping']();break;case _0x4e8006(0x38c):_0x11fa20=this['_spriteset'][_0x4e8006(0x30a)]();break;}return!_0x11fa20&&(this[_0x4e8006(0x596)]=''),_0x11fa20;},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x3bf)]=function(){const _0x700d70=_0x47679c;this['setWaitMode'](_0x700d70(0x444));},Window_BattleLog['prototype'][_0x47679c(0x8ca)]=function(){const _0x5747ba=_0x47679c;this[_0x5747ba(0x851)](_0x5747ba(0x161));},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x3ae)]=function(){const _0xac92b4=_0x47679c;this[_0xac92b4(0x851)](_0xac92b4(0x4de));},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x312)]=function(){const _0x59f0e8=_0x47679c;this['setWaitMode'](_0x59f0e8(0x38c));},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x7ca)]=function(){const _0x5345b0=_0x47679c,_0x1596b5=VisuMZ[_0x5345b0(0x2b8)][_0x5345b0(0x1ea)]['BattleLog'];if(!_0x1596b5['StartTurnShow'])return;this[_0x5345b0(0x6b4)](_0x5345b0(0xe0),_0x1596b5['StartTurnMsg']['format']($gameTroop[_0x5345b0(0x27d)]())),this[_0x5345b0(0x6b4)](_0x5345b0(0x473),_0x1596b5['StartTurnWait']),this[_0x5345b0(0x6b4)](_0x5345b0(0x78c));},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x303)]=function(_0x1f518a,_0x4adb21,_0x426be3){const _0x4ee4c4=_0x47679c;this[_0x4ee4c4(0x631)](_0x4adb21)?BattleManager[_0x4ee4c4(0x221)]():this['usePremadeActionSequence'](_0x1f518a,_0x4adb21,_0x426be3);},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x631)]=function(_0x5d4a06){const _0x3c6475=_0x47679c;if(!SceneManager[_0x3c6475(0x75d)]())return![];if(!_0x5d4a06)return![];if(!_0x5d4a06[_0x3c6475(0x88b)]())return![];if(_0x5d4a06[_0x3c6475(0x88b)]()['note'][_0x3c6475(0x503)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x3c6475(0x86a)](_0x5d4a06[_0x3c6475(0x88b)]()))return!![];return![];},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x5d3)]=function(_0x26b7dc,_0x2cef63,_0x34bf5d){const _0x502bea=_0x47679c,_0x22d64d=_0x2cef63[_0x502bea(0x88b)]();this['setupActionSet'](_0x26b7dc,_0x2cef63,_0x34bf5d),this['createEffectActionSet'](_0x26b7dc,_0x2cef63,_0x34bf5d),this[_0x502bea(0x51c)](_0x26b7dc,_0x2cef63,_0x34bf5d);},Window_BattleLog['prototype'][_0x47679c(0x5bb)]=function(_0x585ec2,_0x1fcc70){const _0x2c5236=_0x47679c,_0x3da884=VisuMZ[_0x2c5236(0x2b8)][_0x2c5236(0x1ea)][_0x2c5236(0x519)];_0x3da884['ActionCenteredName']&&this[_0x2c5236(0x6b4)](_0x2c5236(0xe0),_0x2c5236(0x11d)[_0x2c5236(0x151)](DataManager[_0x2c5236(0x454)](_0x1fcc70)));if(DataManager[_0x2c5236(0x5e3)](_0x1fcc70)){if(_0x3da884[_0x2c5236(0x6cf)])this[_0x2c5236(0x848)](_0x1fcc70[_0x2c5236(0x4d3)],_0x585ec2,_0x1fcc70);if(_0x3da884['ActionSkillMsg2'])this[_0x2c5236(0x848)](_0x1fcc70[_0x2c5236(0x2bd)],_0x585ec2,_0x1fcc70);}else{if(_0x3da884[_0x2c5236(0x282)])this[_0x2c5236(0x848)](TextManager[_0x2c5236(0x13c)],_0x585ec2,_0x1fcc70);}},Window_BattleLog[_0x47679c(0x63e)]['setupActionSet']=function(_0xe576ef,_0x74d325,_0x472d3f){const _0x2c4105=_0x47679c,_0x19c874=_0x74d325['item']();this[_0x2c4105(0x5bb)](_0xe576ef,_0x19c874),this[_0x2c4105(0x6b4)]('applyImmortal',_0xe576ef,_0x472d3f,!![]),this[_0x2c4105(0x6b4)](_0x2c4105(0x223),_0xe576ef,_0x74d325),this[_0x2c4105(0x6b4)](_0x2c4105(0x4cc)),this[_0x2c4105(0x6b4)](_0x2c4105(0x32d),_0xe576ef,_0x74d325),this[_0x2c4105(0x6b4)]('waitForAnimation');},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x6c6)]=function(_0x3beb10,_0x466f7e,_0x498372){const _0x344947=_0x47679c;if(this[_0x344947(0x2f4)](_0x466f7e))this['autoMeleeSingleTargetActionSet'](_0x3beb10,_0x466f7e,_0x498372);else{if(this[_0x344947(0x2f3)](_0x466f7e))this[_0x344947(0x7a1)](_0x3beb10,_0x466f7e,_0x498372);else _0x466f7e['isForRandom']()?this[_0x344947(0x68e)](_0x3beb10,_0x466f7e,_0x498372):this[_0x344947(0x2dc)](_0x3beb10,_0x466f7e,_0x498372);}},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x2f4)]=function(_0xec9518){const _0xdd539b=_0x47679c;if(!_0xec9518[_0xdd539b(0x2b0)]())return![];if(!_0xec9518['isForOne']())return![];if(!_0xec9518['isForOpponent']())return![];return VisuMZ[_0xdd539b(0x2b8)][_0xdd539b(0x1ea)][_0xdd539b(0x943)][_0xdd539b(0x48c)];},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x7e4)]=function(_0x16d999,_0x28bf77,_0x3f3e04){const _0x699b8f=_0x47679c,_0x25c26f=_0x16d999['getAttackMotion']()[_0x699b8f(0x3b6)]<0x2,_0x1187d4=0x14,_0x3e5dbf=0x30;_0x25c26f&&(this[_0x699b8f(0x6b4)](_0x699b8f(0x937),[_0x16d999],_0x3e5dbf,_0x1187d4),this['push'](_0x699b8f(0x4ce),_0x16d999,_0x3f3e04,_0x699b8f(0x530),_0x1187d4,!![],_0x699b8f(0x49d),!![]),this['push'](_0x699b8f(0x608),[_0x16d999],'walk'),this[_0x699b8f(0x6b4)](_0x699b8f(0x4cc)));let _0x214dc3=_0x28bf77[_0x699b8f(0x219)]()?this[_0x699b8f(0x5ea)](_0x16d999):0x1;for(let _0x120542=0x0;_0x120542<_0x214dc3;_0x120542++){_0x28bf77[_0x699b8f(0x219)]()&&_0x16d999[_0x699b8f(0xf2)]()&&this[_0x699b8f(0x6b4)]('setActiveWeaponSet',_0x16d999,_0x120542),_0x28bf77[_0x699b8f(0x88b)]()[_0x699b8f(0x62c)]<0x0?this[_0x699b8f(0x68e)](_0x16d999,_0x28bf77,_0x3f3e04):this['wholeActionSet'](_0x16d999,_0x28bf77,_0x3f3e04);}_0x28bf77['isAttack']()&&_0x16d999[_0x699b8f(0xf2)]()&&this[_0x699b8f(0x6b4)]('clearActiveWeaponSet',_0x16d999);this['push'](_0x699b8f(0x374),_0x16d999,_0x3f3e04,![]);if(_0x25c26f){const _0x534537=_0x16d999[_0x699b8f(0x828)]();this[_0x699b8f(0x6b4)](_0x699b8f(0x937),[_0x16d999],_0x3e5dbf,_0x1187d4),this['push'](_0x699b8f(0x17a),_0x16d999,_0x534537[_0x699b8f(0x76a)],_0x534537[_0x699b8f(0x843)],_0x1187d4,![],'Linear'),this[_0x699b8f(0x6b4)](_0x699b8f(0x608),[_0x16d999],_0x699b8f(0x3a1)),this[_0x699b8f(0x6b4)]('waitForMovement'),this['push']('requestMotion',[_0x16d999],_0x699b8f(0x7d4));}},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x2f3)]=function(_0x5880d9){const _0x167e9a=_0x47679c;if(!_0x5880d9['isPhysical']())return![];if(!_0x5880d9[_0x167e9a(0x8d0)]())return![];if(!_0x5880d9[_0x167e9a(0x27c)]())return![];return VisuMZ[_0x167e9a(0x2b8)][_0x167e9a(0x1ea)][_0x167e9a(0x943)]['AutoMeleeAoE'];},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x7a1)]=function(_0x4adcb1,_0x36408a,_0x81c552){const _0x31c6a8=_0x47679c,_0x370472=_0x4adcb1[_0x31c6a8(0x8ee)]()[_0x31c6a8(0x3b6)]<0x2,_0x2a0d9c=0x14,_0x2a8451=0x30;_0x370472&&(this['push'](_0x31c6a8(0x937),[_0x4adcb1],_0x2a8451,_0x2a0d9c),this[_0x31c6a8(0x6b4)]('performMoveToTargets',_0x4adcb1,_0x81c552,_0x31c6a8(0x724),_0x2a0d9c,!![],_0x31c6a8(0x49d),!![]),this[_0x31c6a8(0x6b4)](_0x31c6a8(0x608),[_0x4adcb1],_0x31c6a8(0x7d4)),this[_0x31c6a8(0x6b4)]('waitForMovement'));let _0x38931c=_0x36408a[_0x31c6a8(0x219)]()?this[_0x31c6a8(0x5ea)](_0x4adcb1):0x1;for(let _0x1eb268=0x0;_0x1eb268<_0x38931c;_0x1eb268++){_0x36408a[_0x31c6a8(0x219)]()&&_0x4adcb1[_0x31c6a8(0xf2)]()&&this['push'](_0x31c6a8(0x680),_0x4adcb1,_0x1eb268),this[_0x31c6a8(0x2dc)](_0x4adcb1,_0x36408a,_0x81c552);}_0x36408a[_0x31c6a8(0x219)]()&&_0x4adcb1[_0x31c6a8(0xf2)]()&&this[_0x31c6a8(0x6b4)]('clearActiveWeaponSet',_0x4adcb1);this[_0x31c6a8(0x6b4)](_0x31c6a8(0x374),_0x4adcb1,_0x81c552,![]);if(_0x370472){const _0x4a31ee=_0x4adcb1[_0x31c6a8(0x828)]();this[_0x31c6a8(0x6b4)](_0x31c6a8(0x937),[_0x4adcb1],_0x2a8451,_0x2a0d9c),this[_0x31c6a8(0x6b4)](_0x31c6a8(0x17a),_0x4adcb1,_0x4a31ee['_homeX'],_0x4a31ee[_0x31c6a8(0x843)],_0x2a0d9c,![],_0x31c6a8(0x49d)),this['push'](_0x31c6a8(0x608),[_0x4adcb1],_0x31c6a8(0x3a1)),this['push'](_0x31c6a8(0x4cc)),this[_0x31c6a8(0x6b4)](_0x31c6a8(0x608),[_0x4adcb1],_0x31c6a8(0x7d4));}},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x68e)]=function(_0x423cce,_0x491802,_0x454255){const _0x53d32e=_0x47679c,_0x54f904=_0x491802[_0x53d32e(0x88b)]();for(const _0x2a1fbd of _0x454255){if(!_0x2a1fbd)continue;this['push']('performAction',_0x423cce,_0x491802),this['push'](_0x53d32e(0x473),Sprite_Battler[_0x53d32e(0x701)]),this['push'](_0x53d32e(0x61d),_0x423cce,[_0x2a1fbd],_0x54f904['animationId']),this[_0x53d32e(0x6b4)]('waitCount',0x18),this[_0x53d32e(0x6b4)](_0x53d32e(0x5cd),_0x423cce,_0x2a1fbd);}},Window_BattleLog['prototype'][_0x47679c(0x2dc)]=function(_0x41c80a,_0x535684,_0x2553d5){const _0x1fb8b9=_0x47679c,_0x52ca25=_0x535684[_0x1fb8b9(0x88b)]();this[_0x1fb8b9(0x6b4)](_0x1fb8b9(0x5d5),_0x41c80a,_0x535684),this[_0x1fb8b9(0x6b4)](_0x1fb8b9(0x473),Sprite_Battler['_motionSpeed']),this[_0x1fb8b9(0x6b4)]('showAnimation',_0x41c80a,_0x2553d5['clone'](),_0x52ca25[_0x1fb8b9(0x62c)]),this['push'](_0x1fb8b9(0x3bf));for(const _0x1c2f27 of _0x2553d5){if(!_0x1c2f27)continue;this[_0x1fb8b9(0x6b4)]('actionEffect',_0x41c80a,_0x1c2f27);}},Window_BattleLog['prototype']['finishActionSet']=function(_0x4e6b6d,_0x9f1601,_0x57c8d2){const _0x58d8e1=_0x47679c,_0x46f8c2=_0x9f1601[_0x58d8e1(0x88b)]();this[_0x58d8e1(0x6b4)](_0x58d8e1(0x374),_0x4e6b6d,_0x57c8d2,![]),this['push'](_0x58d8e1(0x70e)),this[_0x58d8e1(0x6b4)](_0x58d8e1(0x72c)),this[_0x58d8e1(0x6b4)](_0x58d8e1(0x78c)),this['push']('performActionEnd',_0x4e6b6d),this['push'](_0x58d8e1(0x4cc));},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x6f6)]=function(_0x5bdd6d){},VisuMZ[_0x47679c(0x2b8)]['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x6ce)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x6ce)]=function(_0x57607c){const _0x4fa919=_0x47679c;if(!VisuMZ[_0x4fa919(0x2b8)][_0x4fa919(0x1ea)][_0x4fa919(0x519)][_0x4fa919(0x464)])return;VisuMZ[_0x4fa919(0x2b8)]['Window_BattleLog_displayCurrentState'][_0x4fa919(0x22f)](this,_0x57607c);},Window_BattleLog['prototype'][_0x47679c(0x3ba)]=function(_0x213c80){const _0x1a048a=_0x47679c;this[_0x1a048a(0x6b4)]('performCounter',_0x213c80);VisuMZ[_0x1a048a(0x2b8)]['Settings'][_0x1a048a(0x943)]['CounterPlayback']&&this['push'](_0x1a048a(0x61d),_0x213c80,[BattleManager[_0x1a048a(0x8f5)]],-0x1);if(!VisuMZ[_0x1a048a(0x2b8)][_0x1a048a(0x1ea)][_0x1a048a(0x519)][_0x1a048a(0x36a)])return;this['push']('addText',TextManager[_0x1a048a(0x89b)][_0x1a048a(0x151)](_0x213c80[_0x1a048a(0x620)]()));},Window_BattleLog['prototype'][_0x47679c(0x8d8)]=function(_0x539651){const _0x3a2e46=_0x47679c;this[_0x3a2e46(0x6b4)](_0x3a2e46(0x71f),_0x539651);if(!VisuMZ[_0x3a2e46(0x2b8)][_0x3a2e46(0x1ea)][_0x3a2e46(0x519)][_0x3a2e46(0x51e)])return;this['push'](_0x3a2e46(0xe0),TextManager[_0x3a2e46(0x150)][_0x3a2e46(0x151)](_0x539651[_0x3a2e46(0x620)]()));},Window_BattleLog[_0x47679c(0x63e)]['displayReflectionPlayBack']=function(_0x4d5837,_0x51bb56){const _0x3e2ae7=_0x47679c;if(VisuMZ[_0x3e2ae7(0x2b8)][_0x3e2ae7(0x1ea)][_0x3e2ae7(0x943)][_0x3e2ae7(0x37d)]){const _0x16e2c5=_0x51bb56['item']();this['push'](_0x3e2ae7(0x61d),_0x4d5837,[_0x4d5837],_0x16e2c5[_0x3e2ae7(0x62c)]);}},Window_BattleLog['prototype'][_0x47679c(0x757)]=function(_0x521934,_0x1ed6c5){const _0x164fd2=_0x47679c;this[_0x164fd2(0x6b4)](_0x164fd2(0x661),_0x521934,_0x1ed6c5);if(!VisuMZ[_0x164fd2(0x2b8)][_0x164fd2(0x1ea)][_0x164fd2(0x519)][_0x164fd2(0x790)])return;const _0x2faa63=_0x521934[_0x164fd2(0x620)](),_0xa689e3=TextManager[_0x164fd2(0x50c)]['format'](_0x2faa63,_0x1ed6c5[_0x164fd2(0x620)]());this[_0x164fd2(0x6b4)](_0x164fd2(0xe0),_0xa689e3);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1be)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x678)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x678)]=function(_0x5164bf,_0x3e806c){const _0x41ca56=_0x47679c;VisuMZ[_0x41ca56(0x2b8)]['Window_BattleLog_displayActionResults'][_0x41ca56(0x22f)](this,_0x5164bf,_0x3e806c),this['push']('clear');},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x14a)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x66c)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x66c)]=function(_0x220126){const _0x2c7d28=_0x47679c;if(!VisuMZ[_0x2c7d28(0x2b8)][_0x2c7d28(0x1ea)][_0x2c7d28(0x519)][_0x2c7d28(0x356)])return;VisuMZ['BattleCore'][_0x2c7d28(0x14a)][_0x2c7d28(0x22f)](this,_0x220126);},VisuMZ[_0x47679c(0x2b8)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x47679c(0x63e)]['displayCritical'],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x514)]=function(_0x5eaf94){const _0x2def9e=_0x47679c;if(!VisuMZ[_0x2def9e(0x2b8)][_0x2def9e(0x1ea)][_0x2def9e(0x519)][_0x2def9e(0x53f)])return;VisuMZ['BattleCore'][_0x2def9e(0x3c7)]['call'](this,_0x5eaf94);},VisuMZ[_0x47679c(0x2b8)]['Window_BattleLog_displayMiss']=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x263)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x263)]=function(_0x153c4c){const _0x55345b=_0x47679c;!VisuMZ[_0x55345b(0x2b8)]['Settings'][_0x55345b(0x519)][_0x55345b(0x750)]?this[_0x55345b(0x6b4)]('performMiss',_0x153c4c):VisuMZ['BattleCore'][_0x55345b(0x694)][_0x55345b(0x22f)](this,_0x153c4c);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x49b)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x26a)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x26a)]=function(_0x57ec36){const _0x5e2f97=_0x47679c;!VisuMZ[_0x5e2f97(0x2b8)]['Settings']['BattleLog'][_0x5e2f97(0x750)]?_0x57ec36[_0x5e2f97(0x1d8)]()[_0x5e2f97(0x4d9)]?this[_0x5e2f97(0x6b4)]('performEvasion',_0x57ec36):this['push'](_0x5e2f97(0x4c1),_0x57ec36):VisuMZ[_0x5e2f97(0x2b8)][_0x5e2f97(0x49b)][_0x5e2f97(0x22f)](this,_0x57ec36);},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x892)]=function(_0x196817){const _0x4b1984=_0x47679c;_0x196817[_0x4b1984(0x1d8)]()['hpAffected']&&(_0x196817['result']()['hpDamage']>0x0&&!_0x196817[_0x4b1984(0x1d8)]()['drain']&&this[_0x4b1984(0x6b4)]('performDamage',_0x196817),_0x196817[_0x4b1984(0x1d8)]()[_0x4b1984(0xf5)]<0x0&&this[_0x4b1984(0x6b4)]('performRecovery',_0x196817),VisuMZ[_0x4b1984(0x2b8)][_0x4b1984(0x1ea)][_0x4b1984(0x519)][_0x4b1984(0x3f2)]&&this[_0x4b1984(0x6b4)](_0x4b1984(0xe0),this[_0x4b1984(0x4e1)](_0x196817)));},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x929)]=Window_BattleLog['prototype'][_0x47679c(0x13a)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x13a)]=function(_0x2de2a5){const _0xe52d37=_0x47679c;if(!VisuMZ[_0xe52d37(0x2b8)]['Settings'][_0xe52d37(0x519)][_0xe52d37(0x8cb)])return;VisuMZ[_0xe52d37(0x2b8)][_0xe52d37(0x929)]['call'](this,_0x2de2a5);},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x536)]=Window_BattleLog['prototype'][_0x47679c(0x6d3)],Window_BattleLog[_0x47679c(0x63e)]['displayTpDamage']=function(_0x5a10b4){const _0x512f90=_0x47679c;if(!VisuMZ[_0x512f90(0x2b8)]['Settings'][_0x512f90(0x519)]['ShowTpDmg'])return;VisuMZ[_0x512f90(0x2b8)][_0x512f90(0x536)][_0x512f90(0x22f)](this,_0x5a10b4);},Window_BattleLog['prototype'][_0x47679c(0x153)]=function(_0x451de3){const _0x4a8b24=_0x47679c;_0x451de3[_0x4a8b24(0x1d8)]()['isStatusAffected']()&&(this[_0x4a8b24(0x6b4)]('pushBaseLine'),this[_0x4a8b24(0x41d)](_0x451de3),this[_0x4a8b24(0x4c6)](_0x451de3),this['push'](_0x4a8b24(0x70e)));},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x823)]=function(_0x1f3ac3){const _0xd04382=_0x47679c,_0x324fd4=_0x1f3ac3['result'](),_0x5c3968=_0x324fd4[_0xd04382(0x500)]();for(const _0x2ff73e of _0x5c3968){const _0x571bcf=_0x1f3ac3[_0xd04382(0xf2)]()?_0x2ff73e[_0xd04382(0x4d3)]:_0x2ff73e[_0xd04382(0x2bd)];_0x571bcf&&VisuMZ[_0xd04382(0x2b8)][_0xd04382(0x1ea)][_0xd04382(0x519)][_0xd04382(0x6cb)]&&(this[_0xd04382(0x6b4)]('fnordAddedStates'),this[_0xd04382(0x6b4)](_0xd04382(0x6ad)),this[_0xd04382(0x6b4)]('pushBaseLine'),this['push'](_0xd04382(0xe0),_0x571bcf[_0xd04382(0x151)](_0x1f3ac3['name']())),this[_0xd04382(0x6b4)]('wait')),_0x2ff73e['id']===_0x1f3ac3[_0xd04382(0x201)]()&&this['push'](_0xd04382(0x5f0),_0x1f3ac3);}},Window_BattleLog[_0x47679c(0x63e)]['fnordAddedStates']=function(){},Window_BattleLog[_0x47679c(0x63e)]['displayRemovedStates']=function(_0x328c6b){const _0x4f5941=_0x47679c;if(!VisuMZ['BattleCore'][_0x4f5941(0x1ea)][_0x4f5941(0x519)]['ShowRemovedState'])return;const _0x4ec26a=_0x328c6b[_0x4f5941(0x1d8)](),_0x335f2d=_0x4ec26a[_0x4f5941(0x280)]();for(const _0x4c7298 of _0x335f2d){_0x4c7298[_0x4f5941(0x85f)]&&(this['push'](_0x4f5941(0x46a)),this[_0x4f5941(0x6b4)](_0x4f5941(0x6ad)),this[_0x4f5941(0x6b4)](_0x4f5941(0x10c)),this['push'](_0x4f5941(0xe0),_0x4c7298['message4'][_0x4f5941(0x151)](_0x328c6b[_0x4f5941(0x620)]())),this[_0x4f5941(0x6b4)](_0x4f5941(0x4f7)));}},Window_BattleLog['prototype'][_0x47679c(0x46a)]=function(){},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x4c6)]=function(_0x3b4422){const _0x341a33=_0x47679c,_0x1f171e=VisuMZ['BattleCore'][_0x341a33(0x1ea)]['BattleLog'],_0x3b5a71=_0x3b4422[_0x341a33(0x1d8)]();if(_0x1f171e[_0x341a33(0x81e)])this[_0x341a33(0x35a)](_0x3b4422,_0x3b5a71[_0x341a33(0x8ce)],TextManager['buffAdd']);if(_0x1f171e['ShowAddedDebuff'])this[_0x341a33(0x35a)](_0x3b4422,_0x3b5a71[_0x341a33(0x2fc)],TextManager[_0x341a33(0x65f)]);if(_0x1f171e[_0x341a33(0x7e6)])this['displayBuffs'](_0x3b4422,_0x3b5a71['removedBuffs'],TextManager['buffRemove']);},Window_BattleLog['prototype'][_0x47679c(0x35a)]=function(_0x37fa58,_0x2a7fff,_0x583736){const _0x3eadd3=_0x47679c;for(const _0x25b5f4 of _0x2a7fff){const _0x4aa978=_0x583736[_0x3eadd3(0x151)](_0x37fa58[_0x3eadd3(0x620)](),TextManager[_0x3eadd3(0x622)](_0x25b5f4));this[_0x3eadd3(0x6b4)](_0x3eadd3(0x6ad)),this[_0x3eadd3(0x6b4)](_0x3eadd3(0x10c)),this[_0x3eadd3(0x6b4)]('addText',_0x4aa978),this[_0x3eadd3(0x6b4)](_0x3eadd3(0x4f7));}},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x852)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x78c)],Window_BattleLog[_0x47679c(0x63e)]['clear']=function(){const _0x126a2c=_0x47679c;VisuMZ['BattleCore']['Window_BattleLog_clear'][_0x126a2c(0x22f)](this),this[_0x126a2c(0x550)]();},VisuMZ['BattleCore'][_0x47679c(0x66b)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x10c)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x10c)]=function(){const _0x2d59d6=_0x47679c;VisuMZ['BattleCore'][_0x2d59d6(0x66b)][_0x2d59d6(0x22f)](this),this['callNextMethod']();},VisuMZ['BattleCore'][_0x47679c(0x226)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x6ad)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x6ad)]=function(){const _0x160d92=_0x47679c;VisuMZ['BattleCore'][_0x160d92(0x226)][_0x160d92(0x22f)](this),this['processRefresh'](),this['callNextMethod']();},VisuMZ['BattleCore'][_0x47679c(0x8fc)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x693)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x693)]=function(_0x291a08){const _0x56c0a7=_0x47679c;VisuMZ['BattleCore']['Window_BattleLog_popupDamage'][_0x56c0a7(0x22f)](this,_0x291a08),this[_0x56c0a7(0x550)]();},Window_BattleLog[_0x47679c(0x63e)]['waitForNewLine']=function(){const _0x16dcc5=_0x47679c;let _0x3fdfc8=0x0;this['_baseLineStack'][_0x16dcc5(0x42d)]>0x0&&(_0x3fdfc8=this[_0x16dcc5(0x76d)][this[_0x16dcc5(0x76d)]['length']-0x1]),this['_lines'][_0x16dcc5(0x42d)]>_0x3fdfc8?this[_0x16dcc5(0x4f7)]():this[_0x16dcc5(0x550)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1e9)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x223)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x223)]=function(_0x269680,_0x228e31){const _0x515f79=_0x47679c;VisuMZ[_0x515f79(0x2b8)][_0x515f79(0x1e9)][_0x515f79(0x22f)](this,_0x269680,_0x228e31),this[_0x515f79(0x550)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x689)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x5d5)],Window_BattleLog['prototype'][_0x47679c(0x5d5)]=function(_0x53159a,_0x35da66){const _0x398afc=_0x47679c;VisuMZ[_0x398afc(0x2b8)]['Window_BattleLog_performAction'][_0x398afc(0x22f)](this,_0x53159a,_0x35da66),this[_0x398afc(0x550)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x3aa)]=Window_BattleLog[_0x47679c(0x63e)]['performActionEnd'],Window_BattleLog[_0x47679c(0x63e)]['performActionEnd']=function(_0x48a1af){const _0x1281cc=_0x47679c;VisuMZ[_0x1281cc(0x2b8)][_0x1281cc(0x3aa)]['call'](this,_0x48a1af);for(const _0x3f0467 of BattleManager['allBattleMembers']()){if(!_0x3f0467)continue;if(_0x3f0467[_0x1281cc(0x40e)]())continue;_0x3f0467['performActionEndMembers']();}this['callNextMethod']();},VisuMZ[_0x47679c(0x2b8)]['Window_BattleLog_performDamage']=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x62b)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x62b)]=function(_0x25f555){const _0xb36baf=_0x47679c;VisuMZ[_0xb36baf(0x2b8)][_0xb36baf(0x3e0)][_0xb36baf(0x22f)](this,_0x25f555),this['callNextMethod']();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x12f)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x2d4)],Window_BattleLog[_0x47679c(0x63e)]['performMiss']=function(_0x2226f1){const _0x18d5e5=_0x47679c;VisuMZ[_0x18d5e5(0x2b8)]['Window_BattleLog_performMiss'][_0x18d5e5(0x22f)](this,_0x2226f1),this[_0x18d5e5(0x550)]();},VisuMZ[_0x47679c(0x2b8)]['Window_BattleLog_performRecovery']=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x3b9)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x3b9)]=function(_0x21f722){const _0x119b6d=_0x47679c;VisuMZ[_0x119b6d(0x2b8)][_0x119b6d(0x399)][_0x119b6d(0x22f)](this,_0x21f722),this[_0x119b6d(0x550)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x844)]=Window_BattleLog['prototype'][_0x47679c(0x857)],Window_BattleLog[_0x47679c(0x63e)]['performEvasion']=function(_0x269ea1){const _0x19af53=_0x47679c;VisuMZ[_0x19af53(0x2b8)]['Window_BattleLog_performEvasion']['call'](this,_0x269ea1),this[_0x19af53(0x550)]();},VisuMZ['BattleCore'][_0x47679c(0x800)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x4c1)],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x4c1)]=function(_0x3c77ff){const _0x551b66=_0x47679c;VisuMZ[_0x551b66(0x2b8)]['Window_BattleLog_performMagicEvasion'][_0x551b66(0x22f)](this,_0x3c77ff),this[_0x551b66(0x550)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x1f8)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x70f)],Window_BattleLog['prototype']['performCounter']=function(_0x5852a9){const _0x3e252b=_0x47679c;VisuMZ[_0x3e252b(0x2b8)][_0x3e252b(0x1f8)][_0x3e252b(0x22f)](this,_0x5852a9),this[_0x3e252b(0x550)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x324)]=Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x71f)],Window_BattleLog['prototype']['performReflection']=function(_0x58de49){const _0xe8fc60=_0x47679c;VisuMZ[_0xe8fc60(0x2b8)][_0xe8fc60(0x324)][_0xe8fc60(0x22f)](this,_0x58de49),this[_0xe8fc60(0x550)]();},VisuMZ[_0x47679c(0x2b8)][_0x47679c(0x2c9)]=Window_BattleLog[_0x47679c(0x63e)]['performSubstitute'],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x661)]=function(_0x53f82a,_0x2a9b31){VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']['call'](this,_0x53f82a,_0x2a9b31),this['callNextMethod']();},VisuMZ['BattleCore'][_0x47679c(0x227)]=Window_BattleLog[_0x47679c(0x63e)]['performCollapse'],Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x5f0)]=function(_0x32e8c4){const _0x346411=_0x47679c;VisuMZ['BattleCore'][_0x346411(0x227)]['call'](this,_0x32e8c4),this[_0x346411(0x550)]();},Window_BattleLog[_0x47679c(0x63e)]['performCastAnimation']=function(_0x24a54b,_0x31dc96){const _0x583278=_0x47679c;_0x24a54b['performCastAnimation'](_0x31dc96),this[_0x583278(0x550)]();},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x7d5)]=function(_0x1c5343,_0x4bb4da){const _0x50abfc=_0x47679c,_0x2d0c56=_0x1c5343[_0x50abfc(0x13d)]();_0x2d0c56<=0x0?SoundManager[_0x50abfc(0x479)]():this['showNormalAnimation'](_0x4bb4da,_0x2d0c56);},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x374)]=function(_0x53a970,_0x240aaf,_0x4415c5){const _0xb4ed95=_0x47679c,_0x422ee4=[_0x53a970][_0xb4ed95(0x4f9)](_0x240aaf);for(const _0x2a662a of _0x422ee4){if(!_0x2a662a)continue;_0x2a662a[_0xb4ed95(0x38f)](_0x4415c5);}this[_0xb4ed95(0x550)]();},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x473)]=function(_0x133d40){const _0x5e7e7a=_0x47679c;this[_0x5e7e7a(0x235)]=_0x133d40;},Window_BattleLog['prototype'][_0x47679c(0x608)]=function(_0x2824de,_0x1e8051){const _0x9976d3=_0x47679c;for(const _0x4745ef of _0x2824de){if(!_0x4745ef)continue;_0x4745ef[_0x9976d3(0x608)](_0x1e8051);}this[_0x9976d3(0x550)]();},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x17a)]=function(_0x25b571,_0x33e888,_0x4d5d32,_0x921d09,_0x544eb2,_0x9ed294){const _0x308c0b=_0x47679c;_0x25b571[_0x308c0b(0x2a8)](_0x33e888,_0x4d5d32,_0x921d09,_0x544eb2,_0x9ed294,-0x1),this[_0x308c0b(0x550)]();},Window_BattleLog[_0x47679c(0x63e)]['performMoveToTargets']=function(_0x16b7f5,_0x39777d,_0x299c0,_0x5c5aac,_0x597883,_0x11cb56,_0x4b6baf){const _0x7b6161=_0x47679c,_0x4ac638=Math[_0x7b6161(0x905)](..._0x39777d[_0x7b6161(0x261)](_0x5c8e89=>_0x5c8e89[_0x7b6161(0x828)]()[_0x7b6161(0x854)]-_0x5c8e89[_0x7b6161(0x828)]()['mainSpriteWidth']()/0x2)),_0x1c1188=Math[_0x7b6161(0x766)](..._0x39777d[_0x7b6161(0x261)](_0x53eccc=>_0x53eccc[_0x7b6161(0x828)]()[_0x7b6161(0x854)]+_0x53eccc['battler']()[_0x7b6161(0x4e3)]()/0x2)),_0x147470=Math[_0x7b6161(0x905)](..._0x39777d['map'](_0x475af3=>_0x475af3[_0x7b6161(0x828)]()[_0x7b6161(0x4b2)]-_0x475af3[_0x7b6161(0x828)]()[_0x7b6161(0x8f8)]())),_0x2f5e25=Math[_0x7b6161(0x766)](..._0x39777d[_0x7b6161(0x261)](_0x488d78=>_0x488d78[_0x7b6161(0x828)]()[_0x7b6161(0x4b2)])),_0x303602=_0x39777d[_0x7b6161(0x36c)](_0x263160=>_0x263160['isActor']())[_0x7b6161(0x42d)],_0x14e501=_0x39777d[_0x7b6161(0x36c)](_0x392b2a=>_0x392b2a['isEnemy']())[_0x7b6161(0x42d)];let _0x4b9580=0x0,_0x26ba81=0x0;if(_0x299c0[_0x7b6161(0x503)](/front/i))_0x4b9580=_0x303602>=_0x14e501?_0x4ac638:_0x1c1188;else{if(_0x299c0[_0x7b6161(0x503)](/middle/i))_0x4b9580=(_0x4ac638+_0x1c1188)/0x2,_0x4b6baf=-0x1;else _0x299c0['match'](/back/i)&&(_0x4b9580=_0x303602>=_0x14e501?_0x1c1188:_0x4ac638);}if(_0x299c0[_0x7b6161(0x503)](/head/i))_0x26ba81=_0x147470;else{if(_0x299c0['match'](/center/i))_0x26ba81=(_0x147470+_0x2f5e25)/0x2;else _0x299c0[_0x7b6161(0x503)](/base/i)&&(_0x26ba81=_0x2f5e25);}_0x16b7f5[_0x7b6161(0x2a8)](_0x4b9580,_0x26ba81,_0x5c5aac,_0x597883,_0x11cb56,_0x4b6baf),this[_0x7b6161(0x550)]();},Window_BattleLog[_0x47679c(0x63e)][_0x47679c(0x937)]=function(_0x4b9c13,_0x1676d8,_0x4e30f2){const _0xc50470=_0x47679c;for(const _0x1aea0f of _0x4b9c13){if(!_0x1aea0f)continue;_0x1aea0f['jumpBattler'](_0x1676d8,_0x4e30f2);}this[_0xc50470(0x550)]();};